{
  "Name": "Find Instance",
  "Description": "Fetch the information of a specific instance.\nNote: if you do not specify instance IDs or filters, the output includes information for all instances (the amount can be between 5 to 1000)\nFor more information:\nhttps://boto3.amazonaws.com/v1/documentation/api/latest/reference/services/ec2.html#EC2.Client.describe_instances",
  "Script": "from SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import output_handler\nfrom EC2Manager import EC2Manager\nimport json, ast\n\nIDENTIFIER = \"AWS - EC2\"\nSCRIPT_NAME = \"AWS EC2 - Find Instance\"\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = SCRIPT_NAME\n    output_message = \"\"\n    result_value = False\n    \n    #Extracting the integration parameters\n    access_key_id = siemplify.extract_configuration_param(IDENTIFIER,\"Access Key ID\")\n    secret_access_key = siemplify.extract_configuration_param(IDENTIFIER, \"Secret Access Key\")\n    default_region = siemplify.extract_configuration_param(IDENTIFIER, \"Default Region\")\n    \n    #Extracting the action parameters\n    instances_ids = siemplify.extract_action_param(\"Instance Ids\")\n    filters = siemplify.extract_action_param(\"Filters\")\n    max_results = siemplify.extract_action_param(\"Max Results\", input_type=int)\n\n    #Creating an instance of EC2Manager object\n    ec2_manager = EC2Manager(access_key_id, secret_access_key, default_region)\n    \n    json_result = {}\n    found_instances_ids = []\n    not_found_instances_ids = []\n    filters_list = []\n\n    \n    if filters is not None :\n        filters = json.loads(filters)\n        filters_list.append(filters)\n        \n    if filters is None:\n        filters = [{}]\n        \n    if instances_ids is not None:\n        instances_ids = instances_ids.split(\",\")\n        for instance in instances_ids:\n            instance = instance.strip() \n            try :\n                instance_details = ec2_manager.describe_instances(instance, filters_list, max_results)\n                siemplify.LOGGER.info(f\"The instance {instance} was fetched successfully\" )\n                found_instances_ids.append(instance)\n                json_result[instance] = instance_details\n                \n            except Exception as e:\n                not_found_instances_ids.append(instance)\n                siemplify.LOGGER.error(f\"Error occured when fetching the instance {instance}.\\nError: {e}\")\n    \n    else:\n        found_instances_details = ec2_manager.describe_instances(instances_ids, filters_list, max_results)\n        json_result = found_instances_details\n        output_message = \"All the instances were fetched successfully\"\n        result_value = True\n\n\n    if len(found_instances_ids) > 0:\n        output_message = f\"The instances {found_instances_ids} were fetched successfully.\\n\" \n        result_value = True \n    \n    if len(found_instances_ids) > 0 and len(not_found_instances_ids) > 0:\n        output_message += f\"The instances {not_found_instances_ids} were not fetched\"\n\n    siemplify.result.add_result_json(json_result)\n    siemplify.end(output_message, result_value)\n\nif __name__ == \"__main__\":\n    main()\n",
  "IntegrationIdentifier": "AWS - EC2",
  "ScriptResultName": "ScriptResult",
  "DynamicResultsMetadata": [
    {
      "ResultName": "JsonResult",
      "ResultExample": "{\r\n\t\"Reservations\": [{\r\n\t\t\"Groups\": [{\r\n\t\t\t\"GroupName\": \"string\",\r\n\t\t\t\"GroupId\": \"string\"\r\n\t\t}],\r\n\t\t\"Instances\": [{\r\n\t\t\t\"AmiLaunchIndex\": 123,\r\n\t\t\t\"ImageId\": \"string\",\r\n\t\t\t\"InstanceId\": \"string\",\r\n\t\t\t\"InstanceType\": \"t1.micro\",\r\n\t\t\t\"KernelId\": \"string\",\r\n\t\t\t\"KeyName\": \"string\",\r\n\t\t\t\"LaunchTime\": \"1.1.20\",\r\n\t\t\t\"Monitoring\": {\r\n\t\t\t\t\"State\": \"disabled\"\r\n\t\t\t},\r\n\t\t\t\"Placement\": {\r\n\t\t\t\t\"AvailabilityZone\": \"string\",\r\n\t\t\t\t\"Affinity\": \"string\",\r\n\t\t\t\t\"GroupName\": \"string\",\r\n\t\t\t\t\"PartitionNumber\": 123,\r\n\t\t\t\t\"HostId\": \"string\",\r\n\t\t\t\t\"Tenancy\": \"default\",\r\n\t\t\t\t\"SpreadDomain\": \"string\",\r\n\t\t\t\t\"HostResourceGroupArn\": \"string\"\r\n\t\t\t},\r\n\t\t\t\"Platform\": \"Windows\",\r\n\t\t\t\"PrivateDnsName\": \"string\",\r\n\t\t\t\"PrivateIpAddress\": \"string\",\r\n\t\t\t\"ProductCodes\": [{\r\n\t\t\t\t\"ProductCodeId\": \"string\",\r\n\t\t\t\t\"ProductCodeType\": \"devpay\"\r\n\t\t\t}],\r\n\t\t\t\"PublicDnsName\": \"string\",\r\n\t\t\t\"PublicIpAddress\": \"string\",\r\n\t\t\t\"RamdiskId\": \"string\",\r\n\t\t\t\"State\": {\r\n\t\t\t\t\"Code\": 123,\r\n\t\t\t\t\"Name\": \"pending\"\r\n\t\t\t},\r\n\t\t\t\"StateTransitionReason\": \"string\",\r\n\t\t\t\"SubnetId\": \"string\",\r\n\t\t\t\"VpcId\": \"string\",\r\n\t\t\t\"Architecture\": \"i386\",\r\n\t\t\t\"BlockDeviceMappings\": [{\r\n\t\t\t\t\"DeviceName\": \"string\",\r\n\t\t\t\t\"Ebs\": {\r\n\t\t\t\t\t\"AttachTime\": \"1.1.20\",\r\n\t\t\t\t\t\"DeleteOnTermination\": \"True\",\r\n\t\t\t\t\t\"Status\": \"attaching\",\r\n\t\t\t\t\t\"VolumeId\": \"string\"\r\n\t\t\t\t}\r\n\t\t\t}],\r\n\t\t\t\"ClientToken\": \"string\",\r\n\t\t\t\"EbsOptimized\": \"True\",\r\n\t\t\t\"EnaSupport\": \"True\",\r\n\t\t\t\"Hypervisor\": \"ovm\",\r\n\t\t\t\"IamInstanceProfile\": {\r\n\t\t\t\t\"Arn\": \"string\",\r\n\t\t\t\t\"Id\": \"string\"\r\n\t\t\t},\r\n\t\t\t\"InstanceLifecycle\": \"spot\",\r\n\t\t\t\"ElasticGpuAssociations\": [{\r\n\t\t\t\t\"ElasticGpuId\": \"string\",\r\n\t\t\t\t\"ElasticGpuAssociationId\": \"string\",\r\n\t\t\t\t\"ElasticGpuAssociationState\": \"string\",\r\n\t\t\t\t\"ElasticGpuAssociationTime\": \"string\"\r\n\t\t\t}],\r\n\t\t\t\"ElasticInferenceAcceleratorAssociations\": [{\r\n\t\t\t\t\"ElasticInferenceAcceleratorArn\": \"string\",\r\n\t\t\t\t\"ElasticInferenceAcceleratorAssociationId\": \"string\",\r\n\t\t\t\t\"ElasticInferenceAcceleratorAssociationState\": \"string\",\r\n\t\t\t\t\"ElasticInferenceAcceleratorAssociationTime\": \"1.1.20\"\r\n\t\t\t}],\r\n\t\t\t\"NetworkInterfaces\": [{\r\n\t\t\t\t\"Association\": {\r\n\t\t\t\t\t\"CarrierIp\": \"string\",\r\n\t\t\t\t\t\"IpOwnerId\": \"string\",\r\n\t\t\t\t\t\"PublicDnsName\": \"string\",\r\n\t\t\t\t\t\"PublicIp\": \"string\"\r\n\t\t\t\t},\r\n\t\t\t\t\"Attachment\": {\r\n\t\t\t\t\t\"AttachTime\": \"1.1.20\",\r\n\t\t\t\t\t\"AttachmentId\": \"string\",\r\n\t\t\t\t\t\"DeleteOnTermination\": \"True\",\r\n\t\t\t\t\t\"DeviceIndex\": \"111\",\r\n\t\t\t\t\t\"Status\": \"attaching\",\r\n\t\t\t\t\t\"NetworkCardIndex\": \"111\"\r\n\t\t\t\t},\r\n\t\t\t\t\"Description\": \"string\",\r\n\t\t\t\t\"Groups\": [{\r\n\t\t\t\t\t\"GroupName\": \"string\",\r\n\t\t\t\t\t\"GroupId\": \"string\"\r\n\t\t\t\t}],\r\n\t\t\t\t\"Ipv6Addresses\": [{\r\n\t\t\t\t\t\"Ipv6Address\": \"string\"\r\n\t\t\t\t}],\r\n\t\t\t\t\"MacAddress\": \"string\",\r\n\t\t\t\t\"NetworkInterfaceId\": \"string\",\r\n\t\t\t\t\"OwnerId\": \"string\",\r\n\t\t\t\t\"PrivateDnsName\": \"string\",\r\n\t\t\t\t\"PrivateIpAddress\": \"string\",\r\n\t\t\t\t\"PrivateIpAddresses\": [{\r\n\t\t\t\t\t\"Association\": {\r\n\t\t\t\t\t\t\"CarrierIp\": \"string\",\r\n\t\t\t\t\t\t\"IpOwnerId\": \"string\",\r\n\t\t\t\t\t\t\"PublicDnsName\": \"string\",\r\n\t\t\t\t\t\t\"PublicIp\": \"string\"\r\n\t\t\t\t\t},\r\n\t\t\t\t\t\"Primary\": \"True\",\r\n\t\t\t\t\t\"PrivateDnsName\": \"string\",\r\n\t\t\t\t\t\"PrivateIpAddress\": \"string\"\r\n\t\t\t\t}],\r\n\t\t\t\t\"SourceDestCheck\": \"True\",\r\n\t\t\t\t\"Status\": \"available\",\r\n\t\t\t\t\"SubnetId\": \"string\",\r\n\t\t\t\t\"VpcId\": \"string\",\r\n\t\t\t\t\"InterfaceType\": \"string\"\r\n\t\t\t}],\r\n\t\t\t\"OutpostArn\": \"string\",\r\n\t\t\t\"RootDeviceName\": \"string\",\r\n\t\t\t\"RootDeviceType\": \"ebs\",\r\n\t\t\t\"SecurityGroups\": [{\r\n\t\t\t\t\"GroupName\": \"string\",\r\n\t\t\t\t\"GroupId\": \"string\"\r\n\t\t\t}],\r\n\t\t\t\"SourceDestCheck\": \"True\",\r\n\t\t\t\"SpotInstanceRequestId\": \"string\",\r\n\t\t\t\"SriovNetSupport\": \"string\",\r\n\t\t\t\"StateReason\": {\r\n\t\t\t\t\"Code\": \"string\",\r\n\t\t\t\t\"Message\": \"string\"\r\n\t\t\t},\r\n\t\t\t\"Tags\": [{\r\n\t\t\t\t\"Key\": \"string\",\r\n\t\t\t\t\"Value\": \"string\"\r\n\t\t\t}],\r\n\t\t\t\"VirtualizationType\": \"hvm\",\r\n\t\t\t\"CpuOptions\": {\r\n\t\t\t\t\"CoreCount\": \"123\",\r\n\t\t\t\t\"ThreadsPerCore\": \"123\"\r\n\t\t\t},\r\n\t\t\t\"CapacityReservationId\": \"string\",\r\n\t\t\t\"CapacityReservationSpecification\": {\r\n\t\t\t\t\"CapacityReservationPreference\": \"open\",\r\n\t\t\t\t\"CapacityReservationTarget\": {\r\n\t\t\t\t\t\"CapacityReservationId\": \"string\",\r\n\t\t\t\t\t\"CapacityReservationResourceGroupArn\": \"string\"\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\t\"HibernationOptions\": {\r\n\t\t\t\t\"Configured\": \"True\"\r\n\t\t\t},\r\n\t\t\t\"Licenses\": [{\r\n\t\t\t\t\"LicenseConfigurationArn\": \"string\"\r\n\t\t\t}],\r\n\t\t\t\"MetadataOptions\": {\r\n\t\t\t\t\"State\": \"pending\",\r\n\t\t\t\t\"HttpTokens\": \"optional\",\r\n\t\t\t\t\"HttpPutResponseHopLimit\": \"111\",\r\n\t\t\t\t\"HttpEndpoint\": \"disabled\"\r\n\t\t\t},\r\n\t\t\t\"EnclaveOptions\": {\r\n\t\t\t\t\"Enabled\": \"True\"\r\n\t\t\t}\r\n\t\t}],\r\n\t\t\"OwnerId\": \"string\",\r\n\t\t\"RequesterId\": \"string\",\r\n\t\t\"ReservationId\": \"string\"\r\n\t}],\r\n\t\"NextToken\": \"string\"\r\n}",
      "ShowResult": true
    }
  ],
  "Creator": "TehilaGourary",
  "IsEnabled": true,
  "IsCustom": false,
  "IsSystem": false,
  "Version": 167.0,
  "TimeoutSeconds": 300,
  "Parameters": [
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": "",
      "Description": "The instance IDs which you want to fetch.\nFor example: instanceID1,instanceID2\n",
      "Name": "Instance Ids",
      "Value": "",
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1609172160029,
      "ModificationTimeUnixTimeInMs": 1609172160029
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": "{\"Name\": \"instance-type\", \"Values\": [\"t2.micro\"]}",
      "Description": "The filters of the instances you want to fetch.\nFor example: \n{\"NameFilter1\": \"NameFilter1\", \"Values\": [\"value1\", \"value2\"]}",
      "Name": "Filters",
      "Value": "{\"Name\": \"instance-type\", \"Values\": [\"t2.micro\"]}",
      "Type": 11,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1609172160029,
      "ModificationTimeUnixTimeInMs": 1609172160029
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": "",
      "Description": "The maximum number of results to return (between 5 to 1000)\nFor example: 5\n",
      "Name": "Max Results",
      "Value": "",
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1609172160029,
      "ModificationTimeUnixTimeInMs": 1609172160029
    }
  ],
  "DefaultResultValue": "",
  "PythonVersion": "None",
  "Id": 0,
  "CreationTimeUnixTimeInMs": 1609172160027,
  "ModificationTimeUnixTimeInMs": 1609172160027
}