{
  "Name": "Render Template",
  "Description": "This action will render a Jinja2 template using a JSON input.  ",
  "Script": "from SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import unix_now, convert_unixtime_to_datetime, output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED,EXECUTION_STATE_TIMEDOUT\nfrom jinja2 import Template, Environment\nimport JinjaFilters\nimport json\nimport dateutil\nimport time\nfrom inspect import getmembers, isfunction\n\n\n# Example Consts:\nINTEGRATION_NAME = \"TemplateEngine\"\n\nSCRIPT_NAME = \"RenderTemplate\"\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = SCRIPT_NAME\n    siemplify.LOGGER.info(\"================= Main - Param Init =================\")\n\n    events = []\n    for event in siemplify.current_alert.security_events:\n        events.append(event.additional_properties)\n    entities = {}\n    for entity in siemplify.target_entities:\n        if entity.additional_properties[\"Type\"] != \"ALERT\":\n            entities[entity.additional_properties[\"Identifier\"]] = entity.additional_properties\n            \n    # INIT ACTION PARAMETERS:\n    json_object = siemplify.extract_action_param(param_name=\"JSON Object\",  is_mandatory=False, print_value=False, default_value=\"{}\")\n    template = siemplify.extract_action_param(param_name=\"Template\", is_mandatory=False, print_value=False)\n    jinja = siemplify.extract_action_param(param_name=\"Jinja\", is_mandatory=False, print_value=False)\n    include_case_data = str(siemplify.extract_action_param(param_name=\"Include Case Data\", is_mandatory=False, print_value=False, default_value = 'true')).lower() == 'true'\n    siemplify.LOGGER.info(\"----------------- Main - Started -----------------\")\n    try:\n        status = EXECUTION_STATE_COMPLETED  # used to flag back to siemplify system, the action final status\n        output_message = \"output message :\"  # human readable message, showed in UI as the action result\n        result_value = None  # Set a simple result value, used for playbook if\\else and placeholders.\n        try:\n            input_json = json.loads(json_object)\n            \n            \n        except Exception as e:\n            siemplify.LOGGER.error(\"Error parsing JSON Object: {}\".format(json_object))\n            siemplify.LOGGER.exception(e)\n            raise\n            status = EXECUTION_STATE_FAILED\n            result_value = \"Failed\"\n            output_message += \"\\n failure parsing JSON object.\"\n        jinja_env = Environment(autoescape=True, extensions=['jinja2.ext.do', 'jinja2.ext.loopcontrols'],\n                                trim_blocks=True,lstrip_blocks=True)\n        filters = {name: function \n                        for name, function in getmembers(JinjaFilters)\n                        if isfunction(function)}\n   \n                        \n        jinja_env.filters.update(filters)       \n        \n        if type(input_json) == list:\n            result_value = ''\n            if jinja:\n                template = jinja_env.from_string(jinja)\n            else:\n                template = jinja_env.from_string(template)\n            for entry in input_json:\n                if include_case_data:\n                    entry.update({\"SiemplifyEvents\": events})\n                    entry.update({\"SiemplifyEntities\": entities})\n                result_value += template.render(entry, input_json=entry)\n                output_message = \"Successfully rendered the template.\"\n        elif type(input_json) == dict:\n            if include_case_data:\n                input_json.update({\"SiemplifyEvents\": events})\n                input_json.update({\"SiemplifyEntities\": entities})\n                print(input_json)\n            if jinja:\n                template = jinja_env.from_string(jinja)    \n            else:\n                template = jinja_env.from_string(template)\n            result_value = template.render(input_json = input_json)\n            output_message = \"Successfully rendered the template.\"\n        else:\n            siemplify.LOGGER.error(\"Incorrect type.  Needs to be a list or dict.\")\n\n    except Exception as e:\n        siemplify.LOGGER.error(\"General error performing action {}\".format(SCRIPT_NAME))\n        siemplify.LOGGER.exception(e)\n        raise  # used to return entire error details - including stacktrace back to client UI. Best for most usecases\n        # in case you want to handle the error yourself, don't raise, and handle error result ouputs:\n        status = EXECUTION_STATE_FAILED\n        result_value = \"Failed\"\n        output_message += \"\\n unknown failure\"\n\n\n    siemplify.LOGGER.info(\"----------------- Main - Finished -----------------\")\n    siemplify.LOGGER.info(\"\\n  status: {}\\n  result_value: {}\\n  output_message: {}\".format(status,result_value, output_message))\n    siemplify.end(output_message, result_value, status)\n\n\nif __name__ == \"__main__\":\n    main()\n",
  "IntegrationIdentifier": "TemplateEngine",
  "ScriptResultName": "ScriptResult",
  "DynamicResultsMetadata": [
    {
      "ResultName": "JsonResult",
      "ResultExample": "{}",
      "ShowResult": true
    }
  ],
  "Creator": "Robert",
  "IsEnabled": true,
  "IsCustom": false,
  "IsSystem": false,
  "Version": 26.0,
  "TimeoutSeconds": 600,
  "Parameters": [
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": "{}",
      "Description": "The raw JSON object that will be used to render the template.  This value is available as the variable input_json in the Jinja template.",
      "Name": "JSON Object",
      "Value": "{}",
      "Type": 11,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1620311596139,
      "ModificationTimeUnixTimeInMs": 1620311596139
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": "",
      "Description": "The Jinja template code to be rendered.  Will override Template parameter. Append |safe to disable HTML encoding.",
      "Name": "Jinja",
      "Value": "",
      "Type": 16,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1620311596139,
      "ModificationTimeUnixTimeInMs": 1620311596139
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": "false",
      "Description": "When enabled, entity attributes and event data are available under the variables input_json['SecurityEvents'] and input_json['SecurityEntities']",
      "Name": "Include Case Data",
      "Value": "false",
      "Type": 1,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1620311596139,
      "ModificationTimeUnixTimeInMs": 1620311596139
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": "",
      "Description": "The Jinja2 template to be rendered.  Can be a HTML template from \"Settings->Environment\" or added in content box.",
      "Name": "Template",
      "Value": "",
      "Type": 10,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1620311596139,
      "ModificationTimeUnixTimeInMs": 1620311596139
    }
  ],
  "DefaultResultValue": "",
  "PythonVersion": "None",
  "SimulationData": {
    "Entities": null
  },
  "SimulationDataJson": null,
  "Id": 0,
  "CreationTimeUnixTimeInMs": 1620311596129,
  "ModificationTimeUnixTimeInMs": 1620311596131
}