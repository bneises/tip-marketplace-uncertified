{
    "Name": "Render Template from Array",
    "Description": "Render Template, but for lists.  Loops through a list and applies the Jinja template to each list item.",
    "Script": "from SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import unix_now, convert_unixtime_to_datetime, output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED, EXECUTION_STATE_TIMEDOUT\nfrom jinja2 import Template, Environment\nimport JinjaFilters\nimport json\nimport dateutil\nimport time\nfrom inspect import getmembers, isfunction\n\n# Example Consts:\nINTEGRATION_NAME = \"TemplateEngine\"\n\nSCRIPT_NAME = \"RenderTemplate\"\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = SCRIPT_NAME\n    siemplify.LOGGER.info(\"================= Main - Param Init =================\")\n\n\n    # INIT ACTION PARAMETERS:\n    arrayInput = siemplify.extract_action_param(param_name=\"Array input\", is_mandatory=False, print_value=False, default_value=\"{}\")\n    jinja = siemplify.extract_action_param(param_name=\"Jinja\", is_mandatory=False, print_value=False)\n    join =  siemplify.extract_action_param(param_name=\"join\", is_mandatory=False, print_value=False, default_value=\"\")\n    prefix =  siemplify.extract_action_param(param_name=\"prefix\", is_mandatory=False, print_value=False, default_value=\"\")\n    suffix =  siemplify.extract_action_param(param_name=\"suffix\", is_mandatory=False, print_value=False, default_value=\"\")\n  \n    siemplify.LOGGER.info(\"----------------- Main - Started -----------------\")\n    try:\n        status = EXECUTION_STATE_COMPLETED  # used to flag back to siemplify system, the action final status\n        output_message = \"output message :\"  # human readable message, showed in UI as the action result\n        result_value = None  # Set a simple result value, used for playbook if\\else and placeholders.\n        try:\n            input_json = json.loads(arrayInput)\n\n\n        except Exception as e:\n            siemplify.LOGGER.error(\"Error parsing JSON Object: {}\".format(arrayInput))\n            siemplify.LOGGER.exception(e)\n            raise\n            status = EXECUTION_STATE_FAILED\n            result_value = \"Failed\"\n            output_message += \"\\n failure parsing JSON object.\"\n\n        # if JSON, make a 1 element array\n        if not isinstance(input_json, list):\n            input_json = [input_json]\n\n\n        jinja_env = Environment(autoescape=True, extensions=['jinja2.ext.do', 'jinja2.ext.loopcontrols'],\n                                trim_blocks=True, lstrip_blocks=True)\n        filters = {name: function\n                   for name, function in getmembers(JinjaFilters)\n                   if isfunction(function)}\n\n        jinja_env.filters.update(filters)\n        try:\n            import CustomFilters\n            custom_filters = {name: function\n                   for name, function in getmembers(CustomFilters)\n                   if isfunction(function)}\n            jinja_env.filters.update(custom_filters)\n        except Exception as e:\n            siemplify.LOGGER.error(\"Error loading CustomFilters\")\n            siemplify.LOGGER.error(e)\n            pass\n        \n\n        result_value = ''\n\n        template = jinja_env.from_string(jinja)\n\n\n        outputArray = []\n\n        for entry in input_json:\n            siemplify.LOGGER.info(entry)\n            outputArray.append(template.render(entry, row=entry))\n        \n            \n        result_value = prefix+join.join(outputArray)+suffix\n\n        output_message = \"Successfully rendered the template.\"\n\n\n    except Exception as e:\n        siemplify.LOGGER.error(\"General error performing action {}\".format(SCRIPT_NAME))\n        siemplify.LOGGER.exception(e)\n        raise  # used to return entire error details - including stacktrace back to client UI. Best for most usecases\n        # in case you want to handle the error yourself, don't raise, and handle error result ouputs:\n        status = EXECUTION_STATE_FAILED\n        result_value = \"Failed\"\n        output_message += \"\\n unknown failure\"\n\n    siemplify.LOGGER.info(\"----------------- Main - Finished -----------------\")\n    siemplify.LOGGER.info(\n        \"\\n  status: {}\\n  result_value: {}\\n  output_message: {}\".format(status, result_value, output_message))\n    siemplify.end(output_message, result_value, status)\n\n\nif __name__ == \"__main__\":\n    main()\n",
    "IntegrationIdentifier": "TemplateEngine",
    "ScriptResultName": "ScriptResult",
    "DynamicResultsMetadata": [
        {
            "ResultName": "JsonResult",
            "ResultExample": "{}",
            "ShowResult": true
        }
    ],
    "Creator": "53ed574a-634a-45df-a637-60ffdc3c8aef",
    "IsEnabled": true,
    "IsCustom": false,
    "IsSystem": false,
    "Version": 41.0,
    "TimeoutSeconds": 600,
    "IsAsync": false,
    "AsyncPollingIntervalInSeconds": 3600,
    "TotalIntervalTimeoutForAsyncInSeconds": 86400,
    "Parameters": [
        {
            "CustomActionId": 0,
            "IsMandatory": false,
            "DefaultValue": "[]",
            "Description": "Point to output from a previous Action that outputs an Array",
            "Name": "Array input",
            "Value": "[]",
            "Type": 11,
            "OptionalValues": null,
            "OptionalValuesJson": null
        },
        {
            "CustomActionId": 0,
            "IsMandatory": false,
            "DefaultValue": "Start\n{{ row.name }}\nEnd",
            "Description": "The Jinja template code to be rendered.  Will override Template parameter. Append |safe to disable HTML encoding.",
            "Name": "Jinja",
            "Value": "Start\n{{ row.name }}\nEnd",
            "Type": 16,
            "OptionalValues": null,
            "OptionalValuesJson": null
        },
        {
            "CustomActionId": 0,
            "IsMandatory": false,
            "DefaultValue": ",",
            "Description": "JOIN character between loops to join together",
            "Name": "join",
            "Value": ",",
            "Type": 0,
            "OptionalValues": null,
            "OptionalValuesJson": null
        },
        {
            "CustomActionId": 0,
            "IsMandatory": false,
            "DefaultValue": null,
            "Description": "Prefix string before output",
            "Name": "prefix",
            "Value": null,
            "Type": 0,
            "OptionalValues": null,
            "OptionalValuesJson": null
        },
        {
            "CustomActionId": 0,
            "IsMandatory": false,
            "DefaultValue": null,
            "Description": "Suffix string after output",
            "Name": "suffix",
            "Value": null,
            "Type": 0,
            "OptionalValues": null,
            "OptionalValuesJson": null
        }
    ],
    "DefaultResultValue": "",
    "PythonVersion": "None",
    "SimulationData": {
        "Entities": null
    },
    "SimulationDataJson": null
}
