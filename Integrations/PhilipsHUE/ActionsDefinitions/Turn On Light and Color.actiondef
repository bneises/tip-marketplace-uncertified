{"Name":"Turn On Light and Color","Description":"Turns on light by light ID, with the chosen color and effect.","Script":"from PhilipsManager import PhilipsManager\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED, EXECUTION_STATE_TIMEDOUT\n\n# Consts:\nINTEGRATION_NAME = \"PhilipsHUE\"\nSCRIPT_NAME = \"Turn On Light and Color\"\nCOLORS = {\"Red\": 65522, \"Orange\": 4080, \"Yellow\": 8000, \"Green\": 17500, \"Blue\": 43431, \"Purple\": 49311, \"Pink\": 56000}\nEFFECTS = {\"None\": \"none\", \"Flicker-Once\": \"select\", \"Flicker-Loop\": \"lselect\"}\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = SCRIPT_NAME\n    siemplify.LOGGER.info(\"================= Main - Param Init =================\")\n\n    # Extract Integration params:\n    bridge_ip = siemplify.extract_configuration_param(INTEGRATION_NAME, \"Bridge IP\")\n    username = siemplify.extract_configuration_param(INTEGRATION_NAME, \"Authorized Username\")\n\n    # Init Action params:\n    light_id = siemplify.extract_action_param(param_name=\"Light ID\")\n    color_name = siemplify.extract_action_param(param_name=\"Color\")\n    alert_effect_chosen = siemplify.extract_action_param(param_name=\"Alert effect\")\n    color_code = COLORS[color_name]\n    alert_effect = EFFECTS[alert_effect_chosen]\n\n    # Instanciate manager for methods:\n    philipsManager = PhilipsManager(bridge_ip, username)\n\n    # Instanciate result json:\n    res_json = {}\n    res_json[\"light_id\"] = light_id\n\n    # Init action reault values:\n    status = EXECUTION_STATE_FAILED\n    output_message = f'Failed to turn the light <{light_id}> on with hue color <{color_code}> and <{alert_effect_chosen}> effect. '\n    result_value = False\n\n    try:\n        # check ID:\n        id_available = philipsManager.search_light_id(light_id)\n        if id_available:\n            # turn light on:\n            res_json[\"info\"] = philipsManager.adjust_light(light_id, True, color_code, alert_effect)\n            if not res_json.get(\"info\").get(\"light reachability\"):\n                output_message += f\"Light <{light_id}> is unreachable.\"\n            else:\n                status = EXECUTION_STATE_COMPLETED\n                output_message = f'Successfully turned the light <{light_id}> on with color <{color_name}> and <{alert_effect_chosen}> effect.'\n                result_value = True\n        else:\n            status = EXECUTION_STATE_FAILED\n            output_message = f'Light with <{light_id}> does not exist under the bridge <{bridge_ip}>.'\n            result_value = False\n\n    except Exception as e:\n        siemplify.LOGGER.error(e)\n        output_message += \"Error: \" + str(e)\n\n    finally:\n        siemplify.LOGGER.info(\n            \"\\n  status: {}\\n  result_value: {}\\n  output_message: {}\".format(status, result_value, output_message))\n        siemplify.result.add_result_json(res_json)\n        siemplify.end(output_message, result_value, status)\n\n\nif __name__ == \"__main__\":\n    main()\n","IntegrationIdentifier":"PhilipsHUE","ScriptResultName":"ScriptResult","DynamicResultsMetadata":[{"ResultName":"JsonResult","ResultExample":"{\n  \"light_id\": \"2\",\n  \"info\": {\n    \"light reachability\": true,\n    \"results\": [\n      {\n        \"success\": {\n          \"/lights/2/state/on\": true\n        }\n      },\n      {\n        \"success\": {\n          \"/lights/2/state/hue\": 17500\n        }\n      },\n      {\n        \"success\": {\n          \"/lights/2/state/sat\": 254\n        }\n      },\n      {\n        \"success\": {\n          \"/lights/2/state/bri\": 254\n        }\n      },\n      {\n        \"success\": {\n          \"/lights/3/state/alert\": \"select\"\n        }\n      }\n    ]\n  }\n}","ShowResult":true}],"Creator":"Admin","IsEnabled":true,"IsCustom":false,"IsSystem":false,"Version":41.0,"TimeoutSeconds":300,"IsAsync":null,"AsyncPollingIntervalInSeconds":3600,"TotalIntervalTimeoutForAsyncInSeconds":86400,"Parameters":[{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"1","Description":"The ID of the light you want to turn on.\n\nHow to view hue lights:\nhttps://developers.meethue.com/develop/get-started-2/#turning-a-light-on-and-off","Name":"Light ID","Value":"1","Type":0,"OptionalValues":null,"OptionalValuesJson":null},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"Green","Description":"Color of the light.","Name":"Color","Value":"Green","Type":15,"OptionalValues":["Red","Orange","Yellow","Green","Blue","Purple","Pink"],"OptionalValuesJson":"[\"Red\",\"Orange\",\"Yellow\",\"Green\",\"Blue\",\"Purple\",\"Pink\"]"},{"CustomActionId":0,"IsMandatory":true,"DefaultValue":"None","Description":"None: Light just turns on\nFlicker-Once: Light flickers once, then stays on\nFlicker-Loop: Light fickers 15s (or until turned off), then stays on.","Name":"Alert effect","Value":"None","Type":15,"OptionalValues":["None","Flicker-Once","Flicker-Loop"],"OptionalValuesJson":"[\"None\",\"Flicker-Once\",\"Flicker-Loop\"]"}],"DefaultResultValue":"","PythonVersion":"None","SimulationData":{"Entities":null},"SimulationDataJson":null}
