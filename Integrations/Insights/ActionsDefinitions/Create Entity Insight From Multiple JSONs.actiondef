{
  "Name": "Create Entity Insight From Multiple JSONs",
  "Description": "The action creates an entity insight from multiple json files. ",
  "Script": "from SiemplifyUtils import output_handler\nimport json\nfrom SiemplifyAction import SiemplifyAction\n\nfrom ToolsCommon import parse_raw_message\n\n# CONSTS:\nENTITY_IDENTIFIER_FIELD_NAME = \"Entity\"\nJSON_DATA_FIELD_NAME = \"EntityResult\"\nMULTIPLE_VALUES = \"MULTIPLE VALUES FOUND\"\nMISSING_VAL = \"NotFound\"\nNOT_SIMPLE_VAL = \"Value is a dict\"\nNOT_FOR_TABLE = \"NO_TABLE\"\n\ndef GetIdentifiersAsString(target_entities):\n    entitiesIdentifiers = []\n    for entity in target_entities:\n        entitiesIdentifiers.append(entity.identifier)\n    return \", \".join(entitiesIdentifiers)\n\ndef GetEntityByString(identifier, entities):\n    for ent in entities:\n        if identifier.lower() == ent.identifier.lower():\n            return ent\n    return None\n\ndef process_trios(trio_list, ph_separator):\n    bad_json = []\n    insight_data = []\n    for trio in trio_list:\n        if trio.get(\"title\") : # We expect some values here\n            data_obj = {}\n            data_obj[\"title\"] = trio.get(\"title\")\n            try:\n                data_obj[\"fields\"] = process_fields_string(trio.get(\"fields\"), ph_separator)\n            except Exception as e:\n                raise Exception(\"Syntax error. Error message is: {}\".format(e))\n            try:\n                data_obj[\"json\"] = json.loads(trio.get(\"json\"))\n            except:\n                bad_json.append(data_obj)\n                continue\n            insight_data.append(data_obj)\n    \n    return insight_data, bad_json\n\ndef process_fields_string(field_string, ph_separator):\n    \"\"\"\n    Gets a string of the format: \"Count:path1.path2.length,RISK:path3.path4.risk_score\"\n    and breaks it into list of objects: {\"display\": STRING, \"key_path\": STRING(path1.path2.path3)}\n    \n    Key characters: \",\" and \":\". \":\" marks the separation between display and path where \",\" marks separation between fields\n    \"\"\"\n    if not field_string:\n        return []\n    \n    fields_data = []\n    #raise Exception(json.dumps(field_string))\n    # field_string = field_string.replace(u\"\\n\", u\",\")\n    for field_rep in field_string.split(ph_separator):\n        if field_rep.strip(): # Ignore empty\n            temp = field_rep.strip().split(\":\")\n            display = temp[0]\n            if len(temp) == 1:\n                key_path = temp[0] #.split(\".\")\n                fields_data.append({\"display\": NOT_FOR_TABLE, \"key_path\": key_path})\n                continue\n                #raise Exception(\"Field definition missing ':'. Field: {}\".format(field_rep))\n            # elif len(temp) != 2:\n                # raise Exception(\"General issue with the formating of the field: {}\".format(json.dumps(field_rep)))\n            key_path = \":\".join(temp[1:]) #.split(\".\")\n            fields_data.append({\"display\": display.strip(), \"key_path\": key_path})#[x.strip() for x in key_path]})\n    return fields_data\n\ndef extract_json_based_on_entity(entity, json):\n    for item in json: # Assuming regular list format for enrichment actions\n        if item[ENTITY_IDENTIFIER_FIELD_NAME].lower() == entity.identifier.lower():\n            return item[JSON_DATA_FIELD_NAME]\n    return None\n\ndef find_key_path_in_json(key_path, json):\n    \"\"\"\n    Finds the relevant key_path in a json object. \n    If list encountered, if its of len 1, its value is used. Otherwise, it exits with default value (MULTIPLE VALUES FOUND)\n    \"\"\"\n    return find_key_path_recursive(key_path, json)\n    \ndef find_key_path_recursive(key_list, current_json):\n    if key_list:\n        if isinstance(current_json, list):\n            if key_list:\n                if len(current_json) == 1:\n                    return find_key_path_recursive(key_list, current_json[0])\n                else:\n                    return MULTIPLE_VALUES\n            return \", \".join(current_json)\n        if isinstance(current_json, dict):\n            if key_list[0] in current_json:\n                return find_key_path_recursive(key_list[1:], current_json[key_list[0]])\n            #raise Exception(\"Key: {}, json: {}\".format(key_list, current_json))\n            return MISSING_VAL\n    else:\n        if isinstance(current_json, dict):\n            return NOT_SIMPLE_VAL\n        if isinstance(current_json, list):\n            return u\",\".join(current_json)\n        \n        return u\"{}\".format(current_json) # Found val, return it. Format to make everything into string\n    \n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    \n    added_insights = []\n    \n    input_trios = []\n    \n    for i in range(1,8):\n        input_trios.append({\"title\": siemplify.parameters.get('Title{}'.format(i)), \n                            \"fields\": siemplify.parameters.get('Fields{}'.format(i)), \n                            \"json\": siemplify.parameters.get('JSON{}'.format(i))\n        })\n    ph_separator = siemplify.parameters.get(\"Placeholder Separator\")\n    \n    processed_trios, bad_trios = process_trios(input_trios, ph_separator)\n    \n    for ent in siemplify.target_entities:\n        insight_message_list = []\n        insight_message = u\"\"\n        for trio in processed_trios:\n            trio_message_list = []\n            not_for_tables = []\n            json = extract_json_based_on_entity(ent, trio[\"json\"])\n            if json:\n                for item in trio.get(\"fields\", []):\n                    display = item[\"display\"]\n                    key_path = item[\"key_path\"]\n                    \n                    val = parse_raw_message(json, key_path)#find_key_path_in_json(key_path, json)\n                    new_item = {\"display\": display, \"value\": val}\n                    if display == NOT_FOR_TABLE:\n                        not_for_tables.append(new_item)\n                    else:\n                        trio_message_list.append(new_item)\n                \n                rows_list = [\"\"\"<td><strong>{display}</strong></td><td>{value}</td></tr>\"\"\".format(**trio_message_item) for trio_message_item in trio_message_list]\n                rows = \"\".join(rows_list)\n                \n                trio_message = u\"\"\"<table border=\"1\" width=\"290\"><tbody><tr>{rows}<tr></tbody></table>\"\"\".format(\n                    rows=rows)\n                \n                title_message_list = []\n                not_for_tables_message = []\n                if not_for_tables:\n                    not_for_tables_message = u\"<br>\".join([x[\"value\"] for x in not_for_tables])\n                    title_message_list.append(not_for_tables_message)\n                if trio_message:\n                    title_message_list.append(trio_message)\n                \n                title_message = u\"<br>\".join([x for x in [trio_message, not_for_tables_message] if x])\n                insight_message_list.append(title_message)\n                siemplify.add_entity_insight(ent, title_message, triggered_by=trio[\"title\"])\n            else:\n                insight_message_list.append(\"\"\"<p><span style=\"text-decoration: underline;\">{}</span>:</p>Missing data in JSON for entity\"\"\".format(trio.get(\"title\", \"MISSING TITLE\")))\n        \n        if insight_message_list:\n            insight_message = \"<br><br>\".join(insight_message_list)\n            \n        # if bad_trios:\n        #     insight_message += u\"<br><br>\"\n        #     insight_message += u\"<br><br>\".join([u\"\"\"<p><span style=\"text-decoration: underline;\">{}</span>:</p>JSON Completly missing or badly formatted\"\"\".format(\n        #             trio.get('title')) for trio in bad_trios])\n        # raise Exception(insight_message)\n        # siemplify.add_entity_insight(ent, insight_message)\n        added_insights.append(ent)\n\n    output_message = u\"Insight added to following entities: {}\".format(\",\".join([x.identifier for x in added_insights]))\n\n    siemplify.end(output_message, 'true')\n\n\nif __name__ == '__main__':\n    main()",
  "IntegrationIdentifier": "Insights",
  "ScriptResultName": "ScriptResult",
  "DynamicResultsMetadata": [
    {
      "ResultName": "JsonResult",
      "ResultExample": "{}",
      "ShowResult": true
    }
  ],
  "Creator": "Robert",
  "IsEnabled": true,
  "IsCustom": false,
  "IsSystem": false,
  "Version": 27.0,
  "TimeoutSeconds": 300,
  "Parameters": [
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": null,
      "Description": "The fields that will be extracted from the fourth  JSON string.",
      "Name": "Fields4",
      "Value": null,
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1599658752027,
      "ModificationTimeUnixTimeInMs": 1599658752027
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": null,
      "Description": "The fourth JSON string to be parsed for the insight.",
      "Name": "JSON4",
      "Value": null,
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1599658752027,
      "ModificationTimeUnixTimeInMs": 1599658752027
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": null,
      "Description": "The title used for the fifth entity section.",
      "Name": "Title5",
      "Value": null,
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1599658752027,
      "ModificationTimeUnixTimeInMs": 1599658752027
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": null,
      "Description": "The fields that will be extracted from the fifth JSON string.",
      "Name": "Fields5",
      "Value": null,
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1599658752027,
      "ModificationTimeUnixTimeInMs": 1599658752027
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": null,
      "Description": "The fifth JSON string to be parsed for the insight.",
      "Name": "JSON5",
      "Value": null,
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1599658752027,
      "ModificationTimeUnixTimeInMs": 1599658752027
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": ",",
      "Description": "A string that will be used to \"break\" lines.",
      "Name": "Placeholder Separator",
      "Value": ",",
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1599658752027,
      "ModificationTimeUnixTimeInMs": 1599658752027
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": null,
      "Description": "The title used for the first entity section.",
      "Name": "Title1",
      "Value": null,
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1599658752027,
      "ModificationTimeUnixTimeInMs": 1599658752027
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": null,
      "Description": "The fields that will be extracted from the first JSON string.",
      "Name": "Fields1",
      "Value": null,
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1599658752027,
      "ModificationTimeUnixTimeInMs": 1599658752027
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": null,
      "Description": "The first JSON string to be parsed for the insight.",
      "Name": "JSON1",
      "Value": null,
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1599658752027,
      "ModificationTimeUnixTimeInMs": 1599658752027
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": null,
      "Description": "The title used for the second entity section.",
      "Name": "Title2",
      "Value": null,
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1599658752027,
      "ModificationTimeUnixTimeInMs": 1599658752027
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": null,
      "Description": "The fields that will be extracted from the second JSON string.",
      "Name": "Fields2",
      "Value": null,
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1599658752027,
      "ModificationTimeUnixTimeInMs": 1599658752027
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": null,
      "Description": "The second  JSON string to be parsed for the insight.",
      "Name": "JSON2",
      "Value": null,
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1599658752027,
      "ModificationTimeUnixTimeInMs": 1599658752027
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": null,
      "Description": "The title used for the third entity section.",
      "Name": "Title3",
      "Value": null,
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1599658752027,
      "ModificationTimeUnixTimeInMs": 1599658752027
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": null,
      "Description": "The fields that will be extracted from the third JSON string.",
      "Name": "Fields3",
      "Value": null,
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1599658752027,
      "ModificationTimeUnixTimeInMs": 1599658752027
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": null,
      "Description": "The third JSON string to be parsed for the insight.",
      "Name": "JSON3",
      "Value": null,
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1599658752027,
      "ModificationTimeUnixTimeInMs": 1599658752027
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": null,
      "Description": "The title used for the fourth entity section.",
      "Name": "Title4",
      "Value": null,
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1599658752027,
      "ModificationTimeUnixTimeInMs": 1599658752027
    }
  ],
  "DefaultResultValue": "",
  "PythonVersion": "None",
  "Id": 0,
  "CreationTimeUnixTimeInMs": 1599658752022,
  "ModificationTimeUnixTimeInMs": 1599658752022
}