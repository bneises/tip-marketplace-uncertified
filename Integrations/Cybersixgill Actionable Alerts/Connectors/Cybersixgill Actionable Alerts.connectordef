{
  "IsEnabled": true,
  "IsCustom": false,
  "Integration": "Cybersixgill Actionable Alerts",
  "DocumentationLink": null,
  "Name": "Cybersixgill Actionable Alerts",
  "Description": "",
  "Creator": "Admin",
  "Script": "import datetime\nimport json\nimport sys\nimport traceback\nfrom datetime import datetime, timedelta\n\nfrom SiemplifyConnectors import SiemplifyConnectorExecution\nfrom SiemplifyConnectorsDataModel import AlertInfo\nfrom SiemplifyUtils import output_handler, unix_now\n\nfrom sixgill.sixgill_actionable_alert_client import SixgillActionableAlertClient\n\nCONNECTOR_NAME = \"Cybersixgill Actionable Alerts\"\nVENDOR = \"Cybersixgill\"\nPRODUCT = \"Cybersixgill Actionable Alerts\"\nRULE_GENERATOR_EXAMPLE = \"Cybersixgill Actionable Alerts\"\nSIXGILL_CHANNEL_ID = \"1f4fdd520d3a721799fc0d044283d364\"\nAlerts_Time_Format = \"%Y-%m-%d %H-%M-%S\"\n\nsiemplify = SiemplifyConnectorExecution()\nsiemplify.script_name = CONNECTOR_NAME\n\n\ndef fetch_alert(alert_data, sixgill_client, org_id):\n    \"\"\"Returns an alert, which is an aggregation of basic events.\n    (ie: Arcsight's correlation, QRadar's Offense)\"\"\"\n    alert_info = AlertInfo()\n    alert_info.display_id = alert_data.get(\"id\")\n    alert_info.ticket_id = alert_data.get(\"id\")\n    alert_info.name = alert_data.get(\"title\")\n    alert_info.rule_generator = RULE_GENERATOR_EXAMPLE\n    alert_info.start_time = unix_now()\n    alert_info.end_time = unix_now()\n    if alert_data.get(\"threat_level\") == \"imminent\":\n        priority = 100\n    else:\n        priority = 80\n    alert_info.priority = priority  # Informative = -1,Low = 40,Medium = 60,High = 80,Critical = 100.\n    alert_info.device_vendor = VENDOR\n    alert_info.device_product = PRODUCT\n    alert_event = fetch_event(alert_data, sixgill_client, org_id)\n    alert_info.events.append(alert_event)\n    return alert_info\n\n\ndef fetch_event(alert_data, sixgill_client, org_id):\n    global created_time_last_alert\n    event = {}\n    alert_id = alert_data.get(\"id\")\n    portal_url = f\"https://portal.cybersixgill.com/#/?actionable_alert={alert_id}\"\n    alerts_info = sixgill_client.get_actionable_alert(alert_id, organization_id=org_id)\n    additional_info = alerts_info.get(\"additional_info\", {})\n    event[\"Alert_RawJson\"] = json.dumps(alerts_info)\n    event[\"StartTime\"] = unix_now()\n    event[\"EndTime\"] = unix_now()\n    event[\"device_product\"] = PRODUCT\n    event[\"Alert_Name\"] = alert_data.get('title')\n    event[\"Alert_Id\"] = alert_id\n    event[\"Portal_URL\"] = portal_url\n    event[\"Description\"] = alerts_info.get('description')\n    event[\"Content\"] = alerts_info.get('content')\n    event[\"Create_Time\"] = alerts_info.get('create_time')\n    created_time_last_alert = alerts_info.get('create_time')\n    attributes = additional_info.get(\"asset_attributes\", [])\n    attributes = \", \".join(attributes)\n    if attributes:\n        event[\"Attributes\"] = attributes\n    event[\"Threat_Level\"] = alerts_info.get('threat_level', 'Unknown')\n    threats = additional_info.get(\"threats\", [])\n    threats = \", \".join(threats)\n    if threats:\n        event[\"Threat_Type\"] = threats\n    event[\"Assessment\"] = alerts_info.get('assessment', None)\n    recommendations = additional_info.get(\"recommendations\", [])\n    recommendations = \", \".join(recommendations)\n    if recommendations:\n        event[\"Recommendations\"] = recommendations\n    alert_description = (\"<html><head><style>table, th, td {border: 1px solid black;border-collapse:\"\n                         \"collapse;}</style></head><body><h2>Sub Alerts</h2></body></html>\")\n    event[\"Sub_Alerts\"] = alert_description\n    sub_alerts = alert_data.get(\"sub_alerts\", [])\n    if sub_alerts:\n        for sub in sub_alerts:\n            alert_description += (\n                f\"<html><table style='width:100%'><tr><td>Aggregate Alert ID</td>\"\n                f\"<td>{sub.get('aggregate_alert_id')}</td></tr>\"\n                f\"<tr><td>Content</td><td>{sub.get('content')}</td></tr>\"\n                f\"<tr><td>Date</td><td>{sub.get('date')}</td></tr>\"\n                f\"<tr><td>Matched Assets</td><td>{sub.get('matched_assets')}</td></tr>\"\n                f\"<tr><td>Site</td><td>{sub.get('site')}</td></tr></table><br></html>\")\n        event[\"Sub_Alerts\"] = alert_description\n    if 'cve_id' in additional_info:\n        cve_portal = f'https://portal.cybersixgill.com/#/cve/{additional_info.get(\"cve_id\", \"\")}'\n        cvss_3 = additional_info.get(\"nvd\", {}).get(\"v3\", {}).get(\"current\")\n        cvss_2 = additional_info.get(\"nvd\", {}).get(\"v2\", {}).get(\"current\")\n        dve_score = additional_info.get(\"score\", {}).get(\"current\")\n        event[\"CVE_Portal_URL\"] = cve_portal\n        event[\"CVSS_3_1\"] = cvss_3\n        event[\"CVSS_2_0\"] = cvss_2\n        event[\"DVE_Score\"] = dve_score\n        event[\"CVE_ID\"] = additional_info.get(\"cve_id\")\n        attributes = []\n        attributes_dict = {}\n        for att in additional_info.get(\"attributes\"):\n            if att.get(\"value\"):\n                attributes_dict[\"Name\"] = att.get(\"name\")\n                attributes_dict[\"Description\"] = att.get(\"description\")\n                attributes.append(attributes_dict)\n        event[\"CVE_Attributes\"] = json.dumps({\"CVE_Attributes\": attributes})\n    return event\n\n\ndef create_sixgill_client_obj(client_id, client_secret, channel_id):\n    \"\"\"This create a sixgill client object\n    Returns:\n        sixgill.sixgill_feed_client.SixgillFeedClient -- Sixgill Client object\n    \"\"\"\n    try:\n        sixgill_alerts_client = SixgillActionableAlertClient(client_id, client_secret, channel_id,\n                                                             logger=siemplify.LOGGER, verify=True)\n        return sixgill_alerts_client\n    except Exception as err:\n        siemplify.LOGGER.error(\"create_sixgill_client_obj - Error - \" + str(err))\n        siemplify.LOGGER.info(traceback.format_exc())\n\n\ndef query_sixgill(sixgill_alerts_client, limit_size, from_date, to_date, threat_level, threat_type, org_id):\n    try:\n        if threat_type:\n            threat_types_list = threat_type.split(\",\")\n        else:\n            threat_types_list = None\n        if not threat_level:\n            threat_level = None\n        alerts_list = sixgill_alerts_client.get_actionable_alerts_bulk(from_date=from_date, to_date=to_date,\n                                                                       limit=limit_size, threat_level=threat_level,\n                                                                       threat_type=threat_types_list, sort_order=\"asc\",\n                                                                       organization_id=org_id)\n        return alerts_list\n    except Exception as err:\n        siemplify.LOGGER.error(err)\n        siemplify.LOGGER.error(traceback.format_exc())\n\n\ndef datetime_params(siemplify):\n    try:\n        current_time = datetime.now()\n        fetch_time = siemplify.fetch_timestamp(datetime_format=True, timezone=False)\n        fetch_str = datetime.strftime(fetch_time, Alerts_Time_Format)\n        fetch_stamp = datetime.strptime(fetch_str, Alerts_Time_Format)\n        if fetch_stamp.year == 1970:\n            days_back = siemplify.extract_connector_param(\"Days Back On First Run \", default_value=30, input_type=int)\n            from_datetime = current_time\n            str_from_date = from_datetime.strftime(Alerts_Time_Format)\n            str_from_date = datetime.strptime(str_from_date, Alerts_Time_Format)\n            from_time = str_from_date - timedelta(days=days_back)\n        else:\n            from_time = fetch_stamp\n        to_time = current_time\n        str_to_date = to_time.strftime(Alerts_Time_Format)\n        to_time = datetime.strptime(str_to_date, Alerts_Time_Format)\n        return from_time, to_time\n    except Exception as err:\n        siemplify.LOGGER.error(err)\n        siemplify.LOGGER.error(traceback.format_exc())\n\n\n@output_handler\ndef main(is_test_run):\n    alerts = []\n    if is_test_run:\n        siemplify.LOGGER.info(\"***** This is an \\\"IDE Play Button\\\"\\\\\\\"Run Connector once\\\" test run ******\")\n\n    siemplify.LOGGER.info(\"==================== Main - Param Init ====================\")\n    client_id = siemplify.extract_connector_param(\"Client Id\", default_value=None, input_type=str, is_mandatory=True)\n    client_secret = siemplify.extract_connector_param(\"Client Secret\", default_value=None, input_type=str,\n                                                      is_mandatory=True)\n    limit_size = siemplify.extract_connector_param(\"Alerts Limit\", default_value=None, input_type=int,\n                                                   is_mandatory=True)\n    threat_level = siemplify.extract_connector_param(\"Threat Level\", default_value=None, input_type=str)\n    threat_type = siemplify.extract_connector_param(\"Threat Type\", default_value=None, input_type=str)\n    org_id = siemplify.extract_connector_param(\"Organization id\", default_value=None, input_type=str)\n    siemplify.LOGGER.info(\"------------------- Main - Started -------------------\")\n    sixgill_client = create_sixgill_client_obj(client_id, client_secret, SIXGILL_CHANNEL_ID)\n    from_date, to_date = datetime_params(siemplify)\n    records = query_sixgill(sixgill_client, limit_size, from_date, to_date, threat_level, threat_type, org_id)\n    siemplify.LOGGER.info(\"True\")\n    if records:\n        for rec in records:\n            try:\n                alert_data = fetch_alert(rec, sixgill_client, org_id)\n                if alert_data:\n                    alerts.append(alert_data)\n            except Exception as e:\n                siemplify.LOGGER.exception(e)\n        last_alert_time = datetime.strptime(created_time_last_alert, \"%Y-%m-%d %H:%M:%S\")\n        siemplify.save_timestamp(datetime_format=True, timezone=False, new_timestamp=last_alert_time)\n    siemplify.LOGGER.info(\"------------------- Main - Finished -------------------\")\n    siemplify.return_package(alerts)\n\n\nif __name__ == \"__main__\":\n    is_test_run = not (len(sys.argv) < 2 or sys.argv[1] == 'True')\n    main(is_test_run)\n",
  "Version": 51,
  "MappingRules": [],
  "ProductToVisualFamilyRecords": [],
  "SimulationUseCases": {
    "CasesForUseCase": [],
    "UseCaseName": null
  },
  "Parameters": [
    {
      "ConnectorDefinitionId": 40,
      "IsMandatory": true,
      "DefaultValue": "50",
      "Name": "Alerts Limit",
      "Type": 1,
      "Mode": 2,
      "Description": "number of alerts",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1675932542967,
      "ModificationTimeUnixTimeInMs": 1675932542967
    },
    {
      "ConnectorDefinitionId": 40,
      "IsMandatory": true,
      "DefaultValue": "clientid",
      "Name": "Client Id",
      "Type": 3,
      "Mode": 2,
      "Description": "Client Id",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1675932542967,
      "ModificationTimeUnixTimeInMs": 1675932542967
    },
    {
      "ConnectorDefinitionId": 40,
      "IsMandatory": true,
      "DefaultValue": "secretkey",
      "Name": "Client Secret",
      "Type": 3,
      "Mode": 2,
      "Description": "Client Secret",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1675932542967,
      "ModificationTimeUnixTimeInMs": 1675932542967
    },
    {
      "ConnectorDefinitionId": 40,
      "IsMandatory": true,
      "DefaultValue": "Cybersixgill Actionable Alerts",
      "Name": "DeviceProductField",
      "Type": 2,
      "Mode": 0,
      "Description": "The field name used to determine the device product",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1675932542967,
      "ModificationTimeUnixTimeInMs": 1675932542967
    },
    {
      "ConnectorDefinitionId": 40,
      "IsMandatory": true,
      "DefaultValue": "Cybersixgill Actionable Alerts",
      "Name": "EventClassId",
      "Type": 2,
      "Mode": 0,
      "Description": "The field name used to determine the event name (sub-type)",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1675932542967,
      "ModificationTimeUnixTimeInMs": 1675932542967
    },
    {
      "ConnectorDefinitionId": 40,
      "IsMandatory": false,
      "DefaultValue": null,
      "Name": "Organization id",
      "Type": 2,
      "Mode": 2,
      "Description": "Org Id",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1675932542967,
      "ModificationTimeUnixTimeInMs": 1675932542967
    },
    {
      "ConnectorDefinitionId": 40,
      "IsMandatory": true,
      "DefaultValue": "30",
      "Name": "PythonProcessTimeout",
      "Type": 2,
      "Mode": 0,
      "Description": "The timeout limit (in seconds) for the python process running current script",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1675932542967,
      "ModificationTimeUnixTimeInMs": 1675932542967
    },
    {
      "ConnectorDefinitionId": 40,
      "IsMandatory": false,
      "DefaultValue": null,
      "Name": "Threat Level",
      "Type": 2,
      "Mode": 2,
      "Description": "level of threat",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1675932542967,
      "ModificationTimeUnixTimeInMs": 1675932542967
    },
    {
      "ConnectorDefinitionId": 40,
      "IsMandatory": false,
      "DefaultValue": null,
      "Name": "Threat Type",
      "Type": 2,
      "Mode": 2,
      "Description": "type of threat",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1675932542967,
      "ModificationTimeUnixTimeInMs": 1675932542967
    }
  ],
  "Rules": [],
  "IsConnectorRulesSupported": true,
  "IsSystem": false,
  "PythonVersion": "None",
  "Id": 0,
  "CreationTimeUnixTimeInMs": 1671470345440,
  "ModificationTimeUnixTimeInMs": 1675932542953
}
