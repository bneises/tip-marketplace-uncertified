{
  "IsEnabled": true,
  "IsCustom": false,
  "Integration": "Luminar IOCs and Leaked Credentials",
  "DocumentationLink": null,
  "Name": "Luminar IOCs and Leaked Credentials  Connector",
  "Description": "",
  "Creator": "Admin",
  "Script": "\"\"\" Luminar IOCs and Leaked Credentials Connector:\n To fetch Luminar IOCs and Leaked Credentials from Luminar API and to store into the\nSiemplify platform. \"\"\"\n\nfrom functools import partial\nfrom datetime import datetime\nfrom itertools import groupby\nimport uuid\nimport sys\nimport requests\nfrom SiemplifyConnectors import SiemplifyConnectorExecution\nfrom SiemplifyConnectorsDataModel import AlertInfo\nfrom SiemplifyUtils import unix_now, output_handler\nfrom LuminarManager import (\n    LuminarManager,\n    enrich_incident_items,\n    enrich_malware_items,\n    generic_item_finder,\n    slice_list_to_max_sub_lists,\n)\n\nCONNECTOR_NAME = \"Luminar IOCs and Leaked Credentials\"\nVENDOR = \"Cognyte\"\nPRODUCT = \"Luminar IOCs and Leaked Credentials\"\nRULE_GENERATOR = \"Luminar IOCs and Leaked Credentials\"\nsiemplify = SiemplifyConnectorExecution()  # Siemplify main SDK wrapper\nsiemplify.script_name = CONNECTOR_NAME\nINDICATOR_MAPPING = {\n    \"DIR\": \"FileName\",\n    \"MAC\": \"Mac Address\",\n    \"DOMAIN\": \"Domain\",\n    \"EMAIL\": \"Email Address\",\n    \"URL\": \"URL\",\n    \"IP\": \"IP Address\",\n    \"SHA512\": \"FileHash\",\n    \"SHA256\": \"FileHash\",\n    \"MD5\": \"FileHash\",\n    \"SHA1\": \"FileHash\",\n    \"File_Extension\": \"FileName\",\n    \"File_Size\": \"FileName\",\n}\nTIMEOUT = 60.0\nMAX_IOCS_PER_MALWARE_CASE_EVENT = 500\n\n\n@output_handler\ndef main(is_test_run):\n    alerts = []  # The main output of each connector run\n\n    if is_test_run:\n        siemplify.LOGGER.info(\n            '***** This is an \"IDE Play Button\"\\\\\"Run Connector once\" test run ******'\n        )\n    siemplify.LOGGER.info(\"==================== Main - Param Init ====================\")\n    account_id = siemplify.extract_connector_param(\n        \"Luminar API Account ID\",\n        default_value=None,\n        input_type=str,\n        is_mandatory=True,\n        print_value=False,\n    )\n    client_id = siemplify.extract_connector_param(\n        \"Luminar API Client ID\",\n        default_value=None,\n        input_type=str,\n        is_mandatory=True,\n        print_value=False,\n    )\n    client_secret = siemplify.extract_connector_param(\n        \"Luminar API Client Secret\",\n        default_value=None,\n        input_type=str,\n        is_mandatory=True,\n        print_value=False,\n    )\n\n    base_url = siemplify.extract_connector_param(\n        \"Luminar Base URL\",\n        default_value=None,\n        input_type=str,\n        is_mandatory=True,\n        print_value=False,\n    )\n\n    def luminar_api_test_connectivity():\n        \"\"\"Test connection with Siemplify Luminar server\"\"\"\n\n        return LuminarManager(\n            siemplify, client_id, client_secret, account_id, base_url\n        ).test_connectivity()\n\n    def luminar_access_token():\n        \"\"\"Get Luminar access token\n            :return: {str} access token\"\"\"\n        access_token = LuminarManager(\n            siemplify, client_id, client_secret, account_id, base_url\n        ).get_access_token()\n        return access_token\n\n    siemplify.LOGGER.info(\"------------------- Main - Started -------------------\")\n    try:\n        time_stamp = siemplify.fetch_timestamp(datetime_format=False)\n        if time_stamp:\n            time_stamp = int(time_stamp / 1000)\n        else:\n            time_stamp = 0\n        params = {\"limit\": 100, \"offset\": 0, \"timestamp\": time_stamp}\n        if is_test_run:\n            # only 3 alerts will be created if test run\n            params = {\"limit\": 3, \"offset\": 0, \"timestamp\": 0}\n        # while loop will iterate until getting all data\n        while True:\n            return_value, _, _ = luminar_api_test_connectivity()\n            if (\n                    not (account_id and client_id and client_secret and base_url)\n                    or not return_value\n            ):\n                siemplify.LOGGER.info(\n                    \"Please enter Luminar API Credentials and try again.\"\n                )\n                break\n            else:\n                if not luminar_access_token():\n                    siemplify.LOGGER.info(\n                        \"Please check Luminar API Credentials, unable to get valid access token from Luminar Server.\"\n                    )\n                    break\n                response = requests.get(\n                    base_url + \"/externalApi/stix\",\n                    params=params,\n                    headers={\"Authorization\": f\"Bearer {luminar_access_token()}\"}, timeout=TIMEOUT\n                )\n                # getting Luminar data page wise\n                if \"offset\" in params:\n                    params[\"offset\"] = params[\"offset\"] + params[\"limit\"]\n\n                response_json = response.json()\n\n                all_objects = response_json.get(\"objects\", [])\n                if is_test_run:\n                    luminar_api_fetch(all_objects, alerts)\n                    break\n\n                if not all_objects or len(all_objects) == 1:\n                    siemplify.save_timestamp(new_timestamp=unix_now())\n                    break\n                else:\n                    luminar_api_fetch(all_objects, alerts)\n\n    except Exception as err:\n        siemplify.LOGGER.error(\"Got exception on main handler. Error: {}\".format(err))\n        siemplify.LOGGER.exception(err)\n    siemplify.LOGGER.info('------------------- Main - Finished -------------------')\n    siemplify.return_package(alerts)\n\n\ndef luminar_iocs(parent, children, alerts):\n    \"\"\"\n    Enriched unique IOCs sliced into sublist will have max size of 499\n    :param parent: {dict} malware dict\n    :param children: {dict} indicator dict\n    :param alerts: {[]} Enriched unique IOCs appending to the alerts\n    \"\"\"\n    try:\n        parent, modified_childrens = enrich_malware_items(parent, children)\n        # Slicing IOCs to sublist\n        for ioc_chunks in list(\n                slice_list_to_max_sub_lists(\n                    # filtering unique leaked records based on indicator_value\n                    list(\n                        {\n                            item[\"indicator_value\"]: item for item in modified_childrens if item.get('indicator_value')\n                        }.values()\n                    ),\n                    MAX_IOCS_PER_MALWARE_CASE_EVENT - 1,\n                )\n        ):\n\n            if fetch_alert_ioc(siemplify, ioc_chunks, parent[\"name\"], \"Malware_Family\"):\n                # fetching alerts\n                alerts.append(\n                    fetch_alert_ioc(\n                        siemplify, ioc_chunks, parent[\"name\"], \"Malware_Family\"\n                    )\n                )\n    except Exception as err:\n        siemplify.LOGGER.error(\"Got exception on luminar_iocs. Error: {}\".format(err))\n        siemplify.LOGGER.exception(err)\n\n\ndef luminar_leaked(parent, children, alerts):\n    \"\"\"\n    Enriched unique incidents sliced into sublist will have max size of 499\n    :param parent: {dict} incident dict\n    :param children: {dict} user account dict\n    :param alerts: {[]} Enriched unique incident appending to the alerts\n    \"\"\"\n    try:\n        parent, modified_childrens = enrich_incident_items(parent, children)\n        # Slicing leaked records to sublist\n        for ioc_chunks in list(\n                slice_list_to_max_sub_lists(\n                    # filtering unique leaked records based on display_name\n                    list(\n                        {item[\"display_name\"]: item for item in modified_childrens}.values()\n                    ),\n                    MAX_IOCS_PER_MALWARE_CASE_EVENT - 1,\n                )\n        ):\n\n            if fetch_alert_leaked_credentials(\n                    siemplify, ioc_chunks, parent.get(\"name\"), \"Incident_Name\"\n            ):\n                alerts.append(\n                    # fetching alerts\n                    fetch_alert_leaked_credentials(\n                        siemplify, ioc_chunks, parent.get(\"name\"), \"Incident_Name\"\n                    )\n                )\n    except Exception as err:\n        siemplify.LOGGER.error(\"Got exception on luminar_leaked. Error: {}\".format(err))\n        siemplify.LOGGER.exception(err)\n\n\ndef luminar_expiration_iocs(all_objects, alerts):\n    \"\"\"\n    Enriched unique IOCs sliced into sublist will have max size of 499.\n    grouped the IOCs based on the expiration date.\n    :param all_objects: {[]} all object is a list which contain all dict like malware,incident,incidents\n    :param alerts: {[]} Enriched unique incident appending to the alerts\n    \"\"\"\n    try:\n        # Fetching only IOCs which has an expiration date and expiration date greater than or equal to the current date.\n        _, exp_iocs = enrich_malware_items(\n            {},\n            list(\n                filter(\n                    lambda x: x.get(\"type\") == \"indicator\"\n                    if x.get(\"valid_until\") and datetime.strptime((x.get(\"valid_until\"))[:19],\n                                                                  \"%Y-%m-%dT%H:%M:%S\", ) >= datetime.today()\n                    else None,\n                    all_objects,\n                )\n            ),\n        )\n        # Grouping IOCs based on an expiration date\n        if exp_iocs:\n            for date, exp_iocs_datewise in groupby(\n                    sorted(\n                        list({item[\"indicator_value\"]: item for item in exp_iocs}.values()),\n                        key=lambda d: d[\"valid_until\"],\n                    ),\n                    lambda x: datetime.strptime(\n                        (x.get(\"valid_until\"))[:10],\n                        \"%Y-%m-%d\",\n                    ),\n            ):\n                # Slicing IOCs to sublist\n                for iocs in list(slice_list_to_max_sub_lists(list(exp_iocs_datewise), MAX_IOCS_PER_MALWARE_CASE_EVENT - 1)):\n\n                    if fetch_alert_ioc(\n                            siemplify, iocs, date.strftime(\"%Y-%m-%d\"), \"Expiration_Date\"\n                    ):\n                        alerts.append(\n                            # fetching alerts\n                            fetch_alert_ioc(\n                                siemplify,\n                                iocs,\n                                date.strftime(\"%Y-%m-%d\"),\n                                \"Expiration_Date\",\n                            )\n                        )\n\n    except Exception as err:\n        siemplify.LOGGER.error(\"Got exception on luminar_expiration_iocs. Error: {}\".format(err))\n        siemplify.LOGGER.exception(err)\n\n\ndef luminar_api_fetch(all_objects, alerts):\n    \"\"\"\n    Segregating IOCs or Leaked Credentials List based on Malware/Incident.\n    :param all_objects: {[]} all object is a list which contain all dict like malware,incident,incidents\n    :param alerts: {[]} list to append IOCs/Incident data\n    \"\"\"\n\n    try:\n        get_item_by_id = partial(generic_item_finder, all_objects)\n        luminar_expiration_iocs(all_objects, alerts)\n        relationships = {}\n        # Filtering relationship dict from all objects\n        for relationship in filter(\n                lambda x: x.get(\"type\") == \"relationship\", all_objects\n        ):\n            relationship_items = relationships.get(relationship.get(\"target_ref\"), [])\n\n            relationship_items.append(relationship.get(\"source_ref\"))\n\n            relationships[relationship[\"target_ref\"]] = relationship_items\n\n        for key, group in relationships.items():\n            parent = next(get_item_by_id(key), None)\n            children = list(\n                filter(\n                    None,\n                    [next(get_item_by_id(item_id), None) for item_id in group],\n                )\n            )\n            if parent and parent.get(\"type\") == \"malware\":\n                luminar_iocs(parent, children, alerts)\n            elif parent and parent.get(\"type\") == \"incident\":\n                luminar_leaked(parent, children, alerts)\n    except Exception as err:\n        siemplify.LOGGER.error(\"Got exception on luminar_api_fetch. Error: {}\".format(err))\n        siemplify.LOGGER.exception(err)\n\n\ndef fetch_alert_leaked_credentials(siemplify, alert, name, name_type):\n    \"\"\"Returns an alert, which is an aggregation of Leaked Credentials events.\"\"\"\n    try:\n        alert_info = AlertInfo()\n        alert_info.display_id = str(uuid.uuid4())\n        alert_info.ticket_id = str(uuid.uuid4())\n        alert_info.rule_generator = RULE_GENERATOR\n        alert_info.start_time = unix_now()\n        alert_info.end_time = unix_now()\n        alert_info.name = name + \"  \" + name_type\n        alert_info.priority = 100\n        alert_info.device_vendor = VENDOR\n        alert_info.device_product = PRODUCT\n        alert_info.environment = siemplify.context.connector_info.environment\n        for events in alert:\n            try:\n                event_info = fetch_event_leaked_credentials(events)\n                if event_info:\n                    alert_info.events.append(event_info)\n            except Exception as err:\n                siemplify.LOGGER.error(\"Got exception on alert_id. Error: {}\".format(err))\n                siemplify.LOGGER.exception(err)\n        siemplify.LOGGER.info('Alert {} was created.'.format(alert_info.ticket_id))\n        return alert_info\n    except Exception as err:\n        siemplify.LOGGER.error(\"Got exception on fetch_alert_leaked_credentials. Error: {}\".format(err))\n        siemplify.LOGGER.exception(err)\n\n\ndef fetch_event_leaked_credentials(events):\n    \"\"\"Returns an event, which is an aggregation of Leaked Credentials details.\"\"\"\n    event = {}\n    event[\"StartTime\"] = unix_now()\n    event[\"EndTime\"] = unix_now()\n    event[\"luminar_case_name\"] = \"Luminar Leaked Credentials\"\n    event[\"name\"] = events.get(\"display_name\")\n    event[\"device_product\"] = PRODUCT\n    event[\"event_type\"] = \"Leaked \" + events.get(\"display_name\")\n    event[\"display_name\"] = events.get(\"display_name\")\n    event[\"credentials\"] = events.get(\"credential\")\n    event[\"incident_creation_date\"] = events.get(\"created\")\n    event[\"incident_modified_date\"] = events.get(\"modified\")\n    event[\"incident_description\"] = (\n        events.get(\"description\") if events.get(\"description\") else \"\"\n    )\n    event[\"account_login\"] = events.get(\"account_login\")\n    event[\"incident_name\"] = events.get(\"name\")\n    return event\n\n\ndef fetch_alert_ioc(siemplify, alert, name, name_type):\n    \"\"\"Returns an alert, which is an aggregation of IOCs.\"\"\"\n    alert_info = AlertInfo()\n    alert_info.display_id = str(uuid.uuid4())\n    alert_info.ticket_id = str(uuid.uuid4())\n    alert_info.name = name + \"  \" + name_type\n    alert_info.rule_generator = RULE_GENERATOR\n    alert_info.start_time = unix_now()\n    alert_info.end_time = unix_now()\n    alert_info.priority = 100\n    alert_info.device_vendor = VENDOR\n    alert_info.device_product = PRODUCT\n    alert_info.environment = siemplify.context.connector_info.environment\n    if alert:\n        for events in alert:\n            try:\n                if events.get(\"indicator_type\"):\n                    event_info = fetch_event_ioc(\n                        events\n                    )\n                    if event_info:\n                        alert_info.events.append(event_info)\n            except Exception as err:\n                siemplify.LOGGER.error(\"Got exception on fetch_alert_ioc. Error: {}\".format(err))\n                siemplify.LOGGER.exception(err)\n    siemplify.LOGGER.info('Alert {} was created.'.format(alert_info.ticket_id))\n    return alert_info\n\n\ndef fetch_event_ioc(events):\n    \"\"\"Returns an event, which is an aggregation of Leaked Credentials details.\"\"\"\n    event = {}\n    event[\"indicator_expiration_date\"] = events.get(\"valid_until\", \"\")\n    event[\"StartTime\"] = unix_now()\n    event[\"EndTime\"] = unix_now()\n    event[\"luminar_case_name\"] = \"Luminar IOCs\"\n    event[\"device_product\"] = PRODUCT\n    malware_details = events.get(\"malware_details\")\n    event[\"indicator_type\"] = events.get(\"indicator_type\")\n    if events.get(\"indicator_type\") in INDICATOR_MAPPING:\n        event[INDICATOR_MAPPING[events.get(\"indicator_type\")]] = events.get(\n            \"indicator_value\"\n        )\n    event[\"name\"] = events.get(\"indicator_value\")\n    event[\"event_type\"] = \"Malicious \" + events.get(\"indicator_type\")\n    event[\"malware_types\"] = (\n        \",\".join(malware_details.get(\"malwareTypes\"))\n        if malware_details.get(\"malwareTypes\")\n        else \"\"\n    )\n    event[\"malware_family\"] = (\n        malware_details.get(\"name\") if malware_details.get(\"name\") else \"\"\n    )\n    event[\"indicator_created_date\"] = events.get(\"created\")\n    event[\"indicator_value\"] = events.get(\"indicator_value\")\n    event[\"malware_created_date\"] = (\n        malware_details.get(\"created\") if malware_details else \"\"\n    )\n    event[\"malware_modified_date\"] = (\n        malware_details.get(\"modified\") if malware_details else \"\"\n    )\n    return event\n\n\nif __name__ == \"__main__\":\n    # Connectors are run in iterations. The interval is configurable from the ConnectorsScreen UI.\n    is_test_run = not (len(sys.argv) < 2 or sys.argv[1] == \"True\")\n    main(is_test_run)",
  "Version": 269,
  "MappingRules": [],
  "ProductToVisualFamilyRecords": [],
  "SimulationUseCases": {
    "CasesForUseCase": [],
    "UseCaseName": null
  },
  "Parameters": [
    {
      "ConnectorDefinitionId": 26,
      "IsMandatory": true,
      "IsAdvanced": false,
      "DefaultValue": "device_product",
      "Name": "DeviceProductField",
      "Type": 2,
      "Mode": 0,
      "Description": "The field name used to determine the device product"
    },
    {
      "ConnectorDefinitionId": 26,
      "IsMandatory": true,
      "IsAdvanced": false,
      "DefaultValue": "event_type",
      "Name": "EventClassId",
      "Type": 2,
      "Mode": 0,
      "Description": "The field name used to determine the event name (sub-type)"
    },
    {
      "ConnectorDefinitionId": 26,
      "IsMandatory": true,
      "IsAdvanced": false,
      "DefaultValue": "None",
      "Name": "Luminar API Account ID",
      "Type": 3,
      "Mode": 2,
      "Description": "Please enter valid Luminar API Account ID"
    },
    {
      "ConnectorDefinitionId": 26,
      "IsMandatory": true,
      "IsAdvanced": false,
      "DefaultValue": "None",
      "Name": "Luminar API Client ID",
      "Type": 3,
      "Mode": 2,
      "Description": "Please enter valid Luminar API Client ID"
    },
    {
      "ConnectorDefinitionId": 26,
      "IsMandatory": true,
      "IsAdvanced": false,
      "DefaultValue": "None",
      "Name": "Luminar API Client Secret",
      "Type": 3,
      "Mode": 2,
      "Description": "Please enter valid Luminar API Client Secret"
    },
    {
      "ConnectorDefinitionId": 26,
      "IsMandatory": true,
      "IsAdvanced": false,
      "DefaultValue": "https://demo.cyberluminar.com",
      "Name": "Luminar Base URL",
      "Type": 2,
      "Mode": 2,
      "Description": "Please enter valid Luminar Base URL"
    },
    {
      "ConnectorDefinitionId": 26,
      "IsMandatory": false,
      "IsAdvanced": true,
      "DefaultValue": null,
      "Name": "Proxy Password",
      "Type": 3,
      "Mode": 2,
      "Description": "Please enter valid proxy server Password"
    },
    {
      "ConnectorDefinitionId": 26,
      "IsMandatory": false,
      "IsAdvanced": true,
      "DefaultValue": null,
      "Name": "Proxy Port",
      "Type": 1,
      "Mode": 2,
      "Description": "Please enter valid Proxy port"
    },
    {
      "ConnectorDefinitionId": 26,
      "IsMandatory": false,
      "IsAdvanced": true,
      "DefaultValue": null,
      "Name": "Proxy Server Address",
      "Type": 2,
      "Mode": 2,
      "Description": "Please enter valid proxy server details"
    },
    {
      "ConnectorDefinitionId": 26,
      "IsMandatory": false,
      "IsAdvanced": true,
      "DefaultValue": null,
      "Name": "Proxy Username ",
      "Type": 2,
      "Mode": 2,
      "Description": "Please enter valid Proxy Username "
    },
    {
      "ConnectorDefinitionId": 26,
      "IsMandatory": true,
      "IsAdvanced": false,
      "DefaultValue": "930",
      "Name": "PythonProcessTimeout",
      "Type": 2,
      "Mode": 0,
      "Description": "The timeout limit (in seconds) for the python process running current script"
    },
    {
      "ConnectorDefinitionId": 26,
      "IsMandatory": false,
      "IsAdvanced": true,
      "DefaultValue": "false",
      "Name": "Verify SSL ",
      "Type": 0,
      "Mode": 2,
      "Description": "Please select SSL "
    }
  ],
  "Rules": [],
  "IsConnectorRulesSupported": true,
  "IsSystem": false,
  "PythonVersion": "None"
}