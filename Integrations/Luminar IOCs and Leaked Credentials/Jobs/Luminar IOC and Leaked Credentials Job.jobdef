{
  "Name": "Luminar IOC and Leaked Credentials Job",
  "Integration": "Luminar IOCs and Leaked Credentials",
  "Script": "from datetime import datetime\nimport requests\nfrom SiemplifyJob import SiemplifyJob\n\nSCRIPT_NAME = \"CloseCasesBasedOnSearch\"\nSEARCH_URL = \"external/v1/search/CaseSearchEverything\"\nBULK_ASSIGN_URL = \"external/v1/cases/ExecuteBulkAssign\"\nBULK_CLOSE_URL = \"external/v1/cases/ExecuteBulkCloseCase\"\nCASE_MIN_URL = \"{}/external/v1/cases/GetCaseFullDetails/{}\"\nTIMEOUT = 60.0\n\n\ndef get_bearer_token(siemplify, username, password):\n    address = \"{0}/{1}\".format(\n        siemplify.API_ROOT, \"external/v1/accounts/Login?format=camel\"\n    )\n    response = siemplify.session.post(\n        address, json={\"Username\": username, \"Password\": password}\n    )\n    response.raise_for_status()\n    return response.json()[\"token\"]\n\n\ndef main():\n    siemplify = SiemplifyJob()\n    siemplify.script_name = SCRIPT_NAME  # In order to use the SiemplifyLogger, you must assign a name to the script.\n    username = siemplify.parameters[\"Siemplify Username\"]\n    password = siemplify.parameters[\"Siemplify Password\"]\n    siemplify.LOGGER.info(f\"----------------- Main - Started -----------------\")\n    try:\n        bearer_token = get_bearer_token(siemplify, username, password)\n        session = requests.Session()\n        session.headers = {\n            \"Content-Type\": \"application/json\",\n            \"Accept\": \"application/json\",\n            \"Authorization\": \"Bearer {}\".format(bearer_token),\n        }\n        payload = {\"isCaseClosed\": False, 'title': 'Luminar IOCs'}\n\n        res_search = session.post(f\"{siemplify.API_ROOT}/{SEARCH_URL}\", json=payload, timeout=TIMEOUT)\n\n        res_search.raise_for_status()\n        results = res_search.json().get(\"results\") or res_search.json().get(\"Results\")\n        case_ids = [item.get(\"id\") or item.get(\"Id\") for item in results] if results else []\n        for case_id in case_ids:\n                try:\n                    cases = []\n                    case_data = siemplify.session.get(\n                        CASE_MIN_URL.format(siemplify.API_ROOT, case_id), timeout=TIMEOUT\n                    )\n                    expiration_date = case_data.json()[\"alerts\"][0][\n                        \"securityEventCards\"\n                    ][0][\"fields\"][1][\"items\"][0][\"value\"]\n\n                    if expiration_date and (datetime.strptime(expiration_date[:19], \"%Y-%m-%dT%H:%M:%S\") \\\n                            < datetime.today()):\n                        cases.append(case_id)\n                        res_assign = session.post(\n                            f\"{siemplify.API_ROOT}/{BULK_ASSIGN_URL}\",\n                            json={\"casesIds\": cases, \"userName\": username}, timeout=TIMEOUT\n                        )\n                        res_assign.raise_for_status()\n                        close_payload = {\n                            \"closeComment\": \"Expired IOCs\",\n                            \"closeReason\": \"Maintenance\",\n                            \"rootCause\": \"Other\",\n                            \"casesIds\": cases,\n                        }\n                        res_close = session.post(\n                            f\"{siemplify.API_ROOT}/{BULK_CLOSE_URL}\",\n                            json=close_payload, timeout=TIMEOUT\n                        )\n                        res_close.raise_for_status()\n                        siemplify.LOGGER.info(res_close.content)\n                except Exception as err:\n                    siemplify.LOGGER.info(err)\n                    continue\n    except Exception as err:\n        siemplify.LOGGER.error(f\"General error performing Job {SCRIPT_NAME}\")\n        siemplify.LOGGER.exception(err)\n        raise\n\n    siemplify.LOGGER.info(\"----------------- Main - Finished -----------------\")\n    siemplify.end_script()\n\n\nif __name__ == \"__main__\":\n    main()\n",
  "Creator": "Admin",
  "RunIntervalInSeconds": 900,
  "Description": "",
  "IsEnabled": true,
  "IsCustom": false,
  "Version": 37,
  "IsSystem": false,
  "Parameters": [
    {
      "JobDefinitionId": 13,
      "IsMandatory": true,
      "DefaultValue": "None",
      "Description": null,
      "Name": "Siemplify Username",
      "Type": 2
    },
    {
      "JobDefinitionId": 13,
      "IsMandatory": true,
      "DefaultValue": "None",
      "Description": null,
      "Name": "Siemplify Password",
      "Type": 3
    }
  ],
  "PythonVersion": "None"
}