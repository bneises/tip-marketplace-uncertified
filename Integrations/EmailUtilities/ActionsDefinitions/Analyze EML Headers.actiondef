{
  "Name": "Analyze EML Headers",
  "Description": "This actions gets a base64 EML or list of headers and extracts/analyses its headers",
  "Script": "# TODO:\n# 1) Add DMARC, SPF, DKIM and ARC verification flags. If exists and if pass or not (pass/fail)\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import unix_now, convert_unixtime_to_datetime, output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED,EXECUTION_STATE_TIMEDOUT\nimport json\nimport re\nimport base64\nfrom email import message_from_string\n\nINTEGRATION_NAME = \"EmailUtilties\"\nSCRIPT_NAME = \"Analyze EML Headers\"\nEXCLUDED_DOMAINS_ADDRESSES = [\"127.0.0.1\", \"localhost\"]\n\nEMAIL_ADDRESS_REGEX = r\"\"\"(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|\\\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\\\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\"\"\"\n\nRED_COLOR = \"FF0000\"\nGREEN_COLOR = \"00FF00\"\nDOT_HTML_SNNIPET = \"\"\"<div style=\"text-align:center\"><span style=\"height: 5px;  width: 5px;  background-color: #{};  border-radius: 50%;  display: inline-block;\"></span></div>\"\"\"\n# DOT_HTML_SNNIPET = \"\"\"<style>.dot_insight {{{{  height: 5px;  width: 5px;  background-color: #{};  border-radius: 50%;  display: inline-block;}}}}</style><div style=\"text-align:center\">  <span class=\"dot_insight\"></span>{{}}</div>\"\"\"\nRED_DOT_HTML_SNNIPET = DOT_HTML_SNNIPET.format(RED_COLOR)\nGREEN_DOT_HTML_SNNIPET = DOT_HTML_SNNIPET.format(GREEN_COLOR)\n\ndef get_html_headers_table(headers):\n    html_table = u\"<table><tbody>{}</tbody></table>\"\n    rows = []\n    for k, v in headers.items():\n        row = u\"<tr><td>{}</td><td>{}</td></tr>\".format(k, v)\n        rows.append(row)\n    html_table = html_table.format(u\"\".join(rows))\n    return html_table\n\ndef get_domains_and_addresses(headers):\n    list_of_tuples = []\n    for k, v in headers.items():\n        if k.startswith(\"Received\"):\n            tuple_result = process_header_to_extract_domain_address(v)\n            if tuple_result:\n                list_of_tuples.append(tuple_result)\n    \n    return list_of_tuples\n    \ndef process_header_to_extract_domain_address(header):\n    extracted_domains = re.findall(r\"\\s\\((.*?)\\.{0,1}\\s\\[\", header)\n    extracted_addresses = re.findall(r\"\\s\\[(.*?)\\]\\)\", header)\n    \n    if extracted_domains and extracted_addresses:\n        if extracted_domains[0] in EXCLUDED_DOMAINS_ADDRESSES or extracted_addresses[0] in EXCLUDED_DOMAINS_ADDRESSES:\n            return None\n        return extracted_domains[0], extracted_addresses[0]\n    return None\n\ndef get_generic_siemplify_recommendations(headers):\n    return_list = []\n    lower_case_headers = {k.lower(): v for k,v in headers.items()}\n    \n    if \"Return-Path\".lower() in lower_case_headers:\n        flag = False\n        if \"From\".lower() in lower_case_headers:\n            if re.findall(EMAIL_ADDRESS_REGEX, lower_case_headers[\"Return-Path\".lower()]) != re.findall(EMAIL_ADDRESS_REGEX, lower_case_headers[\"From\".lower()]):\n                return_list.append({\"message\": \"\\\"Return-Path\\\" header does not match \\\"From\\\" header\", \"score\": 6, \"status\": RED_DOT_HTML_SNNIPET})\n\n        if \"X-Original-Sender\".lower() in lower_case_headers:\n            if re.findall(EMAIL_ADDRESS_REGEX, lower_case_headers[\"Return-Path\".lower()]) != lower_case_headers[\"X-Original-Sender\".lower()]:\n                return_list.append({\"message\": \"\\\"Return-Path\\\" header does not match \\\"X-Original-Sender\\\" header\", \"score\": 5, \"status\": RED_DOT_HTML_SNNIPET})\n        \n        if flag:\n            return_list.append({\"message\": \"\\\"Return-Path\\\" header checked\", \"score\": 0, \"status\": GREEN_DOT_HTML_SNNIPET})\n    else: # Return path does not exist\n        return_list.append({\"message\": \"\\\"Return-Path\\\" header does not exist\", \"score\": 5, \"status\": RED_DOT_HTML_SNNIPET})\n        \n    \n    if \"Reply-To\".lower() in lower_case_headers:\n        flag = False\n        if \"From\".lower() in lower_case_headers:\n            if re.findall(EMAIL_ADDRESS_REGEX, lower_case_headers[\"Reply-To\".lower()]) != re.findall(EMAIL_ADDRESS_REGEX, lower_case_headers[\"From\".lower()]):\n                return_list.append({\"message\": \"\\\"Reply-To\\\" header does not match \\\"From\\\" header\", \"score\": 4, \"status\": RED_DOT_HTML_SNNIPET})\n        if flag:\n            return_list.append({\"message\": \"\\\"Reply-To\\\" header checked\", \"score\": 0, \"status\": GREEN_DOT_HTML_SNNIPET})\n    else: # \"Reply-To\" does bit exist\n        # return_list.append({\"message\": \"\\\"Reply-To\\\" header does not exist\", \"score\": 4, \"status\": RED_DOT_HTML_SNNIPET})\n        pass\n    \n    if \"X-Distribution\".lower() in lower_case_headers:\n        return_list.append({\"message\": \"\\\"X-Distribution\\\" header present and with value: {}\".format(lower_case_headers['X-Distribution'.lower()]), \"score\": 1, \"status\": RED_DOT_HTML_SNNIPET})\n    else:\n        return_list.append({\"message\": \"\\\"X-Distribution\\\" header checked (does not exist)\", \"score\": 0, \"status\": GREEN_DOT_HTML_SNNIPET})\n\n    # if \"X-Mailer\".lower() in lower_case_headers:\n    #     return_list.append({\"message\": \"\\\"X-Mailer\\\" header exists and with value: {}\".format(lower_case_headers['X-Mailer'.lower()]), \"score\": 1, \"status\": RED_DOT_HTML_SNNIPET})\n    # else:\n    #     return_list.append({\"message\": \"\\\"X-Mailer\\\" header checked (does not exist)\", \"score\": 0, \"status\": GREEN_DOT_HTML_SNNIPET})\n\n    if \"Bcc\".lower() in lower_case_headers:\n        return_list.append({\"message\": \"\\\"Bcc\\\" heaedr exists\", \"score\": 1, \"status\": RED_DOT_HTML_SNNIPET})\n    else:\n        return_list.append({\"message\": \"\\\"Bcc\\\" header checked (does not exist)\", \"score\": 0, \"status\": GREEN_DOT_HTML_SNNIPET})\n    \n    if \"X-UIDL\".lower() in lower_case_headers:\n        return_list.append({\"message\": \"\\\"X-UIDL\\\" header exists\", \"score\": 1, \"status\": RED_DOT_HTML_SNNIPET})\n    else:\n        return_list.append({\"message\": \"\\\"X-UIDL\\\" header checked (does not exist)\", \"score\": 0, \"status\": GREEN_DOT_HTML_SNNIPET})\n\n    if \"Message-Id\".lower() not in lower_case_headers or \"SMTPIN_ADDED_MISSING\" in lower_case_headers.get(\"Message-ID\".lower(), \"\"):# Message-ID   SMTPIN_ADDED_MISSING\n        return_list.append({\"message\": \"\\\"Message-ID\\\" header missing from original EML\", \"score\": 5, \"status\": RED_DOT_HTML_SNNIPET})\n    else:\n        return_list.append({\"message\": \"\\\"Message-ID\\\" header checked - Nothing abnormal\", \"score\": 0, \"status\": GREEN_DOT_HTML_SNNIPET})\n    \n    \n    return return_list\n\ndef process_user_authenticated_header(headers):\n    return_dict = {}\n    return_dict[\"siemplify_recommendations\"] = []\n    if \"X-Authenticated-User\" in headers:\n        raw = hedaers[\"X-Authenticated-User\"]\n        domain = raw[raw.index(\"@\") + 1 :] if \"@\" in raw else None\n        return_dict[\"domain\"] = domain\n        \n        if \"From\" in headers:\n            if raw != headers[\"From\"]:\n                return_dict[\"siemplify_recommendations\"].append({\"message\": u\"\\\"X-Authenticated-User\\\" header does not match \\\"From\\\" header\",\n                                                                \"score\": 10})\n    \n    return return_dict\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    siemplify.script_name = SCRIPT_NAME\n    siemplify.LOGGER.info(\"================= Main - Param Init =================\")\n\n    result_json = {}\n    output_message = \"\"\n    result_value = \"true\"\n    status = EXECUTION_STATE_COMPLETED\n    \n    try:\n        if siemplify.parameters.get(\"Base64 EML\"):\n            eml_content = base64.b64decode(siemplify.parameters.get(\"Base64 EML\"))\n            if not eml_content:\n                raise Exception(\"Missing eml example for {}\".format(siemplify.parameters.get(\"EML Example\")))\n    \n            extracted_email = message_from_string(eml_content)\n            \n            header_list = extracted_email._headers\n        elif siemplify.parameters.get(\"Header List\"):\n            real_headers = {}\n            header_list = json.loads(siemplify.parameters.get(\"Header List\"))\n        else:\n            raise Exception(\"Bad input. You must have at least one.\")\n        \n        headers_dict = {}\n        duplicate_key_dict = {}\n        for item in header_list:\n            try:\n                key = u\"{}\".format(item[0])\n                val = item[1]\n            except:\n                raise Exception(item)\n            if key not in duplicate_key_dict:\n                duplicate_key_dict[key] = 1\n                headers_dict[key] = val\n            else:\n                duplicate_key_dict[key] += 1\n                headers_dict[u\"{}_{}\".format(key, duplicate_key_dict[key])] = val\n            \n        real_headers = headers_dict\n        # raise Exception(real_headers)\n        result_json['extracted_headers'] = real_headers\n        \n        html_table_all_headers = get_html_headers_table(real_headers)\n        result_json['html_table_all_headers'] = html_table_all_headers\n        \n        list_of_domain_address_tuples = get_domains_and_addresses(real_headers)\n        list_of_domain_address = []\n        for t in list_of_domain_address_tuples:\n            list_of_domain_address.append({\n                \"domain\": t[0],\n                \"address\": t[1]\n            })\n        result_json['list_of_domain_address'] = list_of_domain_address\n        \n        user_authenticated_header = process_user_authenticated_header(real_headers)\n        if 'domain' in user_authenticated_header:\n            result_json[\"user_authenticated_header_domain\"] = user_authenticated_header['domain']\n        \n        siemplify_recommendations = get_generic_siemplify_recommendations(real_headers)\n        \n        siemplify_recommendations.extend(user_authenticated_header[\"siemplify_recommendations\"])\n        result_json['header_analysis_result'] = siemplify_recommendations\n        total_rules_matched = 0\n        for item in siemplify_recommendations:\n            if item[\"score\"] > 0:\n                total_rules_matched += 1\n        result_json[\"total_rules_matched\"] = total_rules_matched\n        result_json[\"total_rules_checked\"] = len(siemplify_recommendations)\n        \n        if not siemplify_recommendations:\n            siemplify_recommendations = \"Siemlify did not find anything suspicious in the headers\"\n        else:\n            siemplify_recommendations = \"<table>{}</table>\".format(u\"\".join([\"<tr><td style=\\\"padding-right:12px\\\">{}</td><td>{}</td></tr>\".format(x[\"status\"], x[\"message\"]) for x in siemplify_recommendations]))\n            \n        result_json['header_analysis_result_html'] = siemplify_recommendations\n        \n        \n        if result_json:\n            siemplify.result.add_result_json(result_json)\n\n    except Exception as e:\n        siemplify.LOGGER.error(\"General error performing action {}\".format(SCRIPT_NAME))\n        siemplify.LOGGER.exception(e)\n        status = EXECUTION_STATE_FAILED\n        result_value = \"Failed\"\n        output_message += \"\\n unknown failure\"\n        raise\n\n\n    siemplify.LOGGER.info(\"----------------- Main - Finished -----------------\")\n    siemplify.end(output_message, result_value, status)\n\n\nif __name__ == \"__main__\":\n    main()\n",
  "IntegrationIdentifier": "EmailUtilities",
  "ScriptResultName": "ScriptResult",
  "DynamicResultsMetadata": [
    {
      "ResultName": "JsonResult",
      "ResultExample": "{}",
      "ShowResult": true
    }
  ],
  "Creator": "Rob",
  "IsEnabled": true,
  "IsCustom": false,
  "IsSystem": false,
  "Version": 5.0,
  "TimeoutSeconds": 300,
  "Parameters": [
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": "",
      "Description": "Base64 string of an EML file.",
      "Name": "Base64 EML",
      "Value": "",
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1610732892913,
      "ModificationTimeUnixTimeInMs": 1610732892913
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": "",
      "Description": "Headers list in a JSON format.",
      "Name": "Header List",
      "Value": "",
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1610732892913,
      "ModificationTimeUnixTimeInMs": 1610732892913
    }
  ],
  "DefaultResultValue": "",
  "PythonVersion": "None",
  "Id": 0,
  "CreationTimeUnixTimeInMs": 1610732892909,
  "ModificationTimeUnixTimeInMs": 1610732892909
}