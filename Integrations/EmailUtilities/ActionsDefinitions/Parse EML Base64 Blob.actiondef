{
  "Name": "Parse EML Base64 Blob",
  "Description": "This action will decode a base64 string and attempt to parse it as an EML file.  It will return a list of parsed objects.",
  "Script": "from SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import output_handler\n\nimport base64, re\nfrom email import message_from_string\n\n# CONSTS:\nEMAIL_PATTERN = \"(?<=<)(.*?)(?=>)\"\n\ndef _extract_subject(msg):\n    # type: (email.message.Message) -> unicode\n    \"\"\"\n    Extract message subject from email message.\n    :param msg: {email.message.Message} Message object.\n    :return: {string} Subject text.\n    \"\"\"\n\n    raw_subject = msg.get('subject')\n    if not raw_subject:\n        return u\"\"\n    try:\n        parsed_value, encoding = decode_header(raw_subject)[0]\n        if encoding is None:\n            return parsed_value\n        return parsed_value.decode(encoding)\n    except UnicodeDecodeError:\n        msg = u\"Unable to decode email subject\"\n        return msg\n\ndef _is_attachment(mime_part, include_inline=False):\n    # type: (email.message.Message, bool) -> bool\n    \"\"\"\n    Determine if a MIME part is a valid attachment or not.\n    Based on :\n    https://www.ietf.org/rfc/rfc2183.txt\n    More about the content-disposition allowed fields and values:\n    https://www.iana.org/assignments/cont-disp/cont-disp.xhtml#cont-disp-1\n    :param mime_part: {email.message.Message} The MIME part\n    :param include_inline: {bool} Whether to consider inline attachments as well or not\n    :return: {bool} True if MIME part is an attachment, False otherwise\n    \"\"\"\n    # Each attachment should have the Content-Disposition header\n    content_disposition = mime_part.get(\"Content-Disposition\")\n\n    if not content_disposition or not isinstance(content_disposition, str):\n        return False\n\n    # \"Real\" attachments differs from inline attachments (like images in signature)\n    # by having Content-Disposition headers, that starts with 'attachment'.\n    # Inline attachments have the word 'inline' at the beginning of the header.\n    # Inline attachments are being displayed as part of the email, and not as a separate\n    # file. In most cases, the term attachment is related to the MIME parts that start with\n    # 'attachment'.\n    # The values are not case sensitive\n    if content_disposition.lower().startswith(\"attachment\"):\n        return True\n\n    if include_inline and content_disposition.lower().startswith(\"inline\"):\n        return True\n\n    return False\n\ndef extract_content(msg):\n    \"\"\"\n    Extracts content from an e-mail message.\n    :param msg: {email.message.Message} An eml object\n    :return: {tuple} Text body, Html body, files dict (file_name: file_hash),\n    count of parts of the emails\n    \"\"\"\n    html_body = \"\"\n    text_body = \"\"\n    files = {}\n    count = 0\n\n    if not msg.is_multipart():\n        # Not an attachment!\n        # See where this belong - text_body or html_body\n        content_type = msg.get_content_type()\n        if content_type == \"text/plain\":\n            text_body += msg.get_payload(decode=True).decode(\"utf-8\")\n        elif content_type == \"text/html\":\n            html_body += msg.get_payload(decode=True).decode(\"utf-8\")\n\n        return text_body, html_body, 1\n\n    # This IS a multipart message.\n    # So, we iterate over it and call extract_content() recursively for\n    # each part.\n    for part_msg in msg.get_payload():\n        # part is a new Message object which goes back to extract_content\n        part_text_body, part_html_body, part_count = extract_content(\n            part_msg)\n        text_body += part_text_body\n        html_body += part_html_body\n        count += part_count\n\n    return text_body, html_body, count\n\ndef extract_field(field):\n    temp = re.findall(EMAIL_PATTERN, field)\n    if temp:\n        return temp\n    return field\n\ndef extract_metadata(msg):\n    \"\"\"\n    Extract metadata (sender, recipient, date and subject) from EML\n    :param msg: {email.message.Message} An eml object\n    :return: (tuple) sender, recipient, date and subject\n    \"\"\"\n    return extract_field(msg.get(\"from\", \"\").strip()), \\\n           extract_field(msg.get(\"to\", \"\").strip()), \\\n           extract_field(msg.get(\"cc\", \"\").strip()), \\\n           extract_field(msg.get(\"bcc\", \"\").strip()), \\\n           msg.get(\"subject\", \"\").strip(), \\\n           msg.get(\"date\", \"\").strip()\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    output_message = \"No EML found\"\n    result_value = False\n    \n    base64_blob = siemplify.parameters.get(\"Base64 EML Blob\")\n    eml_content = base64.b64decode(base64_blob).decode('utf-8')\n    \n    json_result = []\n    \n    email = message_from_string(eml_content)\n    sender, to, cc, bcc, subject, date = extract_metadata(email)\n    text_body, html_body, count = extract_content(email)\n    curr_json_result = {\n        \"base64_blob\": base64_blob,\n        \"headers\": email._headers,\n        \"sender\": sender,\n        \"to\": to,\n        \"cc\": cc,\n        \"bcc\": bcc,\n        \"subject\": subject,\n        \"date\": date,\n        \"text_body\": text_body,\n        \"html_body\": html_body,\n        \"count\": count\n    }\n    json_result.append({\"Entity\": subject, \"EntityResult\": curr_json_result})\n    for i, item in enumerate(email.get_payload()):\n        if item.is_multipart():\n            # print(\"Item {} is multipart\".format(i))\n            for part in item.get_payload():\n                if _is_attachment(part):\n                    # print (\"DEBUG if: part is attachment\".format())\n                    pass\n                elif part.is_multipart(): #part.get_content_maintype() == \"multipart\":\n                    # print (\"DEBUG elif: part is multipart\".format())\n                    \n                    # Here we assume it was an EML attachment and want to return it\n                    \n                    curr_b64_blob = base64.b64encode(part.as_string().encode('utf-8')).decode('utf-8')\n                    file_name = \"UNKOWN\"\n                    for header in part.items():\n                        if header[0].lower() == \"subject\":\n                            file_name = header[1]\n                    \n                    \n                    sender, to, cc, bcc, subject, date = extract_metadata(part)\n                    text_body, html_body, count = extract_content(part)\n                    curr_json_result = {\n                        \"base64_blob\": curr_b64_blob,\n                        \"headers\": part._headers,\n                        \"sender\": sender,\n                        \"to\": to,\n                        \"cc\": cc,\n                        \"bcc\": bcc,\n                        \"subject\": subject,\n                        \"date\": date,\n                        \"text_body\": text_body,\n                        \"html_body\": html_body,\n                        \"count\": count\n                    }\n                    json_result.append({\"Entity\": file_name, \"EntityResult\": curr_json_result})\n                    for part2 in part.get_payload():\n                    #  print (\"DEBUG PART2: part2 is {}\".format(part2.get_content_maintype()))\n                        pass\n                else:\n                    pass\n                    # print (\"DEBUG else: part is {}\".format(part.get_content_maintype()))\n        else:\n            print(\"Item {} is NOT multipart\".format(i))\n    siemplify.result.add_result_json(json_result)\n    if json_result:\n        output_message = \"EML found and returned in json result\"\n        result_value = True\n    \n    \n    siemplify.end(output_message, result_value)\n\n\nif __name__ == \"__main__\":\n    main()\n",
  "IntegrationIdentifier": "EmailUtilities",
  "ScriptResultName": "ScriptResult",
  "DynamicResultsMetadata": [
    {
      "ResultName": "JsonResult",
      "ResultExample": "[\n  {\n    \"Entity\": \"=?utf-8?q?Please_join_Zoom_meeting_in_progress?=\",\n    \"EntityResult\": {\n      \"base64_blob\": \"gxMjU0NjUwNDE3NTU4Nz09LS0K\",\n      \"headers\": [\n        [\n          \"Delivered-To\",\n          \"bbbbb@company.co\"\n        ],\n        [\n          \"Received\",\n          \"by 2002:a02:b105:0:0:0:0:0 with SMTP id r5csp394571jah;\\n Mon, 25 May 2020 05:01:36 -0700 (PDT)\"\n        ],\n        [\n          \"X-Google-Smtp-Source\",\n          \"ABdhPJwRIPolXj6t9hz7uDhriCjaL3FX7ZCvEuj1yRKm3WIbPSxV+Sq7ndSNOgf1n9jnVIQeZLZ/\"\n        ],\n        [\n          \"X-Received\",\n          \"by 2002:aa7:8425:: with SMTP id q5mr15902257pfn.98.1590408095861; \\n Mon, 25 May 2020 05:01:35 -0700 (PDT)\"\n        ],\n        [\n          \"ARC-Seal\",\n          \"i=1; a=rsa-sha256; t=1590408095; cv=none;\\n d=google.com; s=arc-20160816;\\n b=UI2usvi7Wzr15/jm30/LDWy2kNzh0KPb+5nipU+gloaJ0V6AtCgJeEKligz0DpqnnM\\n V0ZOay+z7OsKqGAkgB2Fo9dOHwTFs+S9DU+ag18AFuLdx09Sj/AHcMOYEnyV+elsBl4D\\n k80KBZfJ51b5l6QFulJlcCtBoOKXsa5bB+5XQy9UZA5YRLG+pIP+GDOu+8ejUjPz7XQ7\\n 0DR/wiAkyYHeImnZ57bXMR35SjbP3jLhs6F5wY6oXPzN0j0Ljye1/0aJCgnaKu07Zv4t\\n +CablS2sP8aKfhx+nUtL98BRWqoAM7CRR7BhpdDJmHO3f5AXVAEhf4OLJPMDhemPEztq\\n tKsQ==\"\n        ],\n        [\n          \"ARC-Message-Signature\",\n          \"i=1; a=rsa-sha256; c=relaxed/relaxed; d=google.com;\\n s=arc-20160816; \\n h=subject:reply-to:from:to:mime-version:message-id:date;\\n bh=OCUn7dAzBq4ikkUWPM7zlRyznZDGSbzE8WOf3rs6Lfo=;\\n b=FruVTsGq74a09NVaaVAQnSzpXHfok485GPyPlwhfGHtTrEZJ662VGLCc1pcjDx/SzM\\n ++njkWuUjCV6Y7B7vPxYnXWHdFzdNYAEir4V0JDF3zPylYJemenwBaNZ54TN/24JyZ14\\n egQupuAqMnfF7VZFHdVo0oCv3NCTDcQDEY8GOK3RrO2n+vNJM87ZTkfXg52apVsaSFHu\\n sYY97MAV+tCNEeJqwIAQLPgq6H3uT1i+pbAZ6xv7d0XmxkI6yulc/eDB9Ii1cPHTk56s\\n WRVRTTYHzgtBZpP6/6my8C9cuXBaAzTv4bmovzip0hB0KLN0Pz0sUfYQcCqoxbYNJdoy\\n XhuQ==\"\n        ],\n        [\n          \"ARC-Authentication-Results\",\n          \"i=1; mx.google.com;\\n spf=pass (google.com: domain of pawt@mailrelaysrv.com designates 18.184.247.15\\n as permitted sender) smtp.mailfrom=pawt@mailrelaysrv.com\"\n        ],\n        [\n          \"Return-Path\",\n          \"<pawt@mailrelaysrv.com>\"\n        ],\n        [\n          \"Received\",\n          \"from mailstream-west.mxrecord.io\\n (mailstream-uswest-egress002.mxrecord.io. [52.11.209.211])\\n by mx.google.com with ESMTPS id lj8si13539801pjb.114.2020.05.25.05.01.35\\n for <bbbbb@company.co>\\n (version=TLS1_3 cipher=TLS_AES_256_GCM_SHA384 bits=256/256);\\n Mon, 25 May 2020 05:01:35 -0700 (PDT)\"\n        ],\n        [\n          \"Received-SPF\",\n          \"pass (google.com: domain of pawt@mailrelaysrv.com designates\\n 18.184.247.15 as permitted sender) client-ip=18.184.247.15; \"\n        ],\n        [\n          \"Authentication-Results\",\n          \"mx.google.com;\\n spf=pass (google.com: domain of pawt@mailrelaysrv.com designates 18.184.247.15\\n as permitted sender) smtp.mailfrom=pawt@mailrelaysrv.com\"\n        ],\n        [\n          \"Date\",\n          \"Mon, 25 May 2020 05:01:35 -0700 (PDT)\"\n        ],\n        [\n          \"Message-ID\",\n          \"<5ecbb39f.1c69fb81.ab8ef.0cfcSMTPIN_ADDED_MISSING@mx.google.com>\"\n        ],\n        [\n          \"Received\",\n          \"from mailstreamwest005.production.area1.internal (localhost\\n [127.0.0.1])\\n by mailstream-west.mxrecord.io (Postfix) with ESMTP id 49Vwg33HQWzNkJn\\n for <bbbbb@company.co>; Mon, 25 May 2020 12:01:35 +0000 (UTC)\"\n        ],\n        [\n          \"Received-SPF\",\n          \"pass (mxrecord.io: mailrelaysrv.com designates 18.184.247.15 as\\n permitted sender) client-ip=18.184.247.15; envelope-from=pawt@mailrelaysrv.com;\\n helo=mail4.eu.mailrelaysrv.com; \"\n        ],\n        [\n          \"Authentication-Results\",\n          \"mailstream-west.mxrecord.io;\\n dmarc=fail (p=none) header.from=company.co;\\n spf=pass smtp.mailfrom=mailrelaysrv.com; dkim=none\"\n        ],\n        [\n          \"Received\",\n          \"from mailstream-west.mxrecord.io (localhost. [127.0.0.1])\\n by localhost with SMTP (Area1Security-Mailstream 2.94.0) id KAMFVJZH\\n for bbbbb@company.co; Mon, 25 May 2020 12:01:35 +0000 (GMT)\"\n        ],\n        [\n          \"Received\",\n          \"from mailrelaysrv.com (mail4.eu.mailrelaysrv.com [18.184.247.15])\\n by mailstream-west.mxrecord.io (Postfix) with ESMTP id 49Vwg25XkYzNkHv\\n for <bbbbb@company.co>; Mon, 25 May 2020 12:01:34 +0000 (UTC)\"\n        ],\n        [\n          \"Content-Type\",\n          \"multipart/mixed; boundary=\\\"===============2469812546504175587==\\\"\"\n        ],\n        [\n          \"MIME-Version\",\n          \"1.0\"\n        ],\n        [\n          \"To\",\n          \"=?utf-8?q?hXKQ+fhuQ2u40+Sb+KBccg=3D=3D?= <bbbbb@company.co>\"\n        ],\n        [\n          \"From\",\n          \"=?utf-8?q?Maayan_Horenstain?= <aaaaa@company.co>\"\n        ],\n        [\n          \"Reply-To\",\n          \"<bbbbb@company.co>\"\n        ],\n        [\n          \"X-Area1Security-Disposition\",\n          \"SPOOF 49Vwg25XkYzNkHv-2020-05-25T12:01:35\"\n        ],\n        [\n          \"X-Area1Security-Origin\",\n          \"EXTERNAL 49Vwg25XkYzNkHv-2020-05-25T12:01:35\"\n        ],\n        [\n          \"X-Area1Security-Processed\",\n          \"f4822d4f5014edc3e32b57c850398246; 2; SPOOF;\\n 2020-05-25T12:01:35\"\n        ],\n        [\n          \"Subject\",\n          \"=?utf-8?q?Please_join_Zoom_meeting_in_progress?=\"\n        ],\n        [\n          \"X-PhishInsight\",\n          \"Trend Micro Phishing simulation\"\n        ],\n        [\n          \"X-PhishInsightTracking\",\n          \"This phishing simulation email was sent because\\n bbbbb@company.co initiated a simulation campaign.\"\n        ],\n        [\n          \"X-PhishInsightCampaignID\",\n          \"\"\n        ]\n      ],\n      \"sender\": [\n        \"aaaaa@company.co\"\n      ],\n      \"to\": [\n        \"bbbbb@company.co\"\n      ],\n      \"cc\": [],\n      \"bcc\": [],\n      \"subject\": \"=?utf-8?q?Please_join_Zoom_meeting_in_progress?=\",\n      \"date\": \"Mon, 25 May 2020 05:01:35 -0700 (PDT)\",\n      \"text_body\": \"\",\n      \"html_body\": \"<p style=\\\"padding-left: 30px;\\\">\\n</p>\\n<p style=\\\"padding-left: 30px;\\\">\\n <span style=\\\"font-family: helvetica, arial, sans-serif; font-size: 12pt;\\\">\\n Hello\\n </span>\\n <span class=\\\"mceNonEditable\\\">\\n <span class=\\\"mceNonEditable\\\">\\n bbbbb\\n </span>\\n </span>\\n <span style=\\\"font-family: helvetica, arial, sans-serif; font-size: 12pt;\\\">\\n ,\\n </span>\\n</p>\\n<p style=\\\"padding-left: 30px;\\\">\\n <span style=\\\"font-family: helvetica, arial, sans-serif; font-size: 12pt;\\\">\\n </span>\\n</p>\\n<p style=\\\"padding-left: 30px;\\\">\\n <span style=\\\"font-family: helvetica, arial, sans-serif; font-size: 12pt;\\\">\\n Join your\\n </span>\\n <span class=\\\"mceNonEditable\\\">\\n <span class=\\\"mceNonEditable\\\">\\n \\n </span>\\n </span>\\n <span style=\\\"font-family: helvetica, arial, sans-serif; font-size: 12pt;\\\">\\n CEO and Management Board Meeting\\n </span>\\n <br/>\\n <span style=\\\"font-family: helvetica, arial, sans-serif; font-size: 12pt;\\\">\\n for all staffs on Zoom Meeting\\n </span>\\n</p>\\n<p style=\\\"padding-left: 30px;\\\">\\n <span style=\\\"font-family: helvetica, arial, sans-serif;\\\">\\n </span>\\n</p>\\n<p style=\\\"padding-left: 30px;\\\">\\n <span style=\\\"font-family: helvetica, arial, sans-serif; font-size: 12pt;\\\">\\n This is a reminder that your zoom meeting appointment with\\n </span>\\n <br/>\\n <span style=\\\"font-family: helvetica, arial, sans-serif; font-size: 12pt;\\\">\\n <strong>\\n H.R and Audit Head\\n </strong>\\n will start in few minutes.\\n </span>\\n <br/>\\n <span style=\\\"font-family: helvetica, arial, sans-serif; font-size: 12pt;\\\">\\n Your presence is crucial to this meeting and equally\\n </span>\\n <br/>\\n <span style=\\\"font-family: helvetica, arial, sans-serif; font-size: 12pt;\\\">\\n required to commence this\\n <strong>\\n Q1 perfomance review meeting\\n </strong>\\n </span>\\n <br/>\\n <br/>\\n</p>\\n<p style=\\\"padding-left: 30px;\\\">\\n</p>\\n<table style=\\\"height: 71px; background-color: #3694f7; margin-left: 30px;\\\" width=\\\"208\\\">\\n <tbody>\\n <tr>\\n <td style=\\\"width: 200px; height: 50px; text-align: center;\\\">\\n <span style=\\\"font-family: tahoma, arial, helvetica, sans-serif;\\\">\\n <strong>\\n <span style=\\\"color: #ffffff;\\\">\\n <a class=\\\"fakesitelink\\\" href=\\\"https://www.onlineservicetech.website/link/l/P70iPXzLzo2cEeD77GjmLWWqXFQCjsVQBYNKZZ346JqYYikTR6QGaMnqw4L-mxxYSStIHAeIicd-w1IUrFsBn6iuMCO4gwZ_1SBG-62fgIZQk3zPNIst9wGCbTW-62BxD-FJp7TcWFBSqKVUBeVYliF_DTc6oygMqfxdStFnDb_-CffKq4AzNFF13zwoNarj\\\" rel=\\\"noopener noreferrer\\\" style=\\\"color: #ffffff;\\\" target=\\\"_blank\\\">\\n Join this live meeting\\n </a>\\n </span>\\n </strong>\\n </span>\\n </td>\\n </tr>\\n </tbody>\\n</table><img alt=\\\"\\\" src=\\\"https://www.onlineservicetech.website/link/t/KEDVs-MM3mp5milZ6YjdRdZjBbXiCMAKHKwUTCo7zkd4j2-iwl-RGhO3GIxnJDOk\\\"/><a href=\\\"https://www.onlineservicetech.website/link/b/KEDVs-MM3mp5milZ6YjdRdZjBbXiCMAKHKwUTCo7zkd4j2-iwl-RGhO3GIxnJDOk\\\"></a>\",\n      \"count\": 1\n    }\n  }\n]",
      "ShowResult": true
    }
  ],
  "Creator": "Robert",
  "IsEnabled": true,
  "IsCustom": false,
  "IsSystem": false,
  "Version": 6.0,
  "TimeoutSeconds": 300,
  "Parameters": [
    {
      "CustomActionId": 0,
      "IsMandatory": true,
      "DefaultValue": "<base64encoded_string>",
      "Description": "A base64 encoded string of an EML file.",
      "Name": "Base64 EML Blob",
      "Value": "<base64encoded_string>",
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1610732892878,
      "ModificationTimeUnixTimeInMs": 1610732892878
    }
  ],
  "DefaultResultValue": "",
  "PythonVersion": "None",
  "Id": 0,
  "CreationTimeUnixTimeInMs": 1610732892874,
  "ModificationTimeUnixTimeInMs": 1610732892874
}