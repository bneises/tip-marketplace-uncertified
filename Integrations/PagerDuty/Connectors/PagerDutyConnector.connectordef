{"IsEnabled":false,"IsCustom":false,"Integration":"PagerDuty","DocumentationLink":null,"Name":"PagerDutyConnector","Description":"The connector pulls events from the Pagerduty API https://developer.pagerduty.com/api-reference/9d0b4b12e36f9-list-incidents.","Creator":"d29f584f-9e6b-498a-b6a6-f8fae0e97a8b","Script":"from PagerDutyManager import PagerDutyManager\n\nfrom SiemplifyConnectors import SiemplifyConnectorExecution\nfrom SiemplifyConnectorsDataModel import AlertInfo\nfrom SiemplifyUtils import output_handler, dict_to_flat, convert_string_to_unix_time\n\nimport sys\nimport uuid\n\n\nCONNECTOR_NAME = \"PagerDuty\"\nVENDOR = \"PagerDuty\"\nPRODUCT = \"PagerDuty\"\n\n\n@output_handler\ndef main(is_test_run):\n    processed_alerts = []  # The main output of each connector run\n    siemplify = SiemplifyConnectorExecution()  # Siemplify main SDK wrapper\n    siemplify.script_name = CONNECTOR_NAME\n\n    siemplify.LOGGER.info(\"------------------- Main - Started -------------------\")\n\n    if is_test_run:\n        siemplify.LOGGER.info('***** This is an \"IDE Play Button\"\\\\\"Run Connector once\" test run ******')\n\n    api_key = siemplify.extract_connector_param(param_name=\"apiKey\")\n    email = siemplify.extract_connector_param(param_name=\"email\")\n    timeframe = siemplify.extract_connector_param(param_name=\"timeframe\")\n    acknowledge_enabled = siemplify.extract_connector_param(param_name=\"acknowledge\")\n\n    manager = PagerDutyManager(api_key=api_key, email=email, timeframe=timeframe)\n    try:\n        incidents_list = manager.get_incidents()\n        if incidents_list is None:\n            siemplify.LOGGER.info(\"No events were retrieved for the specified timeframe from PagerDuty\")\n            return\n        siemplify.LOGGER.info(\"Retrieved {} events from PagerDuty\".format(len(incidents_list)))\n        for incident in incidents_list:\n            alert_id = incident[\"id\"]\n\n            # Map the severity in PagerDuty to the severity levels in Siemplify\n            severity = get_siemplify_mapped_severity(incident[\"urgency\"])\n\n            siemplify_alert = build_alert_info(siemplify, incident, severity)\n            \n            if siemplify_alert:\n                processed_alerts.append(siemplify_alert)\n                siemplify.LOGGER.info(\"Added incident {} to package results\".format(alert_id))\n                # `acknowledge_enabled` is a str, hence the str comparison below\n                if acknowledge_enabled == \"true\":\n                    manager.acknowledge_incident(alert_id)\n                    siemplify.LOGGER.info(\"Incident {} acknowledged in PagerDuty\".format(alert_id))\n\n    except Exception as e:\n        siemplify.LOGGER.error(\"There was an error fetching or acknowledging incidents in PagerDuty\")\n        siemplify.LOGGER.exception(e)\n\n    siemplify.LOGGER.info(\"------------------- Main - Finished -------------------\")\n    siemplify.return_package(processed_alerts)\n\n\ndef get_siemplify_mapped_severity(severity):\n    severity_map = {\"high\": \"100\", \"low\": \"-1\"}\n    return severity_map.get(severity)\n\n\ndef build_alert_info(siemplify, incident, severity):\n    \"\"\"Returns an alert, which is an aggregation of basic events.\"\"\"\n\n    alert_info = AlertInfo()\n    alert_info.display_id = incident[\"id\"]\n    alert_info.ticket_id = str(uuid.uuid4())\n    alert_info.name = \"PagerDuty Incident: \" + incident[\"title\"]\n    alert_info.rule_generator = incident[\"first_trigger_log_entry\"][\"summary\"]\n    alert_info.start_time = convert_string_to_unix_time(incident[\"created_at\"])\n    alert_info.severity = severity\n    alert_info.device_vendor = VENDOR\n    alert_info.device_product = PRODUCT\n    alert_info.environment = siemplify.context.connector_info.environment\n    alert_info.events.append(dict_to_flat(incident))\n\n    return alert_info\n\n\nif __name__ == \"__main__\":\n    is_test_run = len(sys.argv) > 2 and sys.argv[1] == \"True\"\n    main(is_test_run)\n","Version":24,"MappingRules":[],"ProductToVisualFamilyRecords":[],"SimulationUseCases":{"CasesForUseCase":[],"UseCaseName":null},"Parameters":[{"ConnectorDefinitionId":1,"IsMandatory":false,"IsAdvanced":true,"DefaultValue":"true","Name":"acknowledge","Type":0,"Mode":2,"Description":"Boolean flag to enable acknowledging the incident in PagerDuty. NOTE: The apikey must have permissions to modify incidents or the connector will fail."},{"ConnectorDefinitionId":1,"IsMandatory":true,"IsAdvanced":false,"DefaultValue":"null","Name":"apiKey","Type":2,"Mode":2,"Description":"API Key to interact with PagerDuty API"},{"ConnectorDefinitionId":1,"IsMandatory":true,"IsAdvanced":false,"DefaultValue":"device_product","Name":"DeviceProductField","Type":2,"Mode":0,"Description":"The field name used to determine the device product"},{"ConnectorDefinitionId":1,"IsMandatory":true,"IsAdvanced":false,"DefaultValue":"test@example.com","Name":"email","Type":8,"Mode":2,"Description":"Email address associated with the API Key"},{"ConnectorDefinitionId":1,"IsMandatory":true,"IsAdvanced":false,"DefaultValue":"event_name","Name":"EventClassId","Type":2,"Mode":0,"Description":"The field name used to determine the event name (sub-type)"},{"ConnectorDefinitionId":1,"IsMandatory":true,"IsAdvanced":false,"DefaultValue":"30","Name":"PythonProcessTimeout","Type":2,"Mode":0,"Description":"The timeout limit (in seconds) for the python process running current script"},{"ConnectorDefinitionId":1,"IsMandatory":true,"IsAdvanced":false,"DefaultValue":"0","Name":"timeframe","Type":2,"Mode":2,"Description":"A lookback timeframe, in minutes, to pull incidents. Default is null which pulls ALL incidents."}],"Rules":[],"IsConnectorRulesSupported":true,"IsSystem":false,"PythonVersion":"None"}