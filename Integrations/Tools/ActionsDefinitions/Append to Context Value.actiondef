{
    "Name": "Append to Context Value",
    "Description": "Append a value to an existing context property or create a new context property and add the value.",
    "Script": "from SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import unix_now, convert_unixtime_to_datetime, output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED, EXECUTION_STATE_TIMEDOUT\n\nGLOBAL_CONTEXT = 0\nIDENTIFIER = \"GLOBAL\"\n\n\ndef get_global_context(smp, key):\n    return smp.get_context_property(GLOBAL_CONTEXT, IDENTIFIER, key)\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    status = EXECUTION_STATE_COMPLETED  # used to flag back to siemplify system, the action final status\n    output_message = \"output message :\"  # human readable message, showed in UI as the action result\n    \n    scope = siemplify.extract_action_param(param_name=\"Scope\", is_mandatory=True, print_value=True, default_value='Alert')\n    key = siemplify.extract_action_param(param_name=\"Key\", is_mandatory=True, print_value=True)\n    value = siemplify.extract_action_param(param_name=\"Value\", is_mandatory=True, print_value=True)\n    delim = siemplify.extract_action_param(param_name=\"Delimiter\", is_mandatory=True, print_value=True, default_value=',')\n    \n    result_value = None\n    try:\n        \n        if scope == 'Alert':\n            result_value = siemplify.get_alert_context_property(key)\n            if result_value:\n                siemplify.set_alert_context_property(key, result_value+delim+value)\n                result_value = result_value+delim+value\n            else:\n                siemplify.set_alert_context_property(key, value)\n                result_value = value\n        \n        elif scope == 'Case':\n            result_value = siemplify.get_case_context_property(key)\n            if result_value:\n                result_value = result_value+delim+value\n                siemplify.set_case_context_property(key, result_value+delim+value)\n            else:\n                siemplify.set_case_context_property(key, value)\n                result_value = value\n\n        elif scope == \"Global\":\n            result_value = get_global_context(siemplify, key)\n            if result_value:\n                \n                set_global_context(siemplify, result_value+delim+value)\n                result_value = result_value+delim+value\n            else:\n                set_global_context(siemplify, key, value)\n                result_value = value\n        if result_value:\n            result_value = result_value.strip('\"')\n            output_message = \"Successfully appended field {0} with value '{1}' in scope {2}.\".format(key,value,scope)\n        else:\n            output_message = \"Key: {0} in scope {1} didn't exist, it's now created\".format(key, scope)\n    except Exception as e:\n        output_message = f\"Error: {e}\"\n        status = EXECUTION_STATE_FAILED\n        result_value = False\n       \n\n    siemplify.end(output_message, result_value, EXECUTION_STATE_COMPLETED)\n\nif __name__ == \"__main__\":\n    main()\n",
    "IntegrationIdentifier": "Tools",
    "ScriptResultName": "ScriptResult",
    "DynamicResultsMetadata": [
        {
            "ResultName": "JsonResult",
            "ResultExample": "{}",
            "ShowResult": true
        }
    ],
    "Creator": "Rob",
    "IsEnabled": true,
    "IsCustom": false,
    "IsSystem": false,
    "Version": 21.0,
    "TimeoutSeconds": 300,
    "IsAsync": false,
    "AsyncPollingIntervalInSeconds": 3600,
    "TotalIntervalTimeoutForAsyncInSeconds": 86400,
    "Parameters": [
        {
            "CustomActionId": 0,
            "IsMandatory": true,
            "DefaultValue": "Alert",
            "Description": "The scope of the context value. Options: Alert or Case or Global",
            "Name": "Scope",
            "Value": "Alert",
            "Type": 15,
            "OptionalValues": [
                "Case",
                "Alert",
                "Global"
            ],
            "OptionalValuesJson": "[\"Case\",\"Alert\",\"Global\"]"
        },
        {
            "CustomActionId": 0,
            "IsMandatory": true,
            "DefaultValue": "",
            "Description": "The context property key.",
            "Name": "Key",
            "Value": "",
            "Type": 0,
            "OptionalValues": null,
            "OptionalValuesJson": null
        },
        {
            "CustomActionId": 0,
            "IsMandatory": true,
            "DefaultValue": "",
            "Description": "The value to append to the context property.",
            "Name": "Value",
            "Value": "",
            "Type": 0,
            "OptionalValues": null,
            "OptionalValuesJson": null
        },
        {
            "CustomActionId": 0,
            "IsMandatory": true,
            "DefaultValue": ",",
            "Description": "The delimiter for the value of the context property.",
            "Name": "Delimiter",
            "Value": ",",
            "Type": 0,
            "OptionalValues": null,
            "OptionalValuesJson": null
        }
    ],
    "DefaultResultValue": "",
    "PythonVersion": "None",
    "SimulationData": {
        "Entities": null
    },
    "SimulationDataJson": null
}
