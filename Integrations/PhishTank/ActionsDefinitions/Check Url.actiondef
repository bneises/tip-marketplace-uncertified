{
  "Name": "Check Url",
  "Description": "Check if a specific URL is marked as suspicious by the PhishTank Community. The action will add an insight with the result of the action. ",
  "Script": "from SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import output_handler, convert_dict_to_json_result_dict\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED,EXECUTION_STATE_TIMEDOUT\nfrom SiemplifyDataModel import EntityTypes\n\nimport requests\nimport json\nimport xmljson\nimport xmltodict\n\n# Consts:\nINTEGRATION_NAME = \"PhishTank\"\nSCRIPT_NAME = \"Check Url\"\nSCORE_MODIFIER = 50.0\n\nHEADERS = {\n        'Content-Type': 'application/x-www-form-urlencoded',\n        'User-Agent': 'phishtank/Siemplify'\n    }\n\ndef get_entity_original_identifier(entity):\n    \"\"\"\n    helper function for getting entity original identifier\n    :param entity: entity from which function will get original identifier\n    :return: {str} original identifier\n    \"\"\"\n    return entity.additional_properties.get('OriginalIdentifier', entity.identifier)\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    service_url = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME,\n                                                    param_name=\"Service Url\")\n    try:\n        status = EXECUTION_STATE_COMPLETED\n        output_message = \"No URL's were found in the current scope\"\n        result_value = 0\n        failed_entities = []\n        successfull_entities = []\n        not_in_db_entities = []\n        suspicious_entities = []\n        \n        result_json = {}\n        for entity in siemplify.target_entities:\n            if entity.entity_type == EntityTypes.URL:\n                try:\n                    siemplify.LOGGER.info(u\"Processing: {}\".format(entity.identifier))\n                    orig_url = entity.additional_properties.get('OriginalIdentifier', entity.identifier)\n    \n                    payload = {\"url\": orig_url, \"format\": \"json\"}\n                    res = requests.post(service_url, headers=HEADERS, params=payload)\n                    res.raise_for_status()\n                    data = xmltodict.parse(res.content)\n                    result_json[entity.identifier] = data.get(\"response\", {}).get(\"results\")\n                    \n                    score = 0\n                    # print(data)\n                    if str(data.get(\"response\", {}).get(\"results\").get(\"url0\", {}).get(\"in_database\")).lower() == \"true\":\n                        url_data = data.get(\"response\", {}).get(\"results\").get(\"url0\")\n                        message = u\"URL found with the following properties:\\nLink: {phish_detail_page}\\nVerified: {verified}\\nValid: {valid}\".format(\n                                    phish_detail_page=url_data.get(\"phish_detail_page\", \"None\"), \n                                    verified=url_data.get(\"verified\", \"None\"), \n                                    valid=url_data.get(\"valid\", \"None\"))\n                        score = SCORE_MODIFIER\n                        successfull_entities.append(entity)\n                        \n                        # mark suspicious if verified:\n                        if data.get(\"response\", {}).get(\"results\").get(\"url0\").get(\"verified\").lower() == 'true':\n                            entity.is_suspicious = True\n                            suspicious_entities.append(entity)\n    \n                    else:\n                        message = \"URL not found in Phishtank's database\"\n                        not_in_db_entities.append(entity)\n                \n                    result_json[entity.identifier][\"score\"] = score\n                    siemplify.add_entity_insight(entity, message, triggered_by=\"Phishing\")\n                except Exception as e:\n                    failed_entities.append(\"Failed for \\\"{}\\\" with error {}\".format(entity.identifier, e))\n                    raise Exception(data.get(\"response\", {}).get(\"results\").get(\"url0\"))\n        \n        if successfull_entities or suspicious_entities or not_in_db_entities or failed_entities:\n            output_message = \"\"\n        \n        if successfull_entities:\n            result_value = len(successfull_entities)\n            output_message += \"Found data in PhishTank database for {} URLs:\\n{}\".format(len(successfull_entities),\n                            \"\\n\".join([x.identifier for x in successfull_entities]))\n        if suspicious_entities:\n            siemplify.update_entities(suspicious_entities)\n            output_message += \"\\n\" + \"Out of which {} are verified:\\n{}\".format(len(suspicious_entities), \n                                                    \"\\n\".join([x.identifier for x in suspicious_entities]))\n        \n        if not_in_db_entities:\n            output_message += \"\\n\\n\\n\" + \"Following URLs do not appear in PhishTank database:\\n{}\".format(\n                                            \"\\n\".join([x.identifier for x in not_in_db_entities]))\n        \n        if failed_entities:\n            output_message += \"\\n\\n\" + \"Errors:\\n{}\".format(\"\\n\".join(failed_entities))\n        \n        if result_json:\n            siemplify.result.add_result_json(convert_dict_to_json_result_dict(result_json))\n    except Exception as e:\n        siemplify.LOGGER.error(\"General error performing action {}\".format(SCRIPT_NAME))\n        siemplify.LOGGER.exception(e)\n        status = EXECUTION_STATE_FAILED\n        result_value = \"Failed\"\n        output_message += \"\\n unknown failure\"\n        raise\n\n\n    siemplify.end(output_message, result_value, status)\n\n\nif __name__ == \"__main__\":\n    main()\n",
  "IntegrationIdentifier": "PhishTank",
  "ScriptResultName": "ScriptResult",
  "DynamicResultsMetadata": [
    {
      "ResultName": "JsonResult",
      "ResultExample": "[\n  {\n    \"EntityResult\": {\n      \"url0\": {\n        \"url\": \"https://babules.su/\",\n        \"in_database\": \"true\",\n        \"phish_id\": \"6605240\",\n        \"phish_detail_page\": \"http://www.phishtank.com/phish_detail.php?phish_id=6605240\",\n        \"verified\": \"true\",\n        \"verified_at\": \"2020-06-01T06:25:58+00:00\",\n        \"valid\": \"true\"\n      }\n    },\n    \"Entity\": \"HTTPS://WWW.ONLINESERVICETECH.WEBSITE/LINK/L/P70IPXZLZO2CEED77GJMLWWQXFQCJSVQBYNKZZ346JQYYIKTR6QGAMNQW4L-MXXYSSTIHAEIICD-W1IURFSBN6IUMCO4GWZ_1SBG-62FGIZQK3ZPNIST9WGCBTW-62BXD-FJP7TCWFBSQKVUBEVYLIF_DTC6OYGMQFXDSTFNDB_-CFFKQ4AZNFF13ZWONARJ\"\n  }\n]",
      "ShowResult": true
    }
  ],
  "Creator": "Alon",
  "IsEnabled": true,
  "IsCustom": false,
  "IsSystem": false,
  "Version": 27.0,
  "TimeoutSeconds": 300,
  "Parameters": [],
  "DefaultResultValue": "",
  "PythonVersion": "None",
  "Id": 0,
  "CreationTimeUnixTimeInMs": 1594721285564,
  "ModificationTimeUnixTimeInMs": 1594721285567
}