{
  "Name": "Get Authentication Logs for User",
  "Description": "Obtains the user data and authentication logs for a specified user over a number of days from now.\nAlso outputs lists of authentication sources that match a threshold (default 2). Useful to help determine if an auth source is normally seen.",
  "Script": "'''\nUses DUO's Python SDK: https://github.com/duosecurity/duo_client_python\nUses the DUO Admin API: https://duo.com/docs/adminapi\n\nObtains user, authentication and device data from DUO MFA on a specific user\nand collects last X days of Authentication Logs.\nNote: Requires DUO Admin API keys\n\nCreated by: jtdepalm@sentara.com\n'''\n\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import unix_now, convert_unixtime_to_datetime, output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED,EXECUTION_STATE_TIMEDOUT\n\nimport traceback\n\nINTEGRATION_NAME = \"DUO\"\nSCRIPT_NAME = \"DUO Get Authentication Logs\"\n\n@output_handler\ndef main():\n    import duo_client\n    import time\n    import json\n    siemplify = SiemplifyAction()\n    siemplify.script_name = SCRIPT_NAME\n    siemplify.LOGGER.info(\"----------------- Main - Started -----------------\")\n\n    result = True\n    status = EXECUTION_STATE_COMPLETED  # used to flag back to siemplify system, the action final status\n    def get_duo_user_data(username):\n        from time import sleep\n        duoApi = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME, param_name=\"API Hostname\")\n        adminSec = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME, param_name=\"Admin Secret Key\")\n        adminIntKey = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME, param_name=\"Admin Integration Key\")\n        try:\n            # Using SDK. Setup initial authentication\n            admin_api = duo_client.Admin(ikey=adminIntKey, skey=adminSec, host=duoApi)\n            # obtain target user's data from DUO. (needed to obtain user_id to request auth logs)\n            user_data = admin_api.get_users_by_name(username=username)\n            return user_data\n            \n        except Exception as e:\n            print(e)\n            # if error, possibly due to DUO rate limiting, wait and try again\n            sleep(60)\n            get_duo_user_data(username)\n    \n    def get_duo_auth_logs(timestamp_now, timestamp_x_days_ago, user_id):\n        from time import sleep\n        try:\n            user_auth_logs = admin_api.get_authentication_log(maxtime=timestamp_now, mintime=timestamp_x_days_ago, users=user_id, api_version=2)\n            return user_auth_logs\n        except Exception as e:\n            print(e)\n            sleep(60)\n            get_duo_auth_logs(timestamp_now, timestamp_x_days_ago, user_id)\n            \n    try:\n        # list to contain results from action\n        res = []\n        \n        duoApi = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME, param_name=\"API Hostname\")\n        adminSec = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME, param_name=\"Admin Secret Key\")\n        adminIntKey = siemplify.extract_configuration_param(provider_name=INTEGRATION_NAME, param_name=\"Admin Integration Key\")\n        \n        # ***parameters***\n        # target user to obtain logs from\n        username = siemplify.extract_action_param(\"Username\", print_value=True)\n        # number of days back to obtain logs\n        days_back = int(siemplify.extract_action_param(\"Number Days Back\", print_value=True))\n        # number of successful authentications to needed to trust an authentication source\n        auth_threshold = int(siemplify.extract_action_param(\"Authentication Threshold\", print_value=True))\n        \n        # log to compute number of days back\n        x_days_back = (86400*1000) * days_back\n        timestamp_now = int(time.time()*1000)\n        timestamp_x_days_ago = timestamp_now - x_days_back\n        \n        # Using SDK. Setup initial authentication\n        admin_api = duo_client.Admin(ikey=adminIntKey, skey=adminSec, host=duoApi)\n        # obtain target user's data from DUO. (needed to obtain user_id to request auth logs)\n        #user_data = admin_api.get_users_by_name(username=username)\n        user_data = get_duo_user_data(username)\n        \n        user_id = None\n        for data in user_data:\n            user_id = data['user_id']\n        \n        if user_id is not None:\n            # obtain auth logs for target user\n            #user_auth_logs = admin_api.get_authentication_log(maxtime=timestamp_now, mintime=timestamp_x_days_ago, users=user_id, api_version=2)\n            user_auth_logs = get_duo_auth_logs(timestamp_now, timestamp_x_days_ago, user_id)\n            # dictionaries to hold auth sources to later help with determining known good\n            count_access_ip = {}\n            count_access_state = {}\n            count_access_os = {}\n            count_access_app = {}\n            count_access_epkey = {}\n            count_auth_device = {}\n            count_factor = {}\n            if user_auth_logs:\n            \n                for auth in user_auth_logs['authlogs']:\n                    if auth['result'] == 'success':\n                        for key, value in auth.items():\n                            if \"access_device\" in key:\n                                if \"ip\" in value:\n                                    count_access_ip[value[\"ip\"]] = count_access_ip.get(value[\"ip\"], 0)+1\n                                if \"epkey\" in value:\n                                    count_access_epkey[value[\"epkey\"]] = count_access_epkey.get(value[\"epkey\"], 0)+1\n                                if \"location\" in value:\n                                    if \"state\" in value:\n                                        count_access_state[value['location']['state']] = count_access_state.get(value['location']['state'], 0)+1\n                                if \"os\" in value:\n                                    count_access_os[value['os']] = count_access_os.get(value['os'], 0)+1\n                            if \"application\" in key:\n                                if \"name\" in value:\n                                    count_access_app[value['name']] = count_access_app.get(value['name'], 0)+1\n                            if \"auth_device\" in key:\n                                if \"name\" in value:\n                                    count_auth_device[value['name']] = count_access_app.get(value['name'], 0)+1\n                            if \"factor\" in key:\n                                if value:\n                                    count_factor[value] = count_factor.get(value, 0)+1\n            # add auth source if an auth source matches the auth threshold\n            for key, value in list(count_access_ip.items()):\n                if value < auth_threshold:\n                    count_access_ip.pop(key, None)\n            for key, value in list(count_access_state.items()):\n                if value < auth_threshold:\n                    count_access_state.pop(key, None)\n            for key, value in list(count_auth_device.items()):\n                if value < auth_threshold:\n                    count_auth_device.pop(key, None)\n            for key, value in list(count_access_epkey.items()):\n                if value < auth_threshold:\n                    count_access_epkey.pop(key, None)\n                \n            # build final json results\n            results = {\n                \"username\":username,\n                \"user_id\": user_id,\n                \"user_data\": user_data,\n                \"user_auth_logs\": user_auth_logs,\n                \"count_access_epkey\":count_access_epkey,\n                \"count_access_ip\": count_access_ip,\n                \"count_access_state\": count_access_state,\n                \"count_access_os\": count_access_os,\n                \"count_access_app\": count_access_app,\n                \"count_auth_device\": count_auth_device,\n                \"count_factor\": count_factor\n            }\n            \n            res.append(results)\n            siemplify.result.add_result_json(res)\n            \n            json_result = json.dumps(res)\n            \n            output_message = \"Results: {}\".format(json_result)\n        \n        else:\n            output_message = \"No Username provided.\"\n        \n    except Exception as e:\n        result = False\n        status=EXECUTION_STATE_FAILED\n        #output_message = \"Failed. Error is: {}\".format(e)\n        output_message = \"Failed. Error is: {}\".format(traceback.format_exc())\n        \n    siemplify.LOGGER.info(\"----------------- Main - Finished -----------------\")\n    siemplify.LOGGER.info(\"Output Message: {}\".format(output_message))\n    siemplify.LOGGER.info(\"Result: {}\".format(result))\n    \n    siemplify.end(output_message, result, status)\n\n\nif __name__ == \"__main__\":\n    main()",
  "IntegrationIdentifier": "DUO",
  "ScriptResultName": "ScriptResult",
  "DynamicResultsMetadata": [
    {
      "ResultName": "JsonResult",
      "ResultExample": "{\"username\": \"someuser\", \"user_id\": \"ABCDEFGH1234LMNOPQ12\", \"user_data\": [{\"alias1\": null, \"alias2\": null, \"alias3\": null, \"alias4\": null, \"aliases\": {}, \"created\": 1488805062, \"desktoptokens\": [], \"email\": \"someuser@domain.com\", \"firstname\": \"USER T\", \"groups\": [{\"desc\": \"\", \"group_id\": \"123ABCEDOKIOUA123AW\", \"mobile_otp_enabled\": false, \"name\": \"GROUP_NAME (from AD sync \\\"CORP AD\\\")\", \"push_enabled\": false, \"sms_enabled\": false, \"status\": \"Active\", \"voice_enabled\": false}, {\"desc\": \"\", \"group_id\": \"POQ1298AS12QWEW12A\", \"mobile_otp_enabled\": false, \"name\": \"GROUP_NAME (from AD sync \\\"CORP AD\\\")\", \"push_enabled\": false, \"sms_enabled\": false, \"status\": \"Active\", \"voice_enabled\": false}, {\"desc\": \"\", \"group_id\": \"POQ1298AS12QWEW12A\", \"mobile_otp_enabled\": false, \"name\": \"GROUP_NAME (from AD sync \\\"CORP AD\\\")\", \"push_enabled\": false, \"sms_enabled\": false, \"status\": \"Active\", \"voice_enabled\": false}], \"is_enrolled\": true, \"last_directory_sync\": 1625051802, \"last_login\": 1625076630, \"lastname\": \"LASTNAME\", \"notes\": \"\", \"phones\": [{\"activated\": true, \"capabilities\": [\"auto\", \"push\", \"sms\", \"phone\", \"mobile_otp\"], \"encrypted\": \"Encrypted\", \"extension\": \"\", \"fingerprint\": \"Disabled\", \"last_seen\": \"2021-06-30T18:10:30\", \"model\": \"Phone Model A\", \"name\": \"\", \"number\": \"+12223334455\", \"phone_id\": \"ABCD1234\", \"platform\": \"PHONE OS\", \"postdelay\": \"\", \"predelay\": \"\", \"screenlock\": \"Locked\", \"sms_passcodes_sent\": true, \"tampered\": \"Not tampered\", \"type\": \"Mobile\"}], \"realname\": \"USER T LASTNAME\", \"status\": \"active\", \"tokens\": [{\"serial\": \"123OATH\", \"token_id\": \"1234567890\", \"totp_step\": null, \"type\": \"d1\"}, {\"serial\": \"122345\", \"token_id\": \"1234567890\", \"totp_step\": null, \"type\": \"yk\"}], \"u2ftokens\": [], \"user_id\": \"ABCDEFGH1234LMNOPQ12\", \"username\": \"someuser\", \"webauthncredentials\": []}], \"user_auth_logs\": {\"authlogs\": [{\"access_device\": {\"browser\": null, \"browser_version\": null, \"epkey\": null, \"flash_version\": null, \"hostname\": null, \"ip\": \"0.0.0.0\", \"is_encryption_enabled\": \"unknown\", \"is_firewall_enabled\": \"unknown\", \"is_password_set\": \"unknown\", \"java_version\": null, \"location\": {\"city\": null, \"country\": null, \"state\": null}, \"os\": null, \"os_version\": null}, \"alias\": \"unknown\", \"application\": {\"key\": \"ABCDE1234567890\", \"name\": \"NAME\"}, \"auth_device\": {\"ip\": \"0.0.0.0\", \"location\": {\"city\": \"City\", \"country\": \"Country\", \"state\": \"State\"}, \"name\": \"111-223-4455\"}, \"email\": null, \"event_type\": \"authentication\", \"factor\": \"duo_push\", \"isotimestamp\": \"2021-06-30T18:10:30.039040+00:00\", \"ood_software\": null, \"reason\": \"user_approved\", \"result\": \"success\", \"timestamp\": 1625076630, \"txid\": \"A12-B34-C56-D78\", \"user\": {\"groups\": [\"GROUP_NAME (from AD sync \\\"CORP AD\\\")\", \"GROUP_NAME (from AD sync \\\"CORP AD\\\")\", \"GROUP_NAME (from AD sync \\\"CORP AD\\\")\"], \"key\": \"ABCDEFGH1234LMNOPQ12\", \"name\": \"someuser\"}, \"eventtype\": \"authentication\", \"host\": \"api-xxxxxxxx.duosecurity.com\"}, {\"access_device\": {\"browser\": null, \"browser_version\": null, \"epkey\": null, \"flash_version\": null, \"hostname\": null, \"ip\": \"0.0.0.0\", \"is_encryption_enabled\": \"unknown\", \"is_firewall_enabled\": \"unknown\", \"is_password_set\": \"unknown\", \"java_version\": null, \"location\": {\"city\": null, \"country\": null, \"state\": null}, \"os\": null, \"os_version\": null}, \"alias\": \"unknown\", \"application\": {\"key\": \"ABCD1234\", \"name\": \"App Name\"}, \"auth_device\": {\"ip\": \"0.0.0.0\", \"location\": {\"city\": \"City\", \"country\": \"Country\", \"state\": \"State\"}, \"name\": \"111-223-4455\"}, \"email\": null, \"event_type\": \"authentication\", \"factor\": \"duo_push\", \"isotimestamp\": \"2021-06-30T13:48:43.406749+00:00\", \"ood_software\": null, \"reason\": \"user_approved\", \"result\": \"success\", \"timestamp\": 1625060923, \"txid\": \"A12-B34-C56\", \"user\": {\"groups\": [\"GROUP_NAME (from AD sync \\\"CORP AD\\\")\", \"GROUP_NAME (from AD sync \\\"CORP AD\\\")\", \"GROUP_NAME (from AD sync \\\"CORP AD\\\")\"], \"key\": \"ABCDEFGH1234LMNOPQ12\", \"name\": \"someuser\"}, \"eventtype\": \"authentication\", \"host\": \"api-xxxxxxxx.duosecurity.com\"}, {\"access_device\": {\"browser\": \"Chrome\", \"browser_version\": \"1\", \"epkey\": \"ABC123\", \"flash_version\": \"uninstalled\", \"hostname\": null, \"ip\": \"1.1.1.1\", \"is_encryption_enabled\": \"unknown\", \"is_firewall_enabled\": \"unknown\", \"is_password_set\": \"unknown\", \"java_version\": \"uninstalled\", \"location\": {\"city\": \"City\", \"country\": \"Country\", \"state\": \"State\"}, \"os\": \"Windows\", \"os_version\": \"10\"}, \"alias\": \"\", \"application\": {\"key\": \"ABC123\", \"name\": \"App Name\"}, \"auth_device\": {\"ip\": null, \"location\": {\"city\": null, \"country\": null, \"state\": null}, \"name\": null}, \"email\": \"someuser@domain.com\", \"event_type\": \"authentication\", \"factor\": \"not_available\", \"isotimestamp\": \"2021-06-30T13:26:59.565075+00:00\", \"ood_software\": null, \"reason\": \"trusted_network\", \"result\": \"success\", \"timestamp\": 1625059619, \"txid\": \"A12-B34-C56\", \"user\": {\"groups\": [\"GROUP_NAME (from AD sync \\\"CORP AD\\\")\", \"GROUP_NAME (from AD sync \\\"CORP AD\\\")\", \"GROUP_NAME (from AD sync \\\"CORP AD\\\")\"], \"key\": \"ABCDEFGH1234LMNOPQ12\", \"name\": \"someuser\"}, \"eventtype\": \"authentication\", \"host\": \"api-xxxxxxxx.duosecurity.com\"}, {\"access_device\": {\"browser\": null, \"browser_version\": null, \"epkey\": null, \"flash_version\": null, \"hostname\": null, \"ip\": \"0.0.0.0\", \"is_encryption_enabled\": \"unknown\", \"is_firewall_enabled\": \"unknown\", \"is_password_set\": \"unknown\", \"java_version\": null, \"location\": {\"city\": null, \"country\": null, \"state\": null}, \"os\": null, \"os_version\": null}, \"alias\": \"unknown\", \"application\": {\"key\": \"ABC1234\", \"name\": \"App Name\"}, \"auth_device\": {\"ip\": \"0.0.0.0\", \"location\": {\"city\": \"City\", \"country\": \"Country\", \"state\": \"State\"}, \"name\": \"111-223-4455\"}, \"email\": null, \"event_type\": \"authentication\", \"factor\": \"duo_push\", \"isotimestamp\": \"2021-06-30T13:04:03.255955+00:00\", \"ood_software\": null, \"reason\": \"user_approved\", \"result\": \"success\", \"timestamp\": 1625058243, \"txid\": \"ABC1234\", \"user\": {\"groups\": [\"GROUP_NAME (from AD sync \\\"CORP AD\\\")\", \"GROUP_NAME (from AD sync \\\"CORP AD\\\")\", \"GROUP_NAME (from AD sync \\\"CORP AD\\\")\"], \"key\": \"ABCDEFGH1234LMNOPQ12\", \"name\": \"someuser\"}, \"eventtype\": \"authentication\", \"host\": \"api-xxxxxxxx.duosecurity.com\"}, {\"access_device\": {\"browser\": \"Chrome Mobile WebView\", \"browser_version\": \"1\", \"epkey\": \"123456ABC\", \"flash_version\": \"uninstalled\", \"hostname\": null, \"ip\": \"2.2.2.2\", \"is_encryption_enabled\": \"unknown\", \"is_firewall_enabled\": \"unknown\", \"is_password_set\": \"unknown\", \"java_version\": \"uninstalled\", \"location\": {\"city\": \"City\", \"country\": \"Country\", \"state\": \"State\"}, \"os\": \"Phone OS\", \"os_version\": \"1\"}, \"alias\": \"\", \"application\": {\"key\": \"ABC123\", \"name\": \"App Name\"}, \"auth_device\": {\"ip\": \"2.2.2.2\", \"location\": {\"city\": \"City\", \"country\": \"Country\", \"state\": \"State\"}, \"name\": \"111-223-4455\"}, \"email\": \"someuser@domain.com\", \"event_type\": \"authentication\", \"factor\": \"duo_push\", \"isotimestamp\": \"2021-06-29T20:27:21.131349+00:00\", \"ood_software\": null, \"reason\": \"user_approved\", \"result\": \"success\", \"timestamp\": 1624998441, \"txid\": \"A12-B34-C56\", \"user\": {\"groups\": [\"GROUP_NAME (from AD sync \\\"CORP AD\\\")\", \"GROUP_NAME (from AD sync \\\"CORP AD\\\")\", \"GROUP_NAME (from AD sync \\\"CORP AD\\\")\"], \"key\": \"ABCDEFGH1234LMNOPQ12\", \"name\": \"someuser\"}, \"eventtype\": \"authentication\", \"host\": \"api-xxxxxxxx.duosecurity.com\"}], \"metadata\": {\"next_offset\": [\"1624998441131\", \"A12-B34-C56\"], \"total_objects\": 5}}}",
      "ShowResult": true
    }
  ],
  "Creator": "John",
  "IsEnabled": true,
  "IsCustom": false,
  "IsSystem": false,
  "Version": 41.0,
  "TimeoutSeconds": 300,
  "Parameters": [
    {
      "CustomActionId": 0,
      "IsMandatory": true,
      "DefaultValue": "2",
      "Description": "Number of successful authentications to indicate a source may be from a known safe entity.",
      "Name": "Authentication Threshold",
      "Value": "2",
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1635867769788,
      "ModificationTimeUnixTimeInMs": 1635867769788
    },
    {
      "CustomActionId": 0,
      "IsMandatory": true,
      "DefaultValue": "1",
      "Description": "Number of days back to obtain authentication logs from.\nDefault 1 day",
      "Name": "Number Days Back",
      "Value": "1",
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1635867769788,
      "ModificationTimeUnixTimeInMs": 1635867769788
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": "",
      "Description": "Username to retrieve logs for.",
      "Name": "Username",
      "Value": "",
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1635867769788,
      "ModificationTimeUnixTimeInMs": 1635867769788
    }
  ],
  "DefaultResultValue": "",
  "PythonVersion": "None",
  "SimulationData": {
    "Entities": null
  },
  "SimulationDataJson": null,
  "Id": 0,
  "CreationTimeUnixTimeInMs": 1635867769775,
  "ModificationTimeUnixTimeInMs": 1635867769778
}