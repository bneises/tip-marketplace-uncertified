{
  "Name": "Pull Content",
  "Integration": "GitSync",
  "Script": "import json\nfrom base64 import b64encode\n\nfrom GitSyncManager import GitSyncManager\nfrom SiemplifyJob import SiemplifyJob\nfrom SiemplifyUtils import output_handler\n\nSCRIPT_NAME = \"Pull Environment\"\n\n\n@output_handler\ndef main():\n    siemplify = SiemplifyJob()\n    siemplify.script_name = SCRIPT_NAME\n\n    try:\n        gitsync = GitSyncManager.from_siemplify_object(siemplify)\n        env = gitsync.pull_environment()\n\n        siemplify.LOGGER.info(\"Installing Dynamic parameters\")\n        for dynParam in env.settings.dynamicParameters:\n            gitsync.api.add_dynamic_env_param(dynParam)\n\n        siemplify.LOGGER.info(\"Installing Environments\")\n        for environment in env.settings.environments:\n            gitsync.api.import_environment(environment)\n\n        siemplify.LOGGER.info(\"Installing integrations\")\n        installed_integrations = gitsync.api.get_ide_cards()\n        marketplace_integrations = None\n        for integration in env.integrations:\n            if integration.identifier == \"GitSync\":  # Could overwrite with older version\n                continue\n            siemplify.LOGGER.info(f\"Installing {integration.identifier}\")\n            if integration.isCustom:\n                gitsync.api.import_package(integration.identifier,\n                                           b64encode(integration.zip_buffer.getvalue()).decode('utf-8'))\n            else:\n                if integration.identifier not in [x[\"identifier\"] for x in installed_integrations]:\n                    if not marketplace_integrations:\n                        marketplace_integrations = gitsync.api.get_store_data()\n                    try:\n                        store_integration = next(\n                            x for x in marketplace_integrations if x[\"identifier\"] == integration.identifier)\n                    except StopIteration:\n                        siemplify.LOGGER.warn(\n                            f\"Integration {integration.identifier} not found in marketplace. Skipping.\")\n                        continue\n                    try:\n                        gitsync.api.install_integration(integration.identifier, store_integration[\"version\"],\n                                                        store_integration[\"isCertified\"])\n                    except Exception as e:\n                        siemplify.LOGGER.info(f\"Couldn't install integration: {integration.identifier}. Error: {e}\")\n                        continue\n                    installed_integrations = gitsync.api.get_ide_cards()\n                integration_cards = \\\n                    next(x for x in installed_integrations if x[\"identifier\"] == integration.identifier)['cards']\n                for script in integration.actions + integration.jobs + integration.connectors + integration.managers:\n                    item_card = next((x for x in integration_cards if x[\"name\"] == script[\"name\"]), None)\n                    if item_card:\n                        script[\"id\"] = item_card[\"id\"]\n                    gitsync.api.update_ide_item(script)\n\n        siemplify.LOGGER.info(f\"Configuring Integration instances\")\n        for instance in env.settings.integrationInstances:\n            if instance['integrationIdentifier'] != \"GitSync\":\n                new_instance = gitsync.api.create_integrations_instance(instance['integrationIdentifier'],\n                                                                        instance[\"environment\"])\n                for i in instance[\"settings\"][\"settings\"]:\n                    i[\"integrationInstance\"] = new_instance['identifier']\n                gitsync.api.save_integration_instance_settings(new_instance['identifier'], instance[\"settings\"])\n\n        siemplify.LOGGER.info(f\"Installing playbooks\")\n        for playbook in env.playbooks:\n            gitsync.api.save_playbook(playbook.raw_data)\n\n        siemplify.LOGGER.info(f\"Installing connectors\")\n        for connector in env.connectors:\n            gitsync.api.update_connector(connector.raw_data)\n\n        siemplify.LOGGER.info(f\"Installing jobs\")\n        for job in env.jobs:\n            gitsync.api.add_job(json.loads(job.content))\n\n        siemplify.LOGGER.info(f\"Installing tags\")\n        for tag in env.settings.tags:\n            gitsync.api.add_case_tag(tag)\n\n        siemplify.LOGGER.info(f\"Installing stages\")\n        for stage in env.settings.stages:\n            gitsync.api.add_case_stage(stage)\n\n        siemplify.LOGGER.info(f\"Installing case close reasons\")\n        for cause in env.settings.caseCloseCauses:\n            gitsync.api.add_close_reason(cause)\n\n        siemplify.LOGGER.info(f\"Installing case title settings\")\n        gitsync.api.save_case_title_settings(env.settings.caseTitles)\n\n        siemplify.LOGGER.info(f\"Installing visual families\")\n        for family in env.visualFamilies:\n            gitsync.api.add_custom_family(family)\n\n        siemplify.LOGGER.info(f\"Installing mappings\")\n        for mapping in env.mappings:\n            for rule in mapping.rules:\n                gitsync.api.add_mapping_rules(rule['familyFields'])\n                gitsync.api.add_mapping_rules(rule['systemFields'])\n\n            for record in mapping.records:\n                gitsync.api.set_mappings_visual_family(record.get(\"source\"), record.get(\"product\"),\n                                                       record.get(\"eventName\"), record.get(\"familyName\"))\n\n        siemplify.LOGGER.info(f\"Installing networks\")\n        for network in env.settings.networks:\n            gitsync.api.update_network(network)\n\n        siemplify.LOGGER.info(f\"Installing domains\")\n        for domain in env.settings.domains:\n            gitsync.api.update_domain(domain)\n\n        siemplify.LOGGER.info(f\"Installing custom lists\")\n        for lst in env.settings.customLists:\n            gitsync.api.update_custom_list(lst)\n\n        siemplify.LOGGER.info(f\"Installing email templates\")\n        for template in env.settings.emailTemplates:\n            gitsync.api.add_email_template(template)\n\n        siemplify.LOGGER.info(f\"Installing blacklists\")\n        for bl in env.settings.blacklists:\n            gitsync.api.update_blacklist(bl)\n\n        siemplify.LOGGER.info(f\"Installing SLA definition\")\n        for definition in env.settings.slaDefinitions:\n            gitsync.api.update_sla_record(definition)\n\n\n    except Exception as e:\n        siemplify.LOGGER.error(\"General error performing Job {}\".format(SCRIPT_NAME))\n        siemplify.LOGGER.exception(e)\n        raise\n\n    siemplify.end_script()\n\n\nif __name__ == \"__main__\":\n    main()\n",
  "Creator": "Admin",
  "RunIntervalInSeconds": 900,
  "Description": "Installs content from the repo.",
  "IsEnabled": true,
  "IsCustom": false,
  "Version": 1,
  "IsSystem": false,
  "Parameters": [
    {
      "JobDefinitionId": 0,
      "IsMandatory": false,
      "DefaultValue": "",
      "Description": "Optional parameter to override the one found in the integration instance",
      "Name": "Repo URL",
      "Type": 2,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1625475150802,
      "ModificationTimeUnixTimeInMs": 1625475150802
    },
    {
      "JobDefinitionId": 0,
      "IsMandatory": false,
      "DefaultValue": null,
      "Description": "Optional parameter to override the one found in the integration instance",
      "Name": "Branch",
      "Type": 2,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1625475150802,
      "ModificationTimeUnixTimeInMs": 1625475150802
    },
    {
      "Id": 0,
      "JobDefinitionId": 0,
      "CreationTimeUnixTimeInMs": 1628166627774,
      "ModificationTimeUnixTimeInMs": 1628166627774,
      "DefaultValue": "true",
      "Description": "Pull all custom integrations and custom code. Commercial integrations should be installed before running",
      "IsMandatory": true,
      "Name": "Integrations",
      "Type": 0
    },
    {
      "Id": 0,
      "JobDefinitionId": 0,
      "CreationTimeUnixTimeInMs": 1628166627774,
      "ModificationTimeUnixTimeInMs": 1628166627774,
      "DefaultValue": "true",
      "Description": "Pull all playbooks. Will add or update playbooks based on their name",
      "IsMandatory": true,
      "Name": "Playbooks",
      "Type": 0
    },
    {
      "Id": 0,
      "JobDefinitionId": 0,
      "CreationTimeUnixTimeInMs": 1628166627774,
      "ModificationTimeUnixTimeInMs": 1628166627774,
      "DefaultValue": "true",
      "Description": "Pull all jobs",
      "IsMandatory": true,
      "Name": "Jobs",
      "Type": 0
    },
    {
      "Id": 0,
      "JobDefinitionId": 0,
      "CreationTimeUnixTimeInMs": 1628166627774,
      "ModificationTimeUnixTimeInMs": 1628166627774,
      "DefaultValue": "true",
      "Description": "Pull all connectors",
      "IsMandatory": true,
      "Name": "Connectors",
      "Type": 0
    },
    {
      "Id": 0,
      "JobDefinitionId": 0,
      "CreationTimeUnixTimeInMs": 1628166627774,
      "ModificationTimeUnixTimeInMs": 1628166627774,
      "DefaultValue": "true",
      "Description": "Pull all integration instances. Passwords will be overwritten if not uploaded",
      "IsMandatory": true,
      "Name": "Integration Instances",
      "Type": 0
    },
    {
      "Id": 0,
      "JobDefinitionId": 0,
      "CreationTimeUnixTimeInMs": 1628166627774,
      "ModificationTimeUnixTimeInMs": 1628166627774,
      "DefaultValue": "true",
      "Description": "Pulls all visual families",
      "IsMandatory": true,
      "Name": "Visual Families",
      "Type": 0
    },
    {
      "Id": 0,
      "JobDefinitionId": 0,
      "CreationTimeUnixTimeInMs": 1628166627774,
      "ModificationTimeUnixTimeInMs": 1628166627774,
      "DefaultValue": "true",
      "Description": "Pulls all the mappings",
      "IsMandatory": true,
      "Name": "Mappings",
      "Type": 0
    },
    {
      "Id": 0,
      "JobDefinitionId": 0,
      "CreationTimeUnixTimeInMs": 1628166627774,
      "ModificationTimeUnixTimeInMs": 1628166627774,
      "DefaultValue": "true",
      "Description": "Creates or updates all environments",
      "IsMandatory": true,
      "Name": "Environments",
      "Type": 0
    },
    {
      "Id": 0,
      "JobDefinitionId": 0,
      "CreationTimeUnixTimeInMs": 1628166627774,
      "ModificationTimeUnixTimeInMs": 1628166627774,
      "DefaultValue": "true",
      "Description": "Creates or updates all environment dynamic parameters",
      "IsMandatory": true,
      "Name": "Dynamic Parameters",
      "Type": 0
    },
    {
      "Id": 0,
      "JobDefinitionId": 0,
      "CreationTimeUnixTimeInMs": 1628166627774,
      "ModificationTimeUnixTimeInMs": 1628166627774,
      "DefaultValue": "true",
      "Description": "Pull custom logo",
      "IsMandatory": true,
      "Name": "Logo",
      "Type": 0
    },
    {
      "Id": 0,
      "JobDefinitionId": 0,
      "CreationTimeUnixTimeInMs": 1628166627774,
      "ModificationTimeUnixTimeInMs": 1628166627774,
      "DefaultValue": "true",
      "Description": "Pulls all case tags",
      "IsMandatory": true,
      "Name": "Case Tags",
      "Type": 0
    },
    {
      "Id": 0,
      "JobDefinitionId": 0,
      "CreationTimeUnixTimeInMs": 1628166627774,
      "ModificationTimeUnixTimeInMs": 1628166627774,
      "DefaultValue": "true",
      "Description": "Pulls all case stages",
      "IsMandatory": true,
      "Name": "Case Stages",
      "Type": 0
    },
    {
      "Id": 0,
      "JobDefinitionId": 0,
      "CreationTimeUnixTimeInMs": 1628166627774,
      "ModificationTimeUnixTimeInMs": 1628166627774,
      "DefaultValue": "true",
      "Description": "Pulls case title settings",
      "IsMandatory": true,
      "Name": "Case Title Settings",
      "Type": 0
    },
    {
      "Id": 0,
      "JobDefinitionId": 0,
      "CreationTimeUnixTimeInMs": 1628166627774,
      "ModificationTimeUnixTimeInMs": 1628166627774,
      "DefaultValue": "true",
      "Description": "Pulls custom case close reasons",
      "IsMandatory": true,
      "Name": "Case Close Reasons",
      "Type": 0
    },
    {
      "Id": 0,
      "JobDefinitionId": 0,
      "CreationTimeUnixTimeInMs": 1628166627774,
      "ModificationTimeUnixTimeInMs": 1628166627774,
      "DefaultValue": "true",
      "Description": "Pull networds",
      "IsMandatory": true,
      "Name": "Networks",
      "Type": 0
    },
    {
      "Id": 0,
      "JobDefinitionId": 0,
      "CreationTimeUnixTimeInMs": 1628166627774,
      "ModificationTimeUnixTimeInMs": 1628166627774,
      "DefaultValue": "true",
      "Description": "Pull domains",
      "IsMandatory": true,
      "Name": "Domains",
      "Type": 0
    },
    {
      "Id": 0,
      "JobDefinitionId": 0,
      "CreationTimeUnixTimeInMs": 1628166627774,
      "ModificationTimeUnixTimeInMs": 1628166627774,
      "DefaultValue": "true",
      "Description": "Pull custom lists",
      "IsMandatory": true,
      "Name": "Custom Lists",
      "Type": 0
    },
    {
      "Id": 0,
      "JobDefinitionId": 0,
      "CreationTimeUnixTimeInMs": 1628166627774,
      "ModificationTimeUnixTimeInMs": 1628166627774,
      "DefaultValue": "true",
      "Description": "Pull email templates",
      "IsMandatory": true,
      "Name": "Email Templates",
      "Type": 0
    },
    {
      "Id": 0,
      "JobDefinitionId": 0,
      "CreationTimeUnixTimeInMs": 1628166627774,
      "ModificationTimeUnixTimeInMs": 1628166627774,
      "DefaultValue": "true",
      "Description": "Pull blocklists",
      "IsMandatory": true,
      "Name": "Blacklists",
      "Type": 0
    },
    {
      "Id": 0,
      "JobDefinitionId": 0,
      "CreationTimeUnixTimeInMs": 1628166627774,
      "ModificationTimeUnixTimeInMs": 1628166627774,
      "DefaultValue": "true",
      "Description": "Pull SLA Records",
      "IsMandatory": true,
      "Name": "SLA Records",
      "Type": 0
    }
  ],
  "PythonVersion": "None",
  "Id": 0,
  "CreationTimeUnixTimeInMs": 1625475150703,
  "ModificationTimeUnixTimeInMs": 1625475150752
}