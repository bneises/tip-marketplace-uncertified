{
  "IsEnabled": true,
  "IsCustom": true,
  "Integration": "Cybersixgill Darkfeed",
  "DocumentationLink": null,
  "Name": "Cybersixgill - Darkfeed Connector",
  "Description": "Powered by the broadest, automated collection from the deep and dark web, Cybersixgill Darkfeed is a feed of malicious indicators of compromise (IOCs), including domains, URLs, hashes and IP addresses. IOCs are automatically extracted and delivered in real-time, and it is actionable, allowing Siemplify customers to receive and preemptively block items that threaten their organization.",
  "Creator": "Admin",
  "Script": "from SiemplifyConnectors import SiemplifyConnectorExecution\nfrom SiemplifyConnectorsDataModel import AlertInfo\nfrom SiemplifyUtils import output_handler, unix_now\n\n\nfrom sixgill.sixgill_constants import FeedStream\nfrom sixgill.sixgill_feed_client import SixgillFeedClient\nfrom sixgill.sixgill_utils import is_indicator\n\n\nimport json\nimport sys\nimport re\nimport traceback\n\n# ==============================================================================\n# This is a Connector Template + mock generator. This file objective is to demonstrate how to build a connector, and exmplain the objective of each field.\n# All the data generated here, is MOCK data. Enjoy.\n# ==============================================================================\n\nCONNECTOR_NAME = \"CyberSixgill Darkfeed\"\nVENDOR = \"Cybersixgill\"\nPRODUCT = \"Cybersixgill Darkfeed\"\nRULE_GENERATOR_EXAMPLE = \"CyberSixgill Darkfeed\"\nSIXGILL_CHANNEL_ID = \"1f4fdd520d3a721799fc0d044283d364\"\n\n\nsiemplify = SiemplifyConnectorExecution()  # Siemplify main SDK wrapper\nsiemplify.script_name = CONNECTOR_NAME\n\n\n@output_handler\ndef main(is_test_run):\n    alerts = []  # The main output of each connector run\n\n    if (is_test_run):\n        siemplify.LOGGER.info(\"***** This is an \\\"IDE Play Button\\\"\\\\\\\"Run Connector once\\\" test run ******\")\n\n    siemplify.LOGGER.info(\"==================== Main - Param Init ====================\")\n    client_id = siemplify.extract_connector_param(\"Client Id\", default_value=None, input_type=str, is_mandatory=True,\n                                                  print_value=True)\n    client_secret = siemplify.extract_connector_param(\"Client Secret\", default_value=None, input_type=str,\n                                                      is_mandatory=True, print_value=True)\n    bulk_size = siemplify.extract_connector_param(\"Alerts Limit\", default_value=None, input_type=int,\n                                                        is_mandatory=True, print_value=True)\n    siemplify.LOGGER.info(\"------------------- Main - Started -------------------\")\n    sixgill_client = create_sixgill_client_obj(client_id, client_secret, SIXGILL_CHANNEL_ID, bulk_size)\n    records = query_sixgill(sixgill_client)\n    siemplify.LOGGER.info(\"True\")\n    if records:\n        for rec in records:\n            try:\n                if not rec.get('revoked', False):\n                    alert_data = fetch_alert(siemplify, rec)\n                if alert_data:\n                    siemplify.LOGGER.info(\"\\n\\n\\n\")\n                    siemplify.LOGGER.info(alert_data)\n                    siemplify.LOGGER.info(\"\\n\\n\\n\")\n                    alerts.append(alert_data)\n            except Exception as e:\n                siemplify.LOGGER.exception(e)\n    sixgill_client.commit_indicators()\n    siemplify.LOGGER.info(\"------------------- Main - Finished -------------------\")\n    siemplify.return_package(alerts)\n\n\ndef fetch_alert(siemplify, record_data):\n    \"\"\"Returns an alert, which is an aggregation of basic events. (ie: Arcsight's correlation, QRadar's Offense)\"\"\"\n\n    alert_info = AlertInfo()\n    # ----------------------------- Alert Fields initilization START -----------------------------\n    # ... Replace this DUMMY VALUES !!! ...\n    # Each alert_info has a unique key composed of alert_info.name+alert_info.display_id. This key is used to validate data is digested only once by the Siemplify System - to avoid duplicates.\n    # If an alert_info has a uniqe_key that has already been digested, it will be ignored.\n    # The uniqueness must be persistent, even after server restart\\ refetching of the same alert, multiple runs of the same API queries, etc.\n    alert_info.display_id = record_data.get(\"id\")[11:]\n    alert_info.ticket_id = record_data.get(\"id\")[\n                           11:]  # In default, ticket_id = display_id. But, if for some reason the external alert id, is different then the composite's key display_id, you can save the original external alert id in this \"ticket_id\" field.\n    alert_info.name = record_data.get(\"description\")\n    alert_info.rule_generator = RULE_GENERATOR_EXAMPLE  # Describes the name of the siem's rule, that caused the aggregation of the alert.\n    alert_info.start_time = unix_now()  # Times should be saved in UnixTime. You may use SiemplifyUtils.convert_datetime_to_unix_time, or SiemplifyUtils.convert_string_to_datetime\n    alert_info.end_time = unix_now()  # Times should be saved in UnixTime. You may use SiemplifyUtils.convert_datetime_to_unix_time, or SiemplifyUtils.convert_string_to_datetime\n    alert_info.priority = 60  # Informative = -1,Low = 40,Medium = 60,High = 80,Critical = 100.\n    alert_info.device_vendor = VENDOR  # This field, may be fetched from the Original Alert. If you build this alert manualy, Describe the source vendor of the data. (ie: Microsoft, Mcafee)\n    alert_info.device_product = PRODUCT  # This field, may be fetched from the Original Alert. If you build this alert manualy, Describe the source product of the data. (ie: ActiveDirectory, AntiVirus)\n    event_info = fetch_event(siemplify, record_data)\n    alert_info.events.append(event_info)\n    return alert_info\n\n\ndef query_sixgill(sixgill_client):\n    records_object = None\n    try:\n        raw_response = sixgill_client.get_bundle()\n        records_object = list(filter(is_indicator, raw_response.get(\"objects\", [])))\n    except Exception as err:\n        siemplify.LOGGER.error(err)\n        siemplify.LOGGER.error(traceback.format_exc())\n    return records_object\n\n\ndef get_external_reference(event, record_data):\n    try:\n        for obj in record_data.get(\"external_reference\", []):\n            if obj.get(\"source_name\", \"\") == \"VirusTotal\":\n                event[\"SixgillVirustotalPR\"] = obj.get(\"positive_rate\")\n                event[\"SixgillVirustotalUrl\"] = obj.get(\"url\")\n            if obj.get(\"source_name\", \"\") == \"mitre-attack\":\n                event[\"SixgillMitreDescription\"] = obj.get(\"description\")\n                event[\"SixgillMitreTactic\"] = obj.get(\"mitre_attack_tactic\")\n                event[\"SixgillMitreTacticId\"] = obj.get(\"mitre_attack_tactic_id\")\n                event[\"SixgillMitreTacticUrl\"] = obj.get(\"mitre_attack_tactic_url\")\n    except Exception as err:\n        siemplify.LOGGER.error(err)\n    return event\n\n\ndef fetch_event(siemplify, record_data):\n    REGEX_PARSER = re.compile(r\"([\\w-]+?):(\\w.+?) (?:[!><]?=|IN|MATCHES|LIKE) '(.*?)' *[OR|AND|FOLLOWEDBY]?\")\n    event = {}\n    # ----------- Mandatory Fields ---------------\n    # A valid event must have a \"Start Time\", \"End Time\", \"Name\", and \"Device Product\". Their name is not important (What ever it is, it will be mapped).\n    # ie: \"Start Time\" may be called \"Start Time\", \"StartTime\", \"start_time\", \"johnDoeStartTime\"\n    event[\n        \"StartTime\"] = unix_now()  # Times should be saved in UnixTime. You may use SiemplifyUtils.convert_datetime_to_unix_time, or SiemplifyUtils.convert_string_to_datetime\n    event[\n        \"EndTime\"] = unix_now()  # Times should be saved in UnixTime. You may use SiemplifyUtils.convert_datetime_to_unix_time, or SiemplifyUtils.convert_string_to_datetime\n    event[\"name\"] = record_data.get(\"description\")\n    event[\n        \"device_product\"] = PRODUCT  # ie: \"device_product\" is the field name in arcsight that describes the product the event originated from.\n    # ----------------------------- ---------------\n    # You are not expected to fill them yourself, just pass them along from the siem. Since this is a dummy generator, We create them manaualy with made up name (PascalCase\\CcmelCase doesn't matter)\n    for indicator_type, sub_type, value in REGEX_PARSER.findall(record_data.get(\"pattern\", \"\")):\n        if indicator_type == \"file\":\n            if \"MD5\" in sub_type:\n                event[\"Sixgill_MD5_IOC\"] = value\n            elif \"SHA-1\" in sub_type:\n                event[\"Sixgill_SHA-1_IOC\"] = value\n            elif \"SHA-256\" in sub_type:\n                event[\"Sixgill_SHA-256_IOC\"] = value\n        elif indicator_type == \"url\":\n            event[\"Sixgill_URL_IOC\"] = value\n        elif indicator_type == \"domain-name\":\n            event[\"Sixgill_Domain_IOC\"] = value\n        elif indicator_type == \"ipv4-addr\":\n            event[\"Sixgill_IP_IOC\"] = value\n    event[\"Sixgill_RawJson\"] = json.dumps(record_data)\n    event[\"SixgillDescription\"] = record_data.get(\"description\")\n    event[\"SixgillFeedname\"] = record_data.get(\"sixgill_feedname\")\n    event[\"SixgillSource\"] = record_data.get(\"sixgill_source\")\n    event[\"SixgillPostTitle\"] = record_data.get(\"sixgill_posttitle\")\n    event[\"SixgillActor\"] = record_data.get(\"sixgill_actor\")\n    event[\"SixgillPostID\"] = \"https://portal.cybersixgill.com/#/search?q=_id:\" + record_data.get(\"sixgill_postid\", \"\")\n    event[\"SixgillLabels\"] = \",\".join(record_data.get(\"labels\"))\n    event[\"SixgillConfidence\"] = record_data.get(\"sixgill_confidence\")\n    event[\"SixgillSeverity\"] = record_data.get(\"sixgill_severity\")\n    event[\"SixgillCreated\"] = record_data.get(\"created\")\n    event[\"SixgillModified\"] = record_data.get(\"modified\")\n    event[\"SixgillValidFrom\"] = record_data.get(\"valid_from\")\n\n    event = get_external_reference(event, record_data)\n\n    return event\n\n\ndef create_sixgill_client_obj(client_id, client_secret, channel_id, bulk_size):\n    \"\"\"This create a sixgill client object\n\n    Returns:\n        sixgill.sixgill_feed_client.SixgillFeedClient -- Sixgill Client object\n    \"\"\"\n    sixgill_darkfeed_client = None\n    try:\n        sixgill_darkfeed_client = SixgillFeedClient(\n            client_id, client_secret, channel_id, FeedStream.DARKFEED, bulk_size=bulk_size, verify=True)\n    except Exception as err:\n        siemplify.LOGGER.error(\"create_sixgill_client_obj - Error - \" + str(err))\n        siemplify.LOGGER.info(traceback.format_exc())\n    return sixgill_darkfeed_client\n\n\nif __name__ == \"__main__\":\n    # Connectors are run in iterations. The interval is configurable from the ConnectorsScreen UI.\n    is_test_run = not (len(sys.argv) < 2 or sys.argv[1] == 'True')\n    main(is_test_run)\n",
  "Version": 42,
  "MappingRules": [],
  "ProductToVisualFamilyRecords": [],
  "SimulationUseCases": {
    "CasesForUseCase": [],
    "UseCaseName": null
  },
  "Parameters": [
    {
      "ConnectorDefinitionId": 15,
      "IsMandatory": true,
      "DefaultValue": "30",
      "Name": "PythonProcessTimeout",
      "Type": 2,
      "Mode": 0,
      "Description": "The timeout limit (in seconds) for the python process running current script",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1621857347630,
      "ModificationTimeUnixTimeInMs": 1621857347630
    },
    {
      "ConnectorDefinitionId": 15,
      "IsMandatory": true,
      "DefaultValue": "Cybersixgill Darkfeed ",
      "Name": "EventClassId",
      "Type": 2,
      "Mode": 0,
      "Description": "The field name used to determine the event name (sub-type)",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1621857347630,
      "ModificationTimeUnixTimeInMs": 1621857347630
    },
    {
      "ConnectorDefinitionId": 15,
      "IsMandatory": true,
      "DefaultValue": "Cybersixgill Darkfeed ",
      "Name": "DeviceProductField",
      "Type": 2,
      "Mode": 0,
      "Description": "The field name used to determine the device product",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1621857347630,
      "ModificationTimeUnixTimeInMs": 1621857347630
    },
    {
      "ConnectorDefinitionId": 15,
      "IsMandatory": true,
      "DefaultValue": "",
      "Name": "Client Secret",
      "Type": 3,
      "Mode": 2,
      "Description": "Secret Key",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1621857347630,
      "ModificationTimeUnixTimeInMs": 1621857347630
    },
    {
      "ConnectorDefinitionId": 15,
      "IsMandatory": true,
      "DefaultValue": "Client_Id",
      "Name": "Client Id",
      "Type": 2,
      "Mode": 2,
      "Description": "Client ID",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1621857347630,
      "ModificationTimeUnixTimeInMs": 1621857347630
    },
    {
      "ConnectorDefinitionId": 15,
      "IsMandatory": true,
      "DefaultValue": "20",
      "Name": "Alerts Limit",
      "Type": 1,
      "Mode": 2,
      "Description": "Number of alerts to be ingested into the platform",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1621857347630,
      "ModificationTimeUnixTimeInMs": 1621857347630
    }
  ],
  "Rules": [],
  "IsConnectorRulesSupported": true,
  "IsSystem": false,
  "PythonVersion": "None",
  "Id": 0,
  "CreationTimeUnixTimeInMs": 1621516898655,
  "ModificationTimeUnixTimeInMs": 1621857347623
}