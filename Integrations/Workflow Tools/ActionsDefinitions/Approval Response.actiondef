{
  "Name": "Approval Response",
  "Description": "Allow a user to respond to an approval request, and allow or deny the request.",
  "Script": "from SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import unix_now, convert_unixtime_to_datetime, output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED,EXECUTION_STATE_TIMEDOUT\nfrom WorkflowToolsManager import WorkflowToolsManager\n\n\nMSG_APPROVED = \":large_green_circle: Case <{0}/#/main/cases/classic-view/{1}|{1}> has been *approved* by {2}.\"\n\nMSG_DENIED = \":red_circle: Case <{0}/#/main/cases/classic-view/{1}|{1}> has been *denied* for workflow approval by {2}.\"\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    \n    output_message = \"Action Denied\"  # human readable message, showed in UI as the action result\n    result_value = False  # Set a simple result value, used for playbook if\\else and placeholders.\n    json_result = {\"reason\":\"\", \"reviewer\":\"\", \"review_comments\":\"\", \"approved\":False}\n\n    api_key = siemplify.extract_configuration_param('Workflow Tools',\"Siemplify API Key\")\n    api_root = siemplify.extract_configuration_param('Workflow Tools',\"Siemplify API Root\")\n    siemplify_hostname = siemplify.extract_configuration_param('Workflow Tools',\"Siemplify Instance Hostname\")\n    slack_webhook_url = siemplify.extract_configuration_param('Workflow Tools',\"Slack Webhook URL\")\n    # The user that is permitted to continue this action\n    reviewer = siemplify.extract_configuration_param('Workflow Tools', \"Approval Manager\")\n    reviewer_secondary = siemplify.extract_configuration_param('Workflow Tools', \"Secondary Approval Manager\",\n                                             default_value=\"\", input_type=str)\n    response_comments = siemplify.extract_action_param(\"Response Comments\", print_value=True,\n                                             default_value=\"\", input_type=str)\n    approval_result = siemplify.extract_action_param(\"Action Approved\", print_value=True, input_type=bool)\n    \n    manager = WorkflowToolsManager(siemplify_hostname=siemplify_hostname, api_root=api_root, api_key=api_key, siemplify=siemplify, slack_webhook_url=slack_webhook_url)\n    \n    # The ID of the case\n    case_id = siemplify.case.identifier\n    # The ID of the current alert\n    alert_id = siemplify.current_alert.identifier\n    # The user that's requesting to interact with this action\n    requesting_user = siemplify.original_requesting_user\n    \n    siemplify.LOGGER.info(\"Beginning Processing of Case {}\".format(case_id))\n    siemplify.LOGGER.info(\"Alert ID {}\".format(alert_id))\n    \n    siemplify.LOGGER.info(\"Original Requesting User {}\".format(siemplify.original_requesting_user))\n    \n    ### STEP 1: Check if the current user is allowed to continue this action.\n    \n    if(manager.check_user(current_user=requesting_user, approval_manager=reviewer) or\n        manager.check_user(current_user=requesting_user, approval_manager=reviewer_secondary)):\n        siemplify.LOGGER.info(\"Case {} is assigned to required reviewer {}. Continuing action.\".format(case_id, reviewer))\n        response_message = \"\"\n        \n        if(approval_result):\n            response_message = MSG_APPROVED.format(manager.siemplify_hostname,case_id, requesting_user)\n            json_result['approved'] = True\n            output_message = \"Action Approved\"\n            result_value = True\n            result_value = True\n        else:\n            response_message = MSG_DENIED.format(manager.siemplify_hostname, case_id, requesting_user)\n            json_result['reason'] = \"Case {0} has been denied workflow approval by {1}\".format(case_id, requesting_user)\n        \n        if(response_comments):\n            response_message = \"{0}\\n>*Comments:*\\n>{1}\".format(response_message, response_comments)\n            siemplify.add_comment(response_comments, case_id=case_id, alert_identifier=alert_id)\n            json_result['review_comments'] = response_comments\n            \n        manager.log_slack_message(response_message)\n        json_result['reviewer'] = requesting_user\n        \n    else:\n        ## DISALLOW any further activity\n        siemplify.LOGGER.info(\"Case {} is NOT assigned to required reviewer {}. Cancelling.\".format(case_id, reviewer))\n        e = \"Failed to approve action in case <{0}/#/main/cases/classic-view/{1}|{1}>. User {2} is unauthorized.\".format(manager.siemplify_hostname, case_id, requesting_user)\n        manager.log_slack_message(message=e)\n        siemplify.LOGGER.error(e)\n        siemplify.LOGGER.exception(e)\n        raise ValueError(e)\n        \n        \n    status = EXECUTION_STATE_COMPLETED  # used to flag back to siemplify system, the action final status\n    siemplify.result.add_result_json(json_result)\n    siemplify.LOGGER.info(\"\\n  status: {}\\n  result_value: {}\\n  output_message: {} \\nOriginal Requesting User: {}\".format(status,result_value, output_message, siemplify.original_requesting_user))\n    siemplify.end(output_message, result_value, status)\n\n\nif __name__ == \"__main__\":\n    main()\n",
  "IntegrationIdentifier": "Workflow Tools",
  "ScriptResultName": "ApprovalResult",
  "DynamicResultsMetadata": [
    {
      "ResultName": "JsonResult",
      "ResultExample": "{\"reviewer\": \"john.smith\",\"review_comments\":\"Missing information\",\"reason\":\"Case 12345 has been denied for escalation by john.smith. Changes to the escalation are required\"}",
      "ShowResult": true
    }
  ],
  "Creator": "daniel.harvey",
  "IsEnabled": true,
  "IsCustom": true,
  "IsSystem": false,
  "Version": 83.0,
  "TimeoutSeconds": 300,
  "Parameters": [
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": "false",
      "Description": "Approval managers response to request",
      "Name": "Action Approved",
      "Value": "false",
      "Type": 1,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1624318430691,
      "ModificationTimeUnixTimeInMs": 1624318430691
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": "",
      "Description": "Please enter any relevant notes to be added to the case.",
      "Name": "Response Comments",
      "Value": "",
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1624318430691,
      "ModificationTimeUnixTimeInMs": 1624318430691
    }
  ],
  "DefaultResultValue": "",
  "PythonVersion": "None",
  "SimulationData": {
    "Entities": null
  },
  "SimulationDataJson": null,
  "Id": 0,
  "CreationTimeUnixTimeInMs": 1624114083742,
  "ModificationTimeUnixTimeInMs": 1624318430687
}