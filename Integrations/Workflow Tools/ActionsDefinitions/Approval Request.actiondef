{
  "Name": "Approval Request",
  "Description": "Requires approval from a reviewer before continuing",
  "Script": "from SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import unix_now, convert_unixtime_to_datetime, output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED,EXECUTION_STATE_TIMEDOUT\nfrom WorkflowToolsManager import WorkflowToolsManager\nimport requests\nimport json \n\nMSG_AWAITING_APPROVAL = \":large_orange_circle: Case <{0}/#/main/cases/classic-view/{1}|{1}> is awaiting workflow approval.\"\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    \n    output_message = \"output message: \"  # human readable message, showed in UI as the action result\n    result_value = None  # Set a simple result value, used for playbook if\\else and placeholders.\n    \n    # A Siemplify API key is required to interact with the API\n    api_key = siemplify.extract_configuration_param('Workflow Tools',\"Siemplify API Key\")\n    api_root = siemplify.extract_configuration_param('Workflow Tools',\"Siemplify API Root\")\n    siemplify_hostname = siemplify.extract_configuration_param('Workflow Tools',\"Siemplify Instance Hostname\")\n    slack_webhook_url = siemplify.extract_configuration_param('Workflow Tools',\"Slack Webhook URL\")\n    # The approval manager that the case/alert should be assigned to\n    reviewer = siemplify.extract_configuration_param('Workflow Tools', \"Approval Manager\")\n    reviewer_secondary = siemplify.extract_configuration_param('Workflow Tools', \"Secondary Approval Manager\",\n                                             default_value=\"\", input_type=str)\n    move_grouped_alert = siemplify.extract_action_param(\"Move Alert If Grouped\", print_value=True, input_type=bool)\n    # JSON Result object returned at execution end.\n    json_result = {\"approval_manager\": reviewer, \"secondary_approval_manager\": reviewer_secondary, \n                        \"original_case_id\": -1, \"new_case_id\": -1}\n    \n    \n    manager = WorkflowToolsManager(siemplify_hostname=siemplify_hostname, api_root=api_root, api_key=api_key, siemplify=siemplify, slack_webhook_url=slack_webhook_url)\n    \n    # The ID of the case\n    case_id = siemplify.case.identifier\n    json_result['original_case_id'] = case_id\n    # The ID of the current alert\n    alert_id = siemplify.current_alert.identifier\n    \n    result_value = True\n    ### STEP 1: Check whether to move the alert to a new case, if grouped with others\n    if(move_grouped_alert == False):\n        ### STEP 2a: The case is to be treated as one workflow, don't worry about moving the alert. Treat the case as a whole. \n        manager.assign_case(reviewer, case_id, alert_id)\n        manager.log_slack_message(message=MSG_AWAITING_APPROVAL.format(manager.siemplify_hostname,case_id))\n        output_message = output_message + \"Case was assigned to reviewer for approval.\"\n    else:\n        ### STEP 2b: If we're to move the alert when grouped with others, check if there's more than one alert.\n        if(int(siemplify.case.alert_count) > 1):\n            ### STEP 2b i:\n            ### Move the alert to its own case.\n            new_case_id = manager.move_alert(case_id, alert_id)\n            if(new_case_id == None):\n                e = \"Failed to move alert {} from case {}. Did not receive a new case ID from API.\".format(alert_id, case_id)\n                siemplify.LOGGER.error(e)\n                siemplify.LOGGER.exception(e)\n                raise ValueError(e)\n            json_result['new_case_id'] = new_case_id\n            ### Assign the new case to approval manager, send slack message\n            output_message = output_message + \"Alert {0} was moved to new case {1} for approval.\".format(alert_id, new_case_id)\n            manager.assign_case(reviewer, new_case_id, alert_id)\n            manager.log_slack_message(message=MSG_AWAITING_APPROVAL.format(manager.siemplify_hostname,new_case_id))\n        else:\n            ### STEP 2b ii:\n            ### Assign the case to the approval manager, send slack message\n            manager.assign_case(reviewer, case_id, alert_id)\n            output_message = output_message + \"Case was assigned to reviewer for approval.\"\n            manager.log_slack_message(message=MSG_AWAITING_APPROVAL.format(manager.siemplify_hostname,case_id))\n    \n    status = EXECUTION_STATE_COMPLETED  # used to flag back to siemplify system, the action final status\n    siemplify.result.add_result_json(json_result)\n    siemplify.LOGGER.info(\"\\n  status: {}\\n  result_value: {}\\n  output_message: {} \\nAssigned to Approval Manager: {}\".format(status,result_value, output_message, reviewer))\n    siemplify.end(output_message, result_value, status)\n\nif __name__ == \"__main__\":\n    main()\n",
  "IntegrationIdentifier": "Workflow Tools",
  "ScriptResultName": "RequiresApproval",
  "DynamicResultsMetadata": [
    {
      "ResultName": "JsonResult",
      "ResultExample": "{}",
      "ShowResult": true
    }
  ],
  "Creator": "daniel.harvey",
  "IsEnabled": true,
  "IsCustom": true,
  "IsSystem": false,
  "Version": 118.0,
  "TimeoutSeconds": 300,
  "Parameters": [
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": "true",
      "Description": "If the alert is grouped in a case with several other alerts - We'll move this alert to it's own case before continuing the workflow. ",
      "Name": "Move Alert If Grouped",
      "Value": "true",
      "Type": 1,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1624318430685,
      "ModificationTimeUnixTimeInMs": 1624318430685
    }
  ],
  "DefaultResultValue": "",
  "PythonVersion": "None",
  "SimulationData": {
    "Entities": null
  },
  "SimulationDataJson": null,
  "Id": 0,
  "CreationTimeUnixTimeInMs": 1624113979529,
  "ModificationTimeUnixTimeInMs": 1624318430681
}