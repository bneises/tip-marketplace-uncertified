{
  "Name": "logzio-search-logs",
  "Description": "Searches logs in your Logz.io operations account.",
  "Script": "from SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED\nfrom datetime import datetime\n\nimport dateparser\nimport time\nimport json\nimport math\nimport requests\n\nBASE_URL = \"https://api.logz.io/\"\nSEARCH_LOGS_API_SUFFIX = \"v1/search\"\nDEFAULT_PAGE_SIZE = 25\nMIN_PAGE_SIZE = 1\nMAX_PAGE_SIZE = 1000\n\n\"\"\"\nIf this action succeeds, it will return a json in the following format:\n{\n    \"results\": [\n        # logs\n    ]\n}\n\"\"\"\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    status = EXECUTION_STATE_FAILED # default. will be changed only if logs retrieved and parsed to json successfully.\n    num_logs = 0\n    logzio_token = siemplify.extract_configuration_param('Logzio',\"logzio_operations_token\", default_value=\"-\", is_mandatory=True)\n    if logzio_token == \"-\" or logzio_token == \"\":\n        siemplify.LOGGER.error(\"Error occurred: no Logzio API token! Exiting.\")\n        raise ValueError\n    logzio_region = siemplify.extract_configuration_param('Logzio',\"logzio_region\", default_value=\"\")\n    query = siemplify.extract_action_param('query', input_type=str, is_mandatory=False, default_value='*')\n    size = get_validated_size(siemplify)\n    from_time = get_time_in_unix(siemplify, 'from_time')\n    to_time = get_time_in_unix(siemplify, 'to_time')\n    logs_response = execute_logzio_api(siemplify, logzio_token, logzio_region, query, size, from_time, to_time)\n    if logs_response is not None:\n        num_logs = len(logs_response[\"hits\"][\"hits\"])\n        logs_json = get_logs_values(logs_response[\"hits\"][\"hits\"])\n        if logs_json is not None:\n            siemplify.LOGGER.info(\"Retrieved {} logs that match the query\".format(len(logs_response[\"hits\"][\"hits\"])))\n            siemplify.result.add_result_json(logs_json)\n            status = EXECUTION_STATE_COMPLETED\n    \n    output_message = get_output_msg(status, num_logs)\n    is_success = status == EXECUTION_STATE_COMPLETED\n    siemplify.end(output_message, is_success, status)\n    \n    \n    \ndef execute_logzio_api(siemplify, api_token, logzio_region, query, size, from_time, to_time):\n    \"\"\" Sends request to Logz.io and returnes the response, if applicable \"\"\"\n    try:\n        new_request = create_request_body_obj(query, size, from_time, to_time)\n        new_logs = search_logs(api_token, new_request, logzio_region, siemplify)\n        return new_logs\n    except Exception as e:\n        siemplify.LOGGER.error(\"Error occurred while searching for logs: {}\".format(e))\n        return None\n\n\ndef create_request_body_obj(query, size, from_time, to_time):\n    \"\"\" Creates request body to send to Logz.io API \"\"\"\n    request_body = {\n        \"query\": {\n            \"bool\": {\n                \"must\": [{\n                    \"query_string\": {\n                        \"query\": query\n                        }\n                    }]\n                }\n            },\n        \"size\": size\n    }\n    \n    if from_time is not None or to_time is not None:\n            time_filter = {}\n            if from_time is not None:\n                time_filter[\"from\"] = from_time\n                time_filter[\"include_lower\"] = True\n            if to_time is not None:\n                time_filter[\"to\"] = to_time\n                time_filter[\"include_upper\"] = True\n            request_body[\"query\"][\"bool\"][\"must\"].append(\n                {\n                    \"range\": {\"@timestamp\": time_filter}\n                }\n            )\n    \n    return request_body\n    \n    \ndef search_logs(api_token, req_body, region, siemplify):\n    \"\"\"\n    Returnes from Logz.io all the logs that match the query.\n    If error occured or no results found, returnes None\n    \"\"\"\n    headers = {\n        'Content-Type': 'application/json',\n        'X-API-TOKEN': api_token\n    }\n\n    url = get_logzio_api_endpoint(siemplify, region) # get_base_api_url(region) + SEARCH_LOGS_API_SUFFIX\n    siemplify.LOGGER.info(\"api url: {}\".format(url))\n    try:\n        body = json.dumps(req_body)\n        siemplify.LOGGER.info(\"Searching logs that match query: {}\".format(body))\n        response = requests.post(url, headers=headers, data=body, timeout=5)\n        siemplify.LOGGER.info(\"Status code from Logz.io: {}\".format(response.status_code))\n        if response.status_code == 200:\n            logs_response = json.loads(response.content)\n            if logs_response[\"hits\"][\"total\"] >= 0:\n                return logs_response\n            return None\n        else:\n            siemplify.LOGGER.warn(\"API request returned {}\".format(response.status_code))\n    except Exception as e:\n        siemplify.LOGGER.error(\"Error occurred while searching & fetching logs from Logz.io:\\n{}\".format(e))\n        return None\n        \n\ndef get_base_api_url(region):\n    \"\"\" Returnes API url, in accordance to user's input \"\"\"\n    if region == \"us\" or region == \"\" or region == \"-\":\n        return BASE_URL\n    else:\n        return BASE_URL.replace(\"api.\", \"api-{}.\".format(region))\n\n\ndef get_output_msg(status, num_logs):\n    \"\"\" Returnes the output message in accordance to the script status \"\"\"\n    if status == EXECUTION_STATE_COMPLETED:\n        if num_logs == 0:\n            return \"API call ended successfully with no logs to match the query\"\n        return \"Retrieved successfully {} logs that triggered the alert\".format(num_logs)\n    else:\n        return \"Failed to retrieve logs. Please check the script's logs to see what went wrong...\"\n    \n    \ndef get_validated_size(siemplify):\n    \"\"\"\n    Validates and returnes the size param for the query.\n    If value is not valid reverts to default size.\n    \"\"\"\n    size = siemplify.extract_action_param('size', input_type=str, is_mandatory=False)\n    if size is None or size == \"\":\n        siemplify.LOGGER.info(\"No size entered. Using default value: {}\".format(MAX_PAGE_SIZE))\n        return MAX_PAGE_SIZE\n    else:\n        try:\n            size_num = int(size)\n            if size_num <= 0 or size_num > MAX_PAGE_SIZE:\n                siemplify.LOGGER.warn(\"Size should be between 1 and {}. Reverting to default value: {}\".format(MAX_PAGE_SIZE, MAX_PAGE_SIZE))\n                return MAX_PAGE_SIZE\n            else:\n                return size_num\n        except Exception as e:\n            siemplify.LOGGER.warn(\"{}\\n Reverting to default value {}\".format(e, MAX_PAGE_SIZE))\n            return MAX_PAGE_SIZE\n    \n\ndef get_time_in_unix(siemplify, param_name):\n    \"\"\" Converts the time the user inserts to unix time \"\"\"\n    time_input = siemplify.extract_action_param(param_name)\n    if time_input is not None and time_input != \"\":\n        if time_input.isdigit():\n            return time_input\n        else:\n            try:\n                date_time_obj = dateparser.parse(time_input, settings={'TIMEZONE': 'UTC'})\n                parsed_time = int(time.mktime(date_time_obj.timetuple())) * 1000\n                if parsed_time is None:\n                    siemplify.LOGGER.warn(\"Couldn't parse {}. Reverting to default time\".format(param_name, e))\n                return parsed_time\n            except Exception as e:\n                siemplify.LOGGER.warn(\"Error occurred while parsing {}: {}\\n Reverting to default time\".format(param_name, e))\n                return None\n    return time_input\n    \n\ndef get_logs_values(logs):\n    \"\"\"\n    Extracts the logs from the Logz.io API response, and formats\n    them for the output json.\n    \"\"\"\n    logs_results = {\"results\": []}\n    for log in logs:\n        logs_results[\"results\"].append(log[\"_source\"])\n    \n    if len(logs_results) > 0:\n        return json.dumps(logs_results)\n    return None\n    \n\ndef get_logzio_api_endpoint(siemplify, region):\n    \"\"\"\n    Returns the endpoint of Logz.io API.\n    Prioritizing a custom endoint, if entered.\n    If not, falling back to the regaular enspoints, based on the logzio_region (defaults to us).\n    \"\"\"\n    custom_endpoint = siemplify.extract_configuration_param(\"Logzio\", \"logzio_custom_endpoint\", is_mandatory=False, default_value=\"\")\n    if custom_endpoint is not None and custom_endpoint != \"\":\n        siemplify.LOGGER.info(\"Using custom endpoint: {}\".format(custom_endpoint))\n        return custom_endpoint + SEARCH_LOGS_API_SUFFIX\n    return get_base_api_url(region) + SEARCH_LOGS_API_SUFFIX\n\n    \nif __name__ == \"__main__\":\n    main()\n",
  "IntegrationIdentifier": "Logzio",
  "ScriptResultName": "ScriptResult",
  "DynamicResultsMetadata": [
    {
      "ResultName": "JsonResult",
      "ResultExample": "{\n\t\"results\": [{\n\t\t\"request\": \"value\",\n\t\t\"agent\": \"value\",\n\t\t\"minor\": \"value\",\n\t\t\"auth\": \"value\",\n\t\t\"ident\": \"value\",\n\t\t\"os_major\": \"value\",\n\t\t\"type\": \"value\",\n\t\t\"major\": \"value\",\n\t\t\"clientip\": \"value\",\n\t\t\"_logzio_sample_logs\": \"value\",\n\t\t\"geoip\": {\n\t\t\t\"timezone\": \"value\",\n\t\t\t\"ip\": \"value\",\n\t\t\t\"latitude\": \"value\",\n\t\t\t\"country_name\": \"value\",\n\t\t\t\"country_code2\": \"value\",\n\t\t\t\"continent_code\": \"value\",\n\t\t\t\"location\": \"value\",\n\t\t\t\"longitude\": \"value\"\n\t\t},\n\t\t\"os\": \"value\",\n\t\t\"verb\": \"value\",\n\t\t\"message\": \"value\",\n\t\t\"tags\": \"value\",\n\t\t\"referrer\": \"value\",\n\t\t\"@timestamp\": \"value\",\n\t\t\"response\": \"value\",\n\t\t\"bytes\": \"value\",\n\t\t\"name\": \"value\",\n\t\t\"os_name\": \"value\",\n\t\t\"httpversion\": \"value\",\n\t\t\"device\": \"value\"\n\t}, {\n\t\t\"request\": \"value\",\n\t\t\"agent\": \"value\",\n\t\t\"minor\": \"value\",\n\t\t\"auth\": \"value\",\n\t\t\"ident\": \"value\",\n\t\t\"os_major\": \"value\",\n\t\t\"type\": \"value\",\n\t\t\"patch\": \"value\",\n\t\t\"major\": \"value\",\n\t\t\"clientip\": \"value\",\n\t\t\"_logzio_sample_logs\": \"value\",\n\t\t\"geoip\": {\n\t\t\t\"city_name\": \"value\",\n\t\t\t\"timezone\": \"value\",\n\t\t\t\"ip\": \"value\",\n\t\t\t\"latitude\": \"value\",\n\t\t\t\"country_name\": \"value\",\n\t\t\t\"country_code2\": \"value\",\n\t\t\t\"continent_code\": \"value\"\n\t\t}\n\t}]\n}",
      "ShowResult": true
    }
  ],
  "Creator": "Admin",
  "IsEnabled": true,
  "IsCustom": false,
  "IsSystem": false,
  "Version": 40.0,
  "TimeoutSeconds": 30,
  "Parameters": [
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": "*",
      "Description": "A search query written in valid Lucene syntax. Cannot be null - send a wildcard (*) if not using a search query.",
      "Name": "query",
      "Value": "*",
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1614762904550,
      "ModificationTimeUnixTimeInMs": 1614762904550
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": null,
      "Description": "Number of log results per query. Limited to 1000 logs.",
      "Name": "size",
      "Value": null,
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1614762904550,
      "ModificationTimeUnixTimeInMs": 1614762904550
    },
    {
      "CustomActionId": 0,
      "IsMandatory": false,
      "DefaultValue": "",
      "Description": "Latest time to search. (Leave this empty if you used a relative time for the parameter ‘from_time’.)",
      "Name": "to_time",
      "Value": "",
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1614762904550,
      "ModificationTimeUnixTimeInMs": 1614762904550
    },
    {
      "CustomActionId": 0,
      "IsMandatory": true,
      "DefaultValue": "",
      "Description": "Earliest time to search. Accepts formats supported by dateparser lib: Unix timestamps, relative time, or the format  \"%Y-%m-%dT%H:%M:%S.%f\".",
      "Name": "from_time",
      "Value": "",
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1614762904550,
      "ModificationTimeUnixTimeInMs": 1614762904550
    }
  ],
  "DefaultResultValue": "",
  "PythonVersion": "None",
  "SimulationData": {
    "Entities": null
  },
  "SimulationDataJson": null,
  "Id": 0,
  "CreationTimeUnixTimeInMs": 1614698837439,
  "ModificationTimeUnixTimeInMs": 1614762904545
}