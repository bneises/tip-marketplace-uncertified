{
  "Name": "Extract Archive",
  "Description": "Extracts an archive file to a directory..  Supports: zip, tar, gztar, bztar, xtar.\nReturns the extracted path and files.",
  "Script": "# ==============================================================================\n# title           : Extract Archive\n# description     : This action will extract an archive to a directory.  Returns list\n#                 : of all files extracted\n# author          : robb@siemplify.co\n# date            : 2021-01-08\n# python_version  : 3.7\n# libraries       : shutil, os, tempfile, pathlib\n# requirements    :\n# product_version :\n# ==============================================================================\n\nfrom SiemplifyAction import SiemplifyAction\nfrom SiemplifyUtils import unix_now, convert_unixtime_to_datetime, output_handler\nfrom ScriptResult import EXECUTION_STATE_COMPLETED, EXECUTION_STATE_FAILED, EXECUTION_STATE_TIMEDOUT\n\n\nimport shutil\nimport os\nimport tempfile\nimport pathlib\nimport json\n\n\nDEST_DIR = '/opt/siemplify/siemplify_server/Scripting/FileUtilities/Extract'\n\ndef path_to_dict(path):\n    d = {'name': os.path.basename(path)}\n    filename, file_extension = os.path.splitext(path)\n    if os.path.isdir(path):\n        d['type'] = \"directory\"\n        d['children'] = [path_to_dict(os.path.join(path,x)) for x in os.listdir(path)]\n    else:\n        d['type'] = \"file\"\n        d['extension'] = file_extension\n        d['path'] = path\n    return d\n\n@output_handler\ndef main():\n    siemplify = SiemplifyAction()\n    archives = list(filter(None, [x.strip() for x in siemplify.parameters.get(\"Archive\").split(',')]))\n    \n    status              = EXECUTION_STATE_COMPLETED  # used to flag back to siemplify system, the action final status\n    output_message      = \"output message :\"  # human readable message, showed in UI as the action result\n    result_value        = None  # Set a simple result value, used for playbook if\\else and placeholders.\n    json_result = {}\n    success_files = []\n    failed_files = []\n    json_result['archives'] = []\n    for archive in archives:\n        archive_name = pathlib.Path(archive).stem\n        full_archive_name = pathlib.Path(archive).name\n    \n        output_dir = os.path.join(DEST_DIR, archive_name)\n        if not os.path.exists(output_dir):\n            try: \n                pathlib.Path(output_dir).mkdir(parents=True, exist_ok=True)\n            except OSError:\n                siemplify.LOGGER.error(\"Creation of the directory %s failed\" % output_dir)\n                status      = EXECUTION_STATE_FAILED\n                json_result['archives'].append({\"success\": False, \"archive\": full_archive_name })\n                failed_files.append(archive)\n                raise\n        try:    \n            files = shutil.unpack_archive(archive, output_dir)\n            files = path_to_dict(output_dir)\n            files_w_path = [os.path.join(output_dir, f) for f in os.listdir(output_dir) if os.path.isfile(os.path.join(output_dir, f))]\n            onlyfiles = [f for f in os.listdir(output_dir) if os.path.isfile(os.path.join(output_dir, f))]\n            json_result['archives'].append({\"success\": True, \"archive\": full_archive_name, \"folder\": output_dir, \"files\": files, \"files_with_path\": files_w_path, \"files_list\": onlyfiles} )\n            output_message = \"\\nSuccessfully extracted archive: {}\".format(full_archive_name)\n            success_files.append(archive)\n        except Exception as e:\n            siemplify.LOGGER.error(\"General error performing action:\\r\")\n            siemplify.LOGGER.exception(e)\n            status          = EXECUTION_STATE_FAILED\n            result_value    = \"Failed\"\n            output_message += \"\\n\" + e\n            json_result['archives'].append({\"success\": False, \"archive\": full_archive_name  })\n            failed_files.append(archive)\n            raise\n    if not failed_files:\n        result_value = True\n    siemplify.result.add_result_json(json_result)      \n    siemplify.LOGGER.info(\"\\n  status: {}\\n  result_value: {}\\n  output_message: {}\".format(status,result_value, output_message))\n    siemplify.end(output_message, result_value, status)\n\n\nif __name__ == \"__main__\":\n    main()",
  "IntegrationIdentifier": "FileUtilities",
  "ScriptResultName": "ScriptResult",
  "DynamicResultsMetadata": [
    {
      "ResultName": "JsonResult",
      "ResultExample": "{\n  \"archives\": [\n    {\n      \"success\": true,\n      \"archive\": \"testarchive.zip\",\n      \"folder\": \"/opt/siemplify/siemplify_server/Scripting/FileUtilities/Extract/testarchive\",\n      \"files_with_path\": [\n        \"/opt/siemplify/siemplify_server/Scripting/FileUtilities/Extract/testarchive/Archives/testarchive.zip\",\n        \"/opt/siemplify/siemplify_server/Scripting/FileUtilities/Extract/testarchive/Archives/file1\",\n        \"/opt/siemplify/siemplify_server/Scripting/FileUtilities/Extract/testarchive/Archives/file2\"\n      ],\n      \"files_list\": [\"testarchive.zip\", \"file1\", \"file2\"],\n      \"files\": {\n        \"name\": \"testarchive\",\n        \"type\": \"directory\",\n        \"children\": [\n          {\n            \"name\": \"Archives\",\n            \"type\": \"directory\",\n            \"children\": [\n              {\n                \"name\": \"testarchive.zip\",\n                \"type\": \"file\"\n              },\n              {\n                \"name\": \"file1\",\n                \"type\": \"file\"\n              },\n              {\n                \"name\": \"file2\",\n                \"type\": \"file\"\n              }\n            ]\n          }\n        ]\n      }\n    }\n  ]\n}",
      "ShowResult": true
    }
  ],
  "Creator": "Rob",
  "IsEnabled": true,
  "IsCustom": false,
  "IsSystem": false,
  "Version": 12.0,
  "TimeoutSeconds": 600,
  "Parameters": [
    {
      "CustomActionId": 0,
      "IsMandatory": true,
      "DefaultValue": "<archive file with path>",
      "Description": "The  path of the archive to be extracted.  Supports comma delimited\nExample: \n/opt/siemplify/siemplify_server/Scripting/FileUtilities//file.zip\n",
      "Name": "Archive",
      "Value": "<archive file with path>",
      "Type": 0,
      "OptionalValues": null,
      "OptionalValuesJson": null,
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1610399236926,
      "ModificationTimeUnixTimeInMs": 1610399236926
    }
  ],
  "DefaultResultValue": "",
  "PythonVersion": "None",
  "Id": 0,
  "CreationTimeUnixTimeInMs": 1610399236922,
  "ModificationTimeUnixTimeInMs": 1610399236922
}