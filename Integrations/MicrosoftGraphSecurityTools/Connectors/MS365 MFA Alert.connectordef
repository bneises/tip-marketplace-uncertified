{
  "IsEnabled": true,
  "IsCustom": false,
  "Integration": "MicrosoftGraphSecurityTools",
  "DocumentationLink": null,
  "Name": "MS365 MFA Alert",
  "Description": "Alert on negative changes to user MFA registration. Use the whitelist to prevent alerts for legacy service accounts that don't support MFA, etc.",
  "Creator": "daniel.harvey",
  "Script": "from SiemplifyConnectors import SiemplifyConnectorExecution\nfrom SiemplifyConnectorsDataModel import AlertInfo\nfrom SiemplifyUtils import output_handler, unix_now\nfrom random import randrange\nfrom MicrosoftGraphSecurityManager import MicrosoftGraphSecurityManager\n\n\nimport uuid\nimport sys\nimport json\nimport os\n\n# ============================================================================#\n# title           :MS365 NFA Alert\n# description     :This connector monitors the MFA status of your userbase.\n#                  If a discrepancy/MFA issue is found based on your given\n#                  parameters, an alert will be generated.\n# author          :Daniel Harvey\n# date            :07-12-2020\n# python_version  :3.7\n# ============================================================================#\n\nCONNECTOR_NAME = \"MS365 MFA Alert\"\nVENDOR = \"Microsoft\"\nPRODUCT = \"Microsoft 365\"\nRULE_GENERATOR = \"MFA\"\nRANDOM_ALERT_COUNT_MAX = 3\nRANDOM_EVENT_COUNT_PER_ALERT_MAX = 5\n\n@output_handler\ndef main(is_test_run):\n    alerts = [] # The main output of each connector run\n    siemplify = SiemplifyConnectorExecution() # Siemplify main SDK wrapper\n    siemplify.script_name = CONNECTOR_NAME\n\n    if (is_test_run):\n        siemplify.LOGGER.info(\"***** This is an \\\"IDE Play Button\\\"\\\\\\\"Run Connector once\\\" test run ******\")\n\n    siemplify.LOGGER.info(\"==================== Main - Param Init ====================\")\n\n    client_id = siemplify.extract_connector_param(param_name=\"Client ID\", print_value=True)\n    secret_id = siemplify.extract_connector_param(param_name=\"Secret ID\", print_value=False)\n    tenant = siemplify.extract_connector_param(param_name=\"Tenant ID\", print_value=False)\n    certificate_password = siemplify.extract_connector_param(param_name=\"Certificate Password\", print_value=False)\n    certificate_path = siemplify.extract_connector_param(param_name=\"Certificate Path\", print_value=True)\n    filter_exclude_guests = siemplify.extract_connector_param(param_name=\"Exclude Guests\", input_type=bool, print_value=False)\n    alert_selfserv_reset = siemplify.extract_connector_param(param_name=\"Self Service Reset Alert\", input_type=bool, print_value=False)\n    alert_mfa_registration = siemplify.extract_connector_param(param_name=\"MFA Registration Alert\", input_type=bool, print_value=False)\n    account_whitelist = siemplify.whitelist\n\n    siemplify.LOGGER.info(\"------------------- Main - Started -------------------\")\n\n    json_results = {}\n    \n    try:\n        siemplify.LOGGER.info(\"Connecting to Microsoft Graph Security.\")\n        mtm = MicrosoftGraphSecurityManager(client_id, secret_id, certificate_path, certificate_password, tenant)\n        siemplify.LOGGER.info(\"Connected successfully.\")\n\n        #siemplify.LOGGER.info(f\"Fetching alert {alert_id}\")\n        mfa_stats = mtm.get_mfa_stats()\n\n        if mfa_stats:\n            siemplify.LOGGER.info(f\"Found alert mfa stats.\")\n            for user in mfa_stats:\n                alert_id = user['id']\n                userPrincipalName = user['userPrincipalName']\n                isMfaRegistered = user['isMfaRegistered']\n                isCapable = user['isCapable']\n                \n                if filter_exclude_guests and \"#EXT#\" in userPrincipalName:\n                    continue\n                \n                # Check MFA registration\n                if (userPrincipalName not in account_whitelist and (not isMfaRegistered and alert_mfa_registration) or (isCapable and alert_selfserv_reset)):\n                    try:\n                        alert_example = fetch_alert(siemplify, alert_id, user)\n                \n                        if alert_example:\n                            alerts.append(alert_example)\n                            siemplify.LOGGER.info(\"Added Alert {} to package results\".format(alert_id))\n                \n                    except Exception as e:\n                        siemplify.LOGGER.error(\"Failed to process alert {}\".format(alert_id), alert_id=alert_id)\n                        siemplify.LOGGER.exception(e)\n\n            json_results = json.dumps(mfa_stats)\n            output_message = f'User MFA information was found.'\n            result_value = json.dumps(mfa_stats)\n\n        else:\n            siemplify.LOGGER.info(f\"No MFA information was found.\")\n            output_message = f\"No MFA information was found.\"\n            result_value = json.dumps({})\n\n\n    except Exception as e:\n        siemplify.LOGGER.error(f\"Some errors occurred. Error: {e}\")\n        siemplify.LOGGER.exception(e)\n        result_value = json.dumps({})\n        output_message = f\"Some errors occurred. Error: {e}\"\n        raise\n    \n\n    siemplify.LOGGER.info(\"------------------- Main - Finished -------------------\")\n    siemplify.return_package(alerts)\n\n\ndef fetch_alert(siemplify, alert_id, user):\n    \"\"\"Returns an alert, which is an aggregation of basic events. (ie: Arcsight's correlation, QRadar's Offense)\"\"\"\n    siemplify.LOGGER.info(\"-------------- Started processing Alert {}\".format(alert_id), alert_id=alert_id)\n\n    alert_info = AlertInfo()\n\n    alert_info.display_id = str(uuid.uuid4())\n    alert_info.ticket_id = alert_id\n    alert_info.name = \"MFA Alert \" + user['userPrincipalName']\n    alert_info.rule_generator = RULE_GENERATOR\n    alert_info.start_time = unix_now()\n    alert_info.end_time = unix_now()\n    alert_info.priority = 80  # Informative = -1,Low = 40,Medium = 60,High = 80,Critical = 100.\n    alert_info.device_vendor = VENDOR  \n    alert_info.device_product = PRODUCT\n    # ----------------------------- Alert Fields initilization END -----------------------------\n\n    siemplify.LOGGER.info(\"---------- Events fetching started for alert  {}\".format(alert_id))\n\n    event_id = str(uuid.uuid4())\n    try:\n        event = fetch_event(siemplify, alert_id, event_id, user)\n\n        if event:\n            alert_info.events.append(event)\n            siemplify.LOGGER.info(\"Added Event {} to Alert {}\".format(event_id, alert_id))\n\n    except Exception as e:\n        siemplify.LOGGER.error(\"Failed to process event {}\".format(event_id), alert_id=alert_id)\n        siemplify.LOGGER.exception(e)\n        \n\n    siemplify.LOGGER.info(\"---------- Events fetching finished for alert {}\".format(alert_id))\n\n    siemplify.LOGGER.info(\"-------------- Finished processing Alert {}\".format(alert_id), alert_id=alert_id)\n    return alert_info\n\n\ndef fetch_event(siemplify, alert_id, event_id, user):\n    siemplify.LOGGER.info(\"--- Started processing Event:  alert_id: {} | event_id: {}\".format(alert_id, event_id))\n    event = {}\n\n    event[\"StartTime\"] = unix_now() \n    event[\"EndTime\"] = unix_now() \n    event[\"name\"] = \"MFA problem detection\"\n    event[\"device_product\"] = \"Microsoft 365\" \n    # ----------------------------- ---------------\n    event[\"SourceUserName\"] = user['userPrincipalName']\n    event[\"userPrincipalName\"] = user[\"userPrincipalName\"]\n    event[\"userDisplayName\"] = user[\"userDisplayName\"]\n    event[\"isRegistered\"] = user[\"isRegistered\"]\n    event[\"isCapable\"] = user[\"isCapable\"]\n    event[\"isMfaRegistered\"] = user[\"isMfaRegistered\"]\n    #event[\"authMethods\"] = user[\"authMethods\"]\n\n    siemplify.LOGGER.info(\"--- Finished processing Event: alert_id: {} | event_id: {}\".format(alert_id, event_id))\n\n    return event\n\nif __name__ == \"__main__\":\n    # Connectors are run in iterations. The interval is configurable from the ConnectorsScreen UI.\n    is_test_run = not (len(sys.argv) < 2 or sys.argv[1] == 'True')\n    main(is_test_run)",
  "Version": 54,
  "MappingRules": [],
  "ProductToVisualFamilyRecords": [],
  "SimulationUseCases": {
    "CasesForUseCase": [],
    "UseCaseName": null
  },
  "Parameters": [
    {
      "ConnectorDefinitionId": 61,
      "IsMandatory": true,
      "DefaultValue": "x",
      "Name": "Tenant ID",
      "Type": 2,
      "Mode": 2,
      "Description": "Tenant ID from Azure",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1607348596983,
      "ModificationTimeUnixTimeInMs": 1607348596983
    },
    {
      "ConnectorDefinitionId": 61,
      "IsMandatory": false,
      "DefaultValue": "false",
      "Name": "Self Service Reset Alert",
      "Type": 0,
      "Mode": 2,
      "Description": "Create alert when a user has the ability to self-service reset their password/MFA.",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1607348596983,
      "ModificationTimeUnixTimeInMs": 1607348596983
    },
    {
      "ConnectorDefinitionId": 61,
      "IsMandatory": true,
      "DefaultValue": "x",
      "Name": "Secret ID",
      "Type": 3,
      "Mode": 2,
      "Description": "Secret ID from Azure",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1607348596983,
      "ModificationTimeUnixTimeInMs": 1607348596983
    },
    {
      "ConnectorDefinitionId": 61,
      "IsMandatory": true,
      "DefaultValue": "60",
      "Name": "PythonProcessTimeout",
      "Type": 2,
      "Mode": 0,
      "Description": "The timeout limit (in seconds) for the python process running current script",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1607348596983,
      "ModificationTimeUnixTimeInMs": 1607348596983
    },
    {
      "ConnectorDefinitionId": 61,
      "IsMandatory": false,
      "DefaultValue": "true",
      "Name": "MFA Registration Alert",
      "Type": 0,
      "Mode": 2,
      "Description": "Create alert when a user is not registered for MFA. Recommended.",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1607348596983,
      "ModificationTimeUnixTimeInMs": 1607348596983
    },
    {
      "ConnectorDefinitionId": 61,
      "IsMandatory": false,
      "DefaultValue": "false",
      "Name": "Exclude Guests",
      "Type": 0,
      "Mode": 2,
      "Description": "Exclude guests/external users from alerts (emails containing #EXT#)",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1607348596983,
      "ModificationTimeUnixTimeInMs": 1607348596983
    },
    {
      "ConnectorDefinitionId": 61,
      "IsMandatory": true,
      "DefaultValue": "MFA Alert",
      "Name": "EventClassId",
      "Type": 2,
      "Mode": 0,
      "Description": "The field name used to determine the event name (sub-type)",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1607348596983,
      "ModificationTimeUnixTimeInMs": 1607348596983
    },
    {
      "ConnectorDefinitionId": 61,
      "IsMandatory": true,
      "DefaultValue": "Microsoft 365",
      "Name": "DeviceProductField",
      "Type": 2,
      "Mode": 0,
      "Description": "The field name used to determine the device product",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1607348596983,
      "ModificationTimeUnixTimeInMs": 1607348596983
    },
    {
      "ConnectorDefinitionId": 61,
      "IsMandatory": true,
      "DefaultValue": "x",
      "Name": "Client ID",
      "Type": 2,
      "Mode": 2,
      "Description": "Client ID from Azure",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1607348596983,
      "ModificationTimeUnixTimeInMs": 1607348596983
    },
    {
      "ConnectorDefinitionId": 61,
      "IsMandatory": false,
      "DefaultValue": null,
      "Name": "Certificate Path",
      "Type": 2,
      "Mode": 2,
      "Description": "If authentication based on certificates is used instead of client secret, specify path to the certificate on Siemplify server",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1607348596983,
      "ModificationTimeUnixTimeInMs": 1607348596983
    },
    {
      "ConnectorDefinitionId": 61,
      "IsMandatory": false,
      "DefaultValue": "",
      "Name": "Certificate Password",
      "Type": 3,
      "Mode": 2,
      "Description": "Optional, if certificate is password-protected, specify the password to open the certificate file.",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1607348596983,
      "ModificationTimeUnixTimeInMs": 1607348596983
    }
  ],
  "Rules": [],
  "IsConnectorRulesSupported": true,
  "IsSystem": false,
  "PythonVersion": "None",
  "Id": 0,
  "CreationTimeUnixTimeInMs": 1607348596976,
  "ModificationTimeUnixTimeInMs": 1607348596978
}