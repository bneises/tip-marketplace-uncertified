{
  "IsEnabled": true,
  "IsCustom": false,
  "Integration": "MicrosoftGraphSecurityTools",
  "DocumentationLink": null,
  "Name": "MS SecureScore Alert",
  "Description": "Allows for easy monitoring of Secure Score. Set a threshold and you will be alerted when the score drops below.",
  "Creator": "daniel.harvey",
  "Script": "from SiemplifyConnectors import SiemplifyConnectorExecution\nfrom SiemplifyConnectorsDataModel import AlertInfo\nfrom SiemplifyUtils import output_handler, unix_now\nfrom random import randrange\nfrom MicrosoftGraphSecurityManager import MicrosoftGraphSecurityManager\n\n\nimport uuid\nimport sys\nimport json\nimport os\n\n# ============================================================================#\n# title           :MS SecureScore Alert\n# description     :This connector monitors your secure score and based \n#                  on the run schedule, creates alerts if the secure score \n#                  drops below a given threshold.\n#                  This could indicate a malicious action to disable several\n#                  security controls, or potentially a misconfiguration.\n# author          :Daniel Harvey\n# date            :07-12-2020\n# python_version  :3.7\n# ============================================================================#\n\nCONNECTOR_NAME = \"MS SecureScore Alert\"\nVENDOR = \"Microsoft\"\nPRODUCT = \"Microsoft 365\"\nRULE_GENERATOR = \"SecureScore\"\nRANDOM_ALERT_COUNT_MAX = 3\nRANDOM_EVENT_COUNT_PER_ALERT_MAX = 5\n\n@output_handler\ndef main(is_test_run):\n    alerts = [] # The main output of each connector run\n    siemplify = SiemplifyConnectorExecution() # Siemplify main SDK wrapper\n    siemplify.script_name = CONNECTOR_NAME\n\n    if (is_test_run):\n        siemplify.LOGGER.info(\"***** This is an \\\"IDE Play Button\\\"\\\\\\\"Run Connector once\\\" test run ******\")\n\n    siemplify.LOGGER.info(\"==================== Main - Param Init ====================\")\n\n    client_id = siemplify.extract_connector_param(param_name=\"Client ID\", print_value=True)\n    secret_id = siemplify.extract_connector_param(param_name=\"Secret ID\", print_value=False)\n    tenant = siemplify.extract_connector_param(param_name=\"Tenant ID\", print_value=False)\n    certificate_password = siemplify.extract_connector_param(param_name=\"Certificate Password\", print_value=False)\n    certificate_path = siemplify.extract_connector_param(param_name=\"Certificate Path\", print_value=True)\n    threshold = siemplify.extract_connector_param(param_name=\"Threshold\", print_value=False)\n    priority = siemplify.extract_connector_param(param_name=\"Default Priority\", print_value=False)\n\n    siemplify.LOGGER.info(\"------------------- Main - Started -------------------\")\n\n    json_results = {}\n    \n    try:\n        siemplify.LOGGER.info(\"Connecting to Microsoft Graph Security.\")\n        mtm = MicrosoftGraphSecurityManager(client_id, secret_id, certificate_path, certificate_password, tenant)\n        siemplify.LOGGER.info(\"Connected successfully.\")\n\n        secure_score = mtm.get_secure_score()\n\n        if secure_score:\n            siemplify.LOGGER.info(f\"Retrieved SecureScore.\")\n            \n            \n            if int(secure_score[0]['currentScore']) < int(threshold):\n                \n                try:\n                    alert_id=secure_score[0]['id']\n                    alert = fetch_alert(siemplify, alert_id, secure_score[0])\n            \n                    if alert:\n                        alerts.append(alert)\n                        siemplify.LOGGER.info(\"Added Alert {} to package results\".format(alert_id))\n            \n                except Exception as e:\n                    siemplify.LOGGER.error(\"Failed to process alert {}\".format(alert_id), alert_id=alert_id)\n                    siemplify.LOGGER.exception(e)\n\n                json_results = json.dumps(secure_score)\n                output_message = f'SecureScore information was found.'\n                result_value = json.dumps(secure_score)\n            else:\n                siemplify.LOGGER.info(\"Currect score {} is greater than threshold {}. No alerts created. \".format(str(secure_score[0]['currentScore']),str(threshold)))\n\n        else:\n            siemplify.LOGGER.info(f\"No SecureScore information was found.\")\n            output_message = f\"No SecureScore information was found.\"\n            result_value = json.dumps({})\n\n    except Exception as e:\n        siemplify.LOGGER.error(f\"Some errors occurred. Error: {e}\")\n        siemplify.LOGGER.exception(e)\n        result_value = json.dumps({})\n        output_message = f\"Some errors occurred. Error: {e}\"\n        raise\n    \n\n    siemplify.LOGGER.info(\"------------------- Main - Finished -------------------\")\n    siemplify.return_package(alerts)\n\n\ndef fetch_alert(siemplify, alert_id, secure_score):\n    siemplify.LOGGER.info(\"-------------- Started processing Alert {}\".format(alert_id), alert_id=alert_id)\n\n    alert_info = AlertInfo()\n    alert_info.display_id = str(uuid.uuid4())\n    alert_info.ticket_id = alert_id\n    alert_info.name = \"MS SecureScore Below Thresold\"\n    alert_info.rule_generator = RULE_GENERATOR\n    alert_info.start_time = unix_now()\n    alert_info.end_time = unix_now() \n    alert_info.priority = priority  # Informative = -1,Low = 40,Medium = 60,High = 80,Critical = 100.\n    alert_info.device_vendor = VENDOR  \n    alert_info.device_product = PRODUCT \n    # ----------------------------- Alert Fields initilization END -----------------------------\n\n    siemplify.LOGGER.info(\"---------- Events fetching started for alert  {}\".format(alert_id))\n\n    event_id = str(uuid.uuid4())\n    try:\n        event = fetch_event(siemplify, alert_id, event_id, secure_score)\n\n        if event:\n            alert_info.events.append(event)\n            siemplify.LOGGER.info(\"Added Event {} to Alert {}\".format(event_id, alert_id))\n        else:\n            siemplify.LOGGER.info(\"Event failed to process, moving on\")\n\n    except Exception as e:\n        siemplify.LOGGER.error(\"Failed to process event {}\".format(event_id), alert_id=alert_id)\n        siemplify.LOGGER.exception(e)\n        \n\n    siemplify.LOGGER.info(\"---------- Events fetching finished for alert {}\".format(alert_id))\n\n    siemplify.LOGGER.info(\"-------------- Finished processing Alert {}\".format(alert_id), alert_id=alert_id)\n    return alert_info\n\n\ndef fetch_event(siemplify, alert_id, event_id, secure_score):\n    siemplify.LOGGER.info(\"--- Started processing Event:  alert_id: {} | event_id: {}\".format(alert_id, event_id))\n    event = {}\n\n    # ----------- Mandatory Fields ----------------\n    event[\"StartTime\"] = unix_now()\n    event[\"EndTime\"] = unix_now()\n    event[\"name\"] = \"MFA problem detection\"\n    event[\"device_product\"] = \"Microsoft 365\"\n    # ----------------------------- ---------------\n\n    # General fields\n    event[\"activeUserCount\"] = secure_score[\"activeUserCount\"]\n    event[\"createdDateTime\"] = secure_score[\"createdDateTime\"]\n    event[\"currentScore\"] = secure_score[\"currentScore\"]\n    event[\"enabledServices\"] = str(secure_score[\"enabledServices\"])\n    event[\"AllTenantAverage\"] = secure_score[\"averageComparativeScores\"][0]['averageScore']\n    event[\"TotalSeatsAverage\"] = secure_score[\"averageComparativeScores\"][1]['averageScore']\n    event[\"IndustryAverage\"] = secure_score[\"averageComparativeScores\"][2]['averageScore']\n    event['controlScores'] = str(secure_score[\"controlScores\"])\n\n    siemplify.LOGGER.info(\"--- Finished processing Event: alert_id: {} | event_id: {}\".format(alert_id, event_id))\n\n    return event\n\nif __name__ == \"__main__\":\n    # Connectors are run in iterations. The interval is configurable from the ConnectorsScreen UI.\n    is_test_run = not (len(sys.argv) < 2 or sys.argv[1] == 'True')\n    main(is_test_run)",
  "Version": 52,
  "MappingRules": [],
  "ProductToVisualFamilyRecords": [],
  "SimulationUseCases": {
    "CasesForUseCase": [],
    "UseCaseName": null
  },
  "Parameters": [
    {
      "ConnectorDefinitionId": 62,
      "IsMandatory": false,
      "DefaultValue": "0",
      "Name": "Threshold",
      "Type": 1,
      "Mode": 2,
      "Description": "Specify the Secure Score threshold. If your Secure Score drops below this threshold, an alert will be raised.",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1607348542737,
      "ModificationTimeUnixTimeInMs": 1607348542737
    },
    {
      "ConnectorDefinitionId": 62,
      "IsMandatory": true,
      "DefaultValue": "x",
      "Name": "Tenant ID",
      "Type": 2,
      "Mode": 2,
      "Description": "Tenant ID  from Azure",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1607348542737,
      "ModificationTimeUnixTimeInMs": 1607348542737
    },
    {
      "ConnectorDefinitionId": 62,
      "IsMandatory": true,
      "DefaultValue": "x",
      "Name": "Secret ID",
      "Type": 3,
      "Mode": 2,
      "Description": "Secret ID from Azure",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1607348542737,
      "ModificationTimeUnixTimeInMs": 1607348542737
    },
    {
      "ConnectorDefinitionId": 62,
      "IsMandatory": true,
      "DefaultValue": "60",
      "Name": "PythonProcessTimeout",
      "Type": 2,
      "Mode": 0,
      "Description": "The timeout limit (in seconds) for the python process running current script",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1607348542737,
      "ModificationTimeUnixTimeInMs": 1607348542737
    },
    {
      "ConnectorDefinitionId": 62,
      "IsMandatory": true,
      "DefaultValue": "SecureScore",
      "Name": "EventClassId",
      "Type": 2,
      "Mode": 0,
      "Description": "The field name used to determine the event name (sub-type)",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1607348542737,
      "ModificationTimeUnixTimeInMs": 1607348542737
    },
    {
      "ConnectorDefinitionId": 62,
      "IsMandatory": true,
      "DefaultValue": "Microsoft 365",
      "Name": "DeviceProductField",
      "Type": 2,
      "Mode": 0,
      "Description": "The field name used to determine the device product",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1607348542737,
      "ModificationTimeUnixTimeInMs": 1607348542737
    },
    {
      "ConnectorDefinitionId": 62,
      "IsMandatory": true,
      "DefaultValue": "60",
      "Name": "Default Priority",
      "Type": 1,
      "Mode": 2,
      "Description": "Set the default priority (-1 to 100). Informative = -1, Low = 40, Medium = 60, High = 80, Critical = 100",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1607348542737,
      "ModificationTimeUnixTimeInMs": 1607348542737
    },
    {
      "ConnectorDefinitionId": 62,
      "IsMandatory": true,
      "DefaultValue": "x",
      "Name": "Client ID",
      "Type": 2,
      "Mode": 2,
      "Description": "Client ID from Azure",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1607348542737,
      "ModificationTimeUnixTimeInMs": 1607348542737
    },
    {
      "ConnectorDefinitionId": 62,
      "IsMandatory": false,
      "DefaultValue": null,
      "Name": "Certificate Path",
      "Type": 2,
      "Mode": 2,
      "Description": "If authentication based on certificates is used instead of client secret, specify path to the certificate on Siemplify server",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1607348542737,
      "ModificationTimeUnixTimeInMs": 1607348542737
    },
    {
      "ConnectorDefinitionId": 62,
      "IsMandatory": false,
      "DefaultValue": "",
      "Name": "Certificate Password",
      "Type": 3,
      "Mode": 2,
      "Description": "Optional, if certificate is password-protected, specify the password to open the certificate file.",
      "Id": 0,
      "CreationTimeUnixTimeInMs": 1607348542737,
      "ModificationTimeUnixTimeInMs": 1607348542737
    }
  ],
  "Rules": [],
  "IsConnectorRulesSupported": true,
  "IsSystem": false,
  "PythonVersion": "None",
  "Id": 0,
  "CreationTimeUnixTimeInMs": 1607348542730,
  "ModificationTimeUnixTimeInMs": 1607348542732
}